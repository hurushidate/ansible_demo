(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{1801:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((angular,inject)=>{class DeviceListMenu extends inject.Collectable{constructor(){super()}$onInit($INJECTABLE$,$scope,csfTopology,state,deviceListOptions){return()=>{this.csf=csfTopology,this.forticlientPage="fortiClientMonitor"===this.listType,this.permission={address:state.adminHasWritePermissionForTable("firewall","address"),dhcp:state.adminHasReadPermission(state.ACCESS_GROUP.NETWORK),fortiview:state.adminHasReadPermission(state.ACCESS_GROUP.SYSTEM),log:state.adminHasReadPermission(state.ACCESS_GROUP.LOG_DATA_ACCESS)},this.viewTypeSupported=deviceListOptions.hasViewOptions(this.listType),this.displaySettingSupported=deviceListOptions.hasDisplaySettings(this.listType),this._watchEntries()}}_watchEntries($INJECTABLE$,$scope){return()=>{$scope.$watchCollection("$ctrl.menu.entries",()=>{const entries=this.menu&&this.menu.entries,selected=this.menu&&this.menu.lastSelectedEntry||{};if(!Array.isArray(entries)||!entries.length)return;let selectedHasIP,len=(entries||[]).length;this.selectedFortigateIsThisFortigate=this.fortigate?this.fortigate===this.csf.thisFortigate.serial:this.csf.selectedFortigateIsThisFortigate||selected.fortigate===this.csf.thisFortigate.serial;const isIpAddress=addr=>["ipv4","ipv6"].includes(addr.type),isFirewallAddress=addr=>this.addressMap&&this.addressMap[addr.q_origin_key],isCreatableIpAddress=addr=>isIpAddress(addr)&&!isFirewallAddress(addr),isCreatableMacAddress=addr=>"mac"===addr.type&&!addr.mac_firewall_address,addresses=selected.joinedAddresses||[];let allowCreateFirewallAddress=this.permission.address&&1===len&&!this.forticlientPage&&this.selectedFortigateIsThisFortigate;function copyFrozenEntry(entry){return Object.isFrozen(entry)?Object.assign({},entry):entry}this.ipAddresses=addresses.filter(isIpAddress).map(copyFrozenEntry),selectedHasIP=this.ipAddresses.length>0,this.creatableMacAddresses=[],this.creatableIpAddresses=[],allowCreateFirewallAddress&&(this.creatableMacAddresses=addresses.filter(isCreatableMacAddress).map(copyFrozenEntry),this.creatableIpAddresses=addresses.filter(isCreatableIpAddress).map(copyFrozenEntry)),this.canCreateMacAddress=this.creatableMacAddresses.length>0,this.canCreateIpAddress=this.creatableIpAddresses.length>0,this.canShowInFortiView=this.permission.fortiview&&selectedHasIP,this.canShowMatchingLogs=this.permission.log&&selectedHasIP&&this.selectedFortigateIsThisFortigate})}}showInFortiView($INJECTABLE$,deviceUtils){return info=>{const role=info.is_detected_device_role_wan?"wan":"lan_dmz",selectedFortigate=this.fortigate||this.csf.selectedFortigate;let fortigate;this.csf.csfEnabled&&selectedFortigate&&(fortigate=selectedFortigate.allFortigates?this.menu.lastSelectedEntry.fortigate:selectedFortigate.q_origin_key),deviceUtils.showInFortiView(info.value,role,fortigate)}}showMatchingLogs($INJECTABLE$,deviceUtils){return addr=>{deviceUtils.showMatchingLogs(addr)}}createAddress($INJECTABLE$,deviceUtils){return info=>{const device=this.menu.lastSelectedEntry;deviceUtils.createAddress({name:device.hostname||"",type:info.type,addr:info.value,intf:info.detected_interface}).then(()=>{this.list.loadList({invalidateDeviceCache:!0,invalidateAddressCache:!0})})}}}return(providers,loaderProvider)=>(providers.$compile.component("fDeviceListMenu",{controller:DeviceListMenu,bindings:{menu:"=",listType:"<",addressMap:"<",statistics:"<",fortigate:"=?",deviceList:"=",list:"<"},templateUrl:__webpack_require__(1802)}),loaderProvider.initModules([__webpack_require__(449),__webpack_require__(329),__webpack_require__(1803),__webpack_require__(448),__webpack_require__(1805)]))}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1802:function(module,exports){var path="/migadmin/ng/user/device/f-device-list-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    <f-mutable-filter ng-if="::$ctrl.menu.popUpMenu"></f-mutable-filter>\n    <div class="separator" ng-if="::$ctrl.menu.popUpMenu"></div>\n    <div f-menu-item-submenu="addressSubmenu"\n        ng-if="$ctrl.menu.popUpMenu && ($ctrl.canCreateIpAddress || $ctrl.canCreateMacAddress)">\n        <f-icon class="fa-plus-circle"></f-icon>\n        <span>{{::\'Create Firewall Address\' | lang}}</span>\n    </div>\n    <div f-pop-up-menu="addressSubmenu">\n        <div ng-repeat="value in $ctrl.creatableMacAddresses">\n            <div f-menu-item-button click="$ctrl.createAddress(value)">\n                <span f-lang="MAC Address"></span>&nbsp;\n                <span>({{ value.value}})</span>\n            </div>\n        </div>\n        <div class="separator" ng-if="$ctrl.menu.popUpMenu && $ctrl.canCreateMacAddress && $ctrl.canCreateIpAddress"></div>\n        <div ng-repeat="value in $ctrl.creatableIpAddresses">\n            <div f-menu-item-button click="$ctrl.createAddress(value)">\n                <span f-lang="IP Address"></span>&nbsp;\n                <span>({{ value.value }})</span>\n            </div>\n        </div>\n    </div>\n    <div f-menu-item-submenu="logSubmenu"\n        ng-if="$ctrl.menu.popUpMenu && $ctrl.canShowMatchingLogs">\n        <f-icon class="ftnt-eventlog"></f-icon>\n        <span>{{::\'view_log\' | lang}}</span>\n    </div>\n    <div f-pop-up-menu="logSubmenu">\n        <div ng-repeat="value in $ctrl.ipAddresses">\n            <div f-menu-item-button click="$ctrl.showMatchingLogs(value.value)">\n                <span>{{ value.value }}</span>\n            </div>\n        </div>\n    </div>\n    <div f-menu-item-submenu="fortiViewSubmenu"\n        ng-if="$ctrl.menu.popUpMenu && $ctrl.canShowInFortiView">\n        <f-icon class="fa-area-chart"></f-icon>\n        <span>{{::\'Show in FortiView\' | lang}}</span>\n    </div>\n    <div f-pop-up-menu="fortiViewSubmenu">\n        <div ng-repeat="value in $ctrl.ipAddresses">\n            <div f-menu-item-button click="$ctrl.showInFortiView(value)">\n                <span>{{ value.value }}</span>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="center-menu-items" ng-if="::$ctrl.menu.menuBar">\n    <f-mutable-search></f-mutable-search>\n</div>\n<div class="right-menu-items" ng-hide="$ctrl.menu.popUpMenu">\n    <div class="menu-item menu-item-padded" f-tip-target ng-show="$ctrl.forticlientPage">\n        <f-icon class="fa-help-info space-around"></f-icon>\n        <div f-tip>\n            <table class="table slightly-condensed key-value">\n                <tr>\n                    <td f-lang="Total endpoints"></td>\n                    <td>{{$ctrl.statistics.fcTotalEndpoints}}</td>\n                </tr>\n                <tr>\n                    <td f-lang="Quarantined endpoints"></td>\n                    <td>{{$ctrl.statistics.fcTotalQuarantined}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div class="menu-item menu-item-padded" f-tip-target ng-hide="$ctrl.forticlientPage">\n        <f-icon class="fa-help-info space-around"></f-icon>\n        <div f-tip>\n            <table class="table slightly-condensed key-value">\n                <tr>\n                    <td f-lang="total_tracked"></td>\n                    <td>{{$ctrl.statistics.totalTrackedDevices}}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n')}]),module.exports=path},1803:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=(()=>{function DeviceDisplaySettingItem($scope,injector,deviceDisplaySettings){injector.injectMarked(this,{$scope:$scope}),this.options=deviceDisplaySettings.options[this.optionKey]}return Object.defineProperty(DeviceDisplaySettingItem.prototype,"option",{get:function(){const key=`device-list-${this.optionKey}`;return this.widgetController.viewSettings[key]},set:function(option){const key=`device-list-${this.optionKey}`;this.widgetController.viewSettings[key]=option}}),(providers,loaderProvider)=>(providers.$compile.component("fDeviceDisplaySettingItem",{controller:DeviceDisplaySettingItem,bindings:{optionKey:"<",widgetController:"="},templateUrl:__webpack_require__(1804)}),loaderProvider.initModules([__webpack_require__(185),__webpack_require__(538)]))}).apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1804:function(module,exports){var path="/migadmin/ng/user/device/services/f-device-display-setting-item.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div f-menu-item-submenu="$ctrl.optionMenu">\n    <span>{{$ctrl.options[$ctrl.option].lang | lang}}</span>\n</div>\n<div f-pop-up-menu="$ctrl.optionMenu">\n    <div f-menu-item-button ng-repeat="(key, option) in ::$ctrl.options"\n        ng-click="$ctrl.option = key" selected="key === $ctrl.option">\n        <span>{{::option.lang | lang}}</span>\n    </div>\n</div>\n')}]),module.exports=path},1805:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(182)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=(()=>{function DeviceViewTypeItem($scope,injector,deviceViewTypes){injector.injectMarked(this,{$scope:$scope}),this.deviceViewTypes=deviceViewTypes}return DeviceViewTypeItem.prototype={setSelected:function(option){this.viewType=option}},Object.defineProperty(DeviceViewTypeItem.prototype,"viewType",{get:function(){return this.options.some(option=>option.value===this.widgetController.viewSettings["device-list-view-type"])||(this.widgetController.viewSettings["device-list-view-type"]=this.options[0].value),this.widgetController.viewSettings["device-list-view-type"]},set:function(option){this.widgetController.viewSettings["device-list-view-type"]=option}}),Object.defineProperty(DeviceViewTypeItem.prototype,"options",{get:function(){const options=this.deviceViewTypes.getOptions(this.listType,this.widgetController.viewSettings.fortigate);return this.deviceViewTypeMap=options.reduce((map,option)=>(map[option.value]=option.label,map),{}),options}}),(providers,loaderProvider)=>(providers.$compile.component("fDeviceViewTypeItem",{controller:DeviceViewTypeItem,bindings:{listType:"=",fortigate:"<",widgetController:"<"},templateUrl:__webpack_require__(1806)}),loaderProvider.initModules([__webpack_require__(185)]))}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1806:function(module,exports){var path="/migadmin/ng/user/device/services/f-device-view-type-item.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div f-menu-item-submenu="$ctrl.optionMenu">\n    <span>{{ $ctrl.deviceViewTypeMap[$ctrl.viewType] | lang}}</span>\n</div>\n<div f-pop-up-menu="$ctrl.optionMenu">\n    <div f-menu-item-button ng-repeat="option in $ctrl.options"\n        ng-hide="option.hidden"\n        ng-click="$ctrl.setSelected(option.value)"\n        selected="$ctrl.viewType === option.value">\n        <span>{{::option.label | lang}}</span>\n    </div>\n</div>\n')}]),module.exports=path},1807:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8),__webpack_require__(36)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((ftnt_shared,fwebSelect)=>{const ADDRESS_DS="firewall.address",Omniselect=ftnt_shared.Omniselect;function DeviceListSourceFactory($q,deviceData,state,csfTopology,deviceListOptions){class DeviceListSource extends ftnt_shared.MuTable.FixedStreamableSource{setupOptions(options){this.invalidateDeviceCache=options&&options.invalidateDeviceCache||!1,this.invalidateAddressCache=options&&options.invalidateAddressCache||!1,this.fortigate=options&&options.fortigate,this.viewType=options&&options.viewType,this.displaySetting=options&&options.displaySetting,this.deviceListType=options&&options.deviceListType||"",this.hasViewOptions=deviceListOptions.hasViewOptions(this.deviceListType),this.addressMap={}}fetchEntries(){const addrDataSource=this._getOmniselectDataSource(ADDRESS_DS),promises={devices:deviceData.getDeviceData(this.deviceListType,this.viewType,this.invalidateDeviceCache,this.displaySetting,this.fortigate)};return state.adminHasReadPermissionForTable("firewall","address")&&(this.invalidateAddressCache&&Omniselect.invalidateCacheForSource(addrDataSource),promises.addresses=Omniselect.getSourceData(addrDataSource)),$q.all(promises).then(data=>(data.addresses&&(this.addressMap=data.addresses.alternativeMappings.$value),data.devices))}_getOmniselectDataSource(datasource){const fortigate=this.fortigate||csfTopology.selectedFortigate;return fwebSelect.getCSFProxySourceID(datasource,fortigate.path)}}return DeviceListSource.prototype.AUTO_REFRESH=!0,DeviceListSource}return(providers,loaderProvider)=>(providers.$provide.factory("DeviceListSource",DeviceListSourceFactory),loaderProvider.initModules([__webpack_require__(1808)]))}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1808:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(36),__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,fwebUtilSelect,ftnt_shared)=>{const Omniselect=ftnt_shared.Omniselect;class DeviceData extends inject.Collectable{constructor(){super()}getConfig(listType){return{deviceInventory:{processFn:"processDevice"},fortiClientMonitor:{processFn:"processFortiClient"}}[listType]}processDevice(devices){let source=devices.filter(entry=>!!entry.is_master_device);return this.notifyStatistics({totalTrackedDevices:source.length}),source}displaySettingFilter(displaySetting){return entry=>{const intfTelemetryEnabled=entry.detected_interface_fortitelemetry,online=entry.is_online,sendingTelemetry=entry.is_forticlient_endpoint;let result,telemetryFilter=!0,onlineFilter=!0;return"sending"===displaySetting.telemetry?telemetryFilter=sendingTelemetry:"not_sending"===displaySetting.telemetry&&(telemetryFilter=!sendingTelemetry),"online"===displaySetting.online?onlineFilter=online:"all"===displaySetting.online&&(onlineFilter=intfTelemetryEnabled||!intfTelemetryEnabled&&(online||sendingTelemetry)),result=telemetryFilter&&onlineFilter}}processFortiClient(devices,displaySetting,viewType){const hasDetectedInterface=entry=>entry.detected_interface||entry.is_master_device||(entry=>entry.unjoined_forticlient_endpoint)(entry);let source,endpoints;return endpoints=(source="interface"===viewType?devices.filter(hasDetectedInterface):devices.filter(entry=>entry.is_master_device)).filter(entry=>entry.is_forticlient_endpoint),source=source.filter(this.displaySettingFilter(displaySetting)),this.notifyStatistics({fcTotalEndpoints:endpoints.length,fcTotalQuarantined:endpoints.reduce((counter,current)=>(current.is_master_device&&current.quarantined_on_forticlient&&counter++,counter),0),totalTrackedDevices:source.length}),source}getDevices($INJECTABLE$,$q){return(invalidateDeviceCache,fortigate)=>this.getCsfPaths(fortigate).then(paths=>{return $q.all(paths.map(path=>this.devicePromise(path,invalidateDeviceCache))).then(fgtResults=>fgtResults.reduce((results,result)=>results.concat(result),[]))})}devicePromise(csfPath,invalidateDeviceCache){let datasource=fwebUtilSelect.getCSFProxySourceID("devices",csfPath);return invalidateDeviceCache&&Omniselect.invalidateCacheForSource(datasource),Omniselect.getSourceData(datasource)}getCsfPaths($INJECTABLE$,csfTopology){return async fortigate=>{await csfTopology.buildIfNecessary();const selectedFortigate=fortigate||csfTopology.selectedFortigate||csfTopology.thisFortigate;let paths;return paths=selectedFortigate&&selectedFortigate.allFortigates?csfTopology.fortigates.map(fgt=>fgt.path):[selectedFortigate.path]}}getDeviceData(listType,viewType,invalidateDeviceCache,displaySetting,fortigate){const config=this.getConfig(listType);return this.getDevices(invalidateDeviceCache,fortigate).then(resource=>this[config.processFn](resource,displaySetting,viewType))}subscribeStatistics($INJECTABLE$,$rootScope){return(scope,callback)=>{let handler=$rootScope.$on("notifying-device-statistics-event",callback);scope.$on("$destroy",handler)}}notifyStatistics($INJECTABLE$,$rootScope){return statistics=>{$rootScope.$emit("notifying-device-statistics-event",statistics)}}}return providers=>{providers.$provide.service("deviceData",DeviceData)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1814:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(ftnt_shared){const Omniselect=ftnt_shared.Omniselect,WFCAT_QUOTA_MON="/api/v2/monitor/webfilter/category-quota/";function CategoryQuotaUsage(slide,$http,$q){const ftgdCat=Omniselect.getSourceData("webfilter.ftgd-cat"),localFtgdCat=Omniselect.getSourceData("webfilter.ftgd-local-cat");$q.all([$http.get(WFCAT_QUOTA_MON,{csfProxy:this.fortigate,params:{profile:this.entry.profile,user:this.entry.user||this.entry.ip}}),ftgdCat,localFtgdCat]).then(data=>{const quotas=data[0].data.results.filter(function(quota){return quota.time||quota.traffic}),categories=data[1],localCategories=data[2].alternativeMappings.id,groupMap={},categoryMap=categories.mapping;categories.forEach(function(cat){const gid=(cat.group_id<10?"g0":"g")+cat.group_id;groupMap[gid]||(groupMap[gid]={id:cat.group_id,name:cat.group})}),quotas.forEach(function(quota){quota.category=quota.category.split(" ").map(function(cat_id){return groupMap[cat_id]&&groupMap[cat_id].name||categoryMap[cat_id]&&categoryMap[cat_id].name||localCategories[cat_id].desc})}),this.quota=quotas})}return function(providers){providers.$compile.component("fCategoryQuotaUsage",{controller:CategoryQuotaUsage,templateUrl:__webpack_require__(1815),bindings:{entry:"<",fortigate:"<"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1815:function(module,exports){var path="/migadmin/ng/utm/webfilter/monitor/f-category-quota-usage.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<section>\n    <div class="field">\n        <label>{{:: \'user\' | lang }}</label>\n        <div><span>{{ $ctrl.entry.user || $ctrl.entry.ip }}</span></div>\n    </div>\n    <div class="field">\n        <label>{{:: \'wfprofile\' | lang }}</label>\n        <div><span>{{ $ctrl.entry.profile }}</span></div>\n    </div>\n    <table class="table bordered striped">\n    <thead>\n        <tr>\n            <th>{{:: \'category\' | lang }}</th>\n            <th>{{:: \'usedquota\' | lang }}</th>\n            <th>{{:: \'Remaining\' | lang }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr ng-repeat="quota in $ctrl.quota">\n            <td><div ng-repeat="cat in quota.category">{{ cat }}</div></td>\n            <td><div ng-if="quota.time">{{ quota.time * 1000 | elapsedTime }}</div>\n                <div ng-if="!quota.time">{{ quota.traffic | bytes }}</div></td>\n            <td><div ng-if="quota.time">{{ quota.remaining_time * 1000 | elapsedTime }}</div>\n                <div ng-if="!quota.time">{{ quota.remaining_traffic | bytes }}</div></td>\n        </tr>\n        <tr ng-if="!$ctrl.quota.length"><td colspan="3">{{:: \'no_entries\' | lang }}</td></tr>\n    </tbody>\n    </table>\n</section>\n')}]),module.exports=path},1818:function(module,exports,__webpack_require__){"use strict";const inject=__webpack_require__(26),notify=__webpack_require__(27),slide=__webpack_require__(41),VPN_MONITOR_URL="/api/v2/monitor/vpn/ipsec/",VPN_MONITOR_RESET_URL="/api/v2/monitor/vpn/ipsec/tunnel_reset_stats/",ALL_PHASE2={allPhase2:!0},getPhase2ByStatus=(entry,status)=>entry.proxyid.filter(proxyid=>proxyid.status===status).map(proxyid=>Object.assign({},proxyid));class IpsecVpnMonitorMenu extends inject.Collectable{constructor(){super(),this._setupWatchers()}$onInit($INJECTABLE$,state){return()=>{this.readOnlyForPage=!state.adminHasWritePermission(state.ACCESS_GROUP.VPN),this.fReadOnlyManager&&this.fReadOnlyManager.setReadOnly(this.readOnlyForPage)}}_setupWatchers($INJECTABLE$,$scope){return()=>{$scope.$watchCollection("$ctrl.menu.entries",entries=>{let entry,selectOneEntry=1===(entries||[]).length,canDown=!1,canUp=!1;selectOneEntry&&(entry=entries[0],this.availableDownPhase2=getPhase2ByStatus(entry,"up"),(canDown=this.availableDownPhase2.length>0)&&this.availableDownPhase2.push(ALL_PHASE2),this.availableUpPhase2="dialup"!==entry.type?getPhase2ByStatus(entry,"down"):[],(canUp=this.availableUpPhase2.length>0)&&this.availableUpPhase2.push(ALL_PHASE2)),this.canTunnelReset=selectOneEntry,this.canTunnelDown=selectOneEntry&&canDown,this.canTunnelUp=selectOneEntry&&canUp,this.canLocateOnMap=selectOneEntry&&"ipsec-aggregate"!==entries[0].q_name})}}refresh(){this.listCtrl.loadTable({invalidateCache:!0})}resetStats($INJECTABLE$,$http,lang){return()=>{const entry=this.menu.lastSelectedEntry,msg=lang("Are you sure you want to reset the statistics for this tunnel?");slide.confirm(msg).then(()=>{$http.post(VPN_MONITOR_RESET_URL,{p1name:entry.name},{csfProxy:this.listCtrl.viewSettings.fortigate}).then(()=>this.refresh())})}}_tunnelUpDown($INJECTABLE$,$q,$http,lang){return(entry,command,p2entry)=>{const url=`${VPN_MONITOR_URL}tunnel_${command}`,p1={p1name:entry.name},promises=[];(p2entry.allPhase2?entry.proxyid:[p2entry]).forEach(proxyid=>{const p2={p2name:proxyid.p2name,p2serial:proxyid.p2serial};proxyid.status!==command&&promises.push($http.post(url,Object.assign({},p1,p2),{csfProxy:this.listCtrl.viewSettings.fortigate}))}),$q.all(promises).then(()=>this.refresh(),error=>{this.refresh(),notify.post(lang(error.message),"error")})}}aggregateDown($INJECTABLE$,lang){return()=>{slide.confirm(lang("Are you sure you want to bring down this aggregate?")).then(()=>{this.aggregateUpDown("down")})}}aggregateUpDown(status){const entry=this.menu.lastSelectedEntry,tunnelSource=this.listCtrl.source.newTunnelSource,notStatus="up"===status?"down":"up";let availableUpPhase2,tunnel,canChange;entry.member.forEach(memberTunnel=>{tunnel=tunnelSource.find(listEntry=>listEntry.$p1name===memberTunnel.q_origin_key),availableUpPhase2=getPhase2ByStatus(tunnel,notStatus),(canChange=availableUpPhase2.length>0)&&this._tunnelUpDown(tunnel,status,{allPhase2:!0})})}tunnelUp(p2entry){const entry=this.menu.lastSelectedEntry;this._tunnelUpDown(entry,"up",p2entry)}tunnelDown($INJECTABLE$,lang){return p2entry=>{slide.confirm(lang("bringDownConfirm").value).then(()=>{const entry=this.menu.lastSelectedEntry;this._tunnelUpDown(entry,"down",p2entry)})}}locateOnVpnMap($INJECTABLE$,$location){return()=>{const entry=this.menu.lastSelectedEntry;entry&&$location.path("/vpn/map").search({highlight:entry.$p1name,fortigate:this.listCtrl.viewSettings.fortigate.serial})}}}module.exports=(providers=>{providers.$compile.component("fIpsecVpnMonitorMenu",{controller:IpsecVpnMonitorMenu,bindings:{menu:"<",listCtrl:"<"},require:{fReadOnlyManager:"?^"},templateUrl:__webpack_require__(1819)})})},1819:function(module,exports){var path="/migadmin/ng/vpn/ipsec/monitor/f-ipsec-vpn-monitor-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    <div f-menu-item-button f-read-only-hide click="$ctrl.resetStats()"\n        ng-if="$ctrl.menu.lastSelectedEntry.q_name !== \'ipsec-aggregate\'"\n        enabled="$ctrl.canTunnelReset">\n        <f-icon class="fa-trash-o"></f-icon>\n        <span f-lang="reset_stats"></span>\n    </div>\n    <div f-menu-item-submenu="tunnelUpSubmenu" f-read-only-hide\n        ng-if="$ctrl.menu.lastSelectedEntry.q_name !== \'ipsec-aggregate\'"\n        enabled="$ctrl.canTunnelUp">\n        <f-icon class="fa-status-up"></f-icon>\n        <span f-lang="tunnelup"></span>\n    </div>\n    <div f-menu-item-button f-read-only-hide click="$ctrl.aggregateUpDown(\'up\')"\n        ng-if="$ctrl.menu.lastSelectedEntry.q_name === \'ipsec-aggregate\'"\n        enabled="$ctrl.menu.lastSelectedEntry.$status === \'down\'">\n        <f-icon class="fa-status-up"></f-icon>\n        <span f-lang="tunnelup"></span>\n    </div>\n    <div f-menu-item-button f-read-only-hide click="$ctrl.aggregateDown()"\n        ng-if="$ctrl.menu.lastSelectedEntry.q_name === \'ipsec-aggregate\'"\n        enabled="$ctrl.menu.lastSelectedEntry.$status === \'up\'">\n        <f-icon class="fa-status-down"></f-icon>\n        <span f-lang="tunneldown"></span>\n    </div>\n    <div f-pop-up-menu="tunnelUpSubmenu">\n        <div ng-repeat="tunnel in $ctrl.availableUpPhase2">\n            <div f-menu-item-button click="$ctrl.tunnelUp(tunnel)">\n                <span ng-if="!tunnel.allPhase2">{{ \'Phase 2 Selector: {NAME}\' |lang:[tunnel.p2name] }}</span>\n                <span ng-if="tunnel.allPhase2">{{:: \'All Phase 2 Selectors\' | lang }}</span>\n            </div>\n        </div>\n    </div>\n    <div f-menu-item-submenu="tunnelDownSubmenu" f-read-only-hide\n        ng-if="$ctrl.menu.lastSelectedEntry.q_name !== \'ipsec-aggregate\'"\n        enabled="$ctrl.canTunnelDown">\n        <f-icon class="fa-status-down"></f-icon>\n        <span f-lang="tunneldown"></span>\n    </div>\n    <div f-pop-up-menu="tunnelDownSubmenu" ng-enabled="$ctrl.canTunnelDown">\n        <div ng-repeat="tunnel in $ctrl.availableDownPhase2">\n            <div f-menu-item-button click="$ctrl.tunnelDown(tunnel)">\n                <span ng-if="!tunnel.allPhase2">{{ \'Phase 2 Selector: {NAME}\' |lang:[tunnel.p2name] }}</span>\n                <span ng-if="tunnel.allPhase2">{{:: \'All Phase 2 Selectors\' | lang }}</span>\n            </div>\n        </div>\n    </div>\n    <div f-menu-item-button\n        enabled="$ctrl.canLocateOnMap"\n        click="$ctrl.locateOnVpnMap()">\n        <f-icon class="fa-search"></f-icon>\n        <span f-lang="Locate on VPN Map"></span>\n    </div>\n</div>\n')}]),module.exports=path},1820:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(8),__webpack_require__(36)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((angular,ftnt_shared,fwebUtilSelect)=>{const Omniselect=ftnt_shared.Omniselect;function IPSecVPNMonitorSourceFactory($http,$q){class IPSecVPNMonitorSource extends ftnt_shared.MuTable.FixedStreamableSource{constructor(fortigate){super(),this.fortigate=fortigate}_fetchEntries(){const serial=this.fortigate.serial,tunnelsDatasource=this._getSelectSourceId("availableIPsecTunnels");this._invalidateCache(tunnelsDatasource);const aggregateDatasource=this._getSelectSourceId("system.ipsec-aggregate");this._invalidateCache(aggregateDatasource);const promises={aggregateSource:Omniselect.getSourceData(aggregateDatasource),tunnelSource:Omniselect.getSourceData(tunnelsDatasource)};return $q.all(promises).then(res=>{this.aggregateSource=res.aggregateSource,this.tunnelSource=res.tunnelSource;const tunnelAggregateMap={};return this.newAggregateSource=[],this.aggregateSource.forEach(aggregate=>{aggregate.member.forEach(member=>{const key=member.q_origin_key;this.tunnelSource.mapping[key]&&!this.newAggregateSource.includes(aggregate)&&(aggregate.fortigate=serial,this.newAggregateSource.push(aggregate)),tunnelAggregateMap[key]=aggregate})}),this.newTunnelSource=angular.copy(this.tunnelSource),this.newTunnelSource=this.newTunnelSource.map(tunnel=>Object.assign(tunnel,{$aggregate:tunnelAggregateMap[tunnel.q_origin_key],fortigate:serial})),this.newTunnelSource.concat(this.newAggregateSource)}).catch(()=>[])}fetchEntries(){return this._promise||(this._promise=this._fetchEntries()),this._promise.finally(()=>this._promise=null)}_getSelectSourceId(key){const path=this.fortigate.path;return fwebUtilSelect.getCSFProxySourceID(key,path)}_invalidateCache(datasource){Omniselect.invalidateCacheForSource(datasource)}}return IPSecVPNMonitorSource.prototype.AUTO_REFRESH=!0,IPSecVPNMonitorSource}return providers=>providers.$provide.factory("IPSecVPNMonitorSource",IPSecVPNMonitorSourceFactory)}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1829:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8),__webpack_require__(49),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((ftnt_shared,persist,notify)=>{const Omniselect=ftnt_shared.Omniselect;function UserMonitorSourceFactory($http,$q,lang){const FSSO_METHODS=["FSSO","FSSO_CITRIX","SSO_GUEST"],MONITOR_USER_FIREWALL_URL="/api/v2/monitor/user/firewall";class UserMonitorSource extends ftnt_shared.MuTable.FixedStreamableSource{constructor(options){super(),this.totalTrafficVolume=0,this.user={local:null,info:null},this.showFssoUsers=options&&options.showFssoUsers,this.fortigate=options&&options.fortigate}_fetchEntries(){const userLocalSourceID=this.fortigate.getOmniselectProxySourceID("user.local"),userInfoSourceID=this.fortigate.getOmniselectProxySourceID("user.info");return $q.all({userLocalSource:Omniselect.getSourceData(userLocalSourceID),userInfoSource:Omniselect.getSourceData(userInfoSourceID),results:this._getFirewallUsers()}).then(resolved=>{this.user.local=resolved.userLocalSource.mapping,this.user.info=resolved.userInfoSource.mapping,this.totalTrafficVolume=0;let firewallUsers=this._combineExplicitProxyUser(resolved.results||[]);return(firewallUsers=firewallUsers.filter(user=>!(!this.showFssoUsers&&!this._isNotFssoUser(user))&&(this.totalTrafficVolume+=user.traffic_vol_bytes||0,!0))).forEach(entry=>{const userInfo=this.user.info[entry.ipaddr];if(userInfo&&userInfo.username&&userInfo.username.includes(entry.username))return entry.datasource=userInfoSourceID,void(entry.q_origin_key=entry.ipaddr);const user=Array.isArray(entry.usergroup)&&entry.usergroup.find(x=>"user"===x.type);if(user){this.user.local[user.name]&&(entry.datasource=userLocalSourceID,entry.q_origin_key=user.name)}else;}),firewallUsers}).catch(()=>(notify.post(lang("Failed to retrieve info").toString(),notify.LEVEL.ERROR),[]))}fetchEntries(){return this._promise||(this._promise=this._fetchEntries()),this._promise.finally(()=>this._promise=null)}async _getFirewallUsers(){const response=await $http.get(MONITOR_USER_FIREWALL_URL,{csfProxy:this.fortigate}),{results:results,serial:serial}=response.data;return results.forEach(entry=>{entry.fortigate=serial}),results}_isNotFssoUser(user){return"auth_logon"!==user.type||-1===FSSO_METHODS.indexOf(user.method)}_combineExplicitProxyUser(data){const wadUsers=data.filter(user=>"wad"===user.type);return data.reduce((acc,user)=>{if("wad"===user.type)return acc;const existingWADIdx=wadUsers.findIndex(v=>user.username===v.username&&user.ipaddr===v.ipaddr&&(user.method&&user.method.toLowerCase())===(v.method&&v.method.toLowerCase()));if(existingWADIdx>=0){user.type="wad";const trafficVolBytes=wadUsers[existingWADIdx].traffic_vol_bytes||0;user.traffic_vol_bytes?user.traffic_vol_bytes+=trafficVolBytes:user.traffic_vol_bytes=trafficVolBytes,user.uid=wadUsers[existingWADIdx].uid,wadUsers.splice(existingWADIdx,1)}return acc.push(user),acc},[]).concat(wadUsers)}}return UserMonitorSource.prototype.AUTO_REFRESH=!0,UserMonitorSource}return providers=>{providers.$provide.factory("UserMonitorSource",UserMonitorSourceFactory)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1830:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){class UserAuthMenu extends inject.Collectable{constructor(){super()}$onInit($INJECTABLE$,state){return()=>{this.adminCanDeauthenticate=state.adminHasWritePermission(state.ACCESS_GROUP.USER_DEVICE)}}isDeauthenticationEnabled(users){return users&&users.length&&users.every(function(user){return user.hasOwnProperty("uid")||user.hasOwnProperty("auth_type")})}}return function(providers){providers.$compile.component("fUserAuthMenu",{bindings:{menu:"<",onDeauthenticateUsers:"&"},controller:UserAuthMenu,templateUrl:__webpack_require__(1831)})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1831:function(module,exports){var path="/migadmin/ng/user/auth/f-user-auth-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    <div f-menu-item-button ng-if="$ctrl.adminCanDeauthenticate"\n                            click="$ctrl.onDeauthenticateUsers({users: $ctrl.menu.entries})"\n         enabled="$ctrl.isDeauthenticationEnabled($ctrl.menu.entries)">\n        <f-icon class="fa-sign-out"></f-icon>\n        <span>{{:: \'field_deauth\' | lang }}</span>\n    </div>\n</div>\n<div class="center-menu-items" ng-if="$ctrl.menu.menuBar">\n    <f-mutable-search></f-mutable-search>\n</div>\n')}]),module.exports=path},1834:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){const fQuarantineMonitorMenu={controller:class extends inject.Collectable{$onInit($INJECTABLE$,$scope,state){return()=>{this.readOnly=state.readOnlyForPage}}canDelete(entries){return!(!entries||!entries.length)&&entries.some(entry=>this.quarantineMonitor.canDelete(entry))}delete(menu){this.quarantineMonitor.delete(menu.entries)}deleteAll(){this.quarantineMonitor.deleteAll()}},templateUrl:__webpack_require__(1835),bindings:{menu:"<",quarantineMonitor:"<"}};return function(providers){providers.$compile.component("fQuarantineMonitorMenu",fQuarantineMonitorMenu)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1835:function(module,exports){var path="/migadmin/ng/user/quarantine/f-quarantine-monitor-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    <div f-menu-item-delete action="$ctrl.delete($menu)"\n        enabled="$ctrl.canDelete($ctrl.menu.entries)"\n        ng-if="!$ctrl.readOnly"></div>\n    <div f-menu-item-button click="$ctrl.deleteAll()" ng-if="!$ctrl.readOnly && $ctrl.menu.menuBar"\n        enabled="$ctrl.menu.entries.length">\n        <f-icon class="ftnt-purge"></f-icon>\n        <span>{{:: \'clear_all\' | lang }}</span>\n    </div>\n</div>\n<div class="center-menu-items" ng-if="$ctrl.menu.menuBar">\n    <f-mutable-search></f-mutable-search>\n</div>\n')}]),module.exports=path},1836:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8),__webpack_require__(36)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((ftnt_shared,fwebUtilSelect)=>{function QuarantineMonitorSourceFactory($http,$q,csfTopology){const QUARANTINE_URL="/api/v2/cmdb/user/quarantine/",BANNED_URL="/api/v2/monitor/user/banned",EMS_RECORD_LIST_URL="/api/v2/monitor/endpoint-control/record-list",CATEGORIES={QUARANTINED:"QUARANTINED",USER_BANNED:"USER_BANNED",EMS_QUARANTINE:"EMS_QUARANTINE"},Omniselect=ftnt_shared.Omniselect;class QuarantineMonitorSource extends ftnt_shared.MuTable.FixedStreamableSource{constructor(options){super(),this.detectedDevices={},this.fortigate=options&&options.fortigate}_fetchEntries(){let promises={topologyLoad:csfTopology.buildIfNecessary(),userBanned:this._loadUserBannedPromise(),quarantine:this._loadQuarantinePromise(),emsQuarantine:this._loadEMSQuarantinePromise()};return promises.detectedDevices=promises.topologyLoad.then(()=>this._loadDetectedDevicePromise()),$q.all(promises).then(promise=>(this.detectedDevices=promise.detectedDevices,this.entries=promise.quarantine.concat(promise.userBanned,promise.emsQuarantine)))}fetchEntries(){return this._promise||(this._promise=this._fetchEntries()),this._promise.finally(()=>this._promise=null)}_queryAllSelectedFortigates(url){return csfTopology.buildIfNecessary().then(()=>{let promises,selectedFortigate=this.fortigate||csfTopology.thisFortigate;return promises="all"===selectedFortigate.q_origin_key?csfTopology.fortigates.map(fortigate=>$http.get(fortigate.createCSFURI(url))):[$http.get(selectedFortigate.createCSFURI(url))],$q.all(promises)})}_loadQuarantinePromise(){return this._queryAllSelectedFortigates(QUARANTINE_URL).then(results=>results.reduce((entries,fgtResult)=>{const serial=fgtResult.data.serial,quarantineResults=fgtResult.data.results,isQuarantineEnabled="enable"===quarantineResults.quarantine,targets=(quarantineResults.targets||[]).reduce((result,entry)=>{const macs=Array.isArray(entry.macs)?entry.macs:[entry];return result.concat(macs.map(macEntry=>Object.assign(macEntry,{category:CATEGORIES.QUARANTINED,fortigate:serial,quarantineEnabled:isQuarantineEnabled})))},[]);return entries.concat(targets)},[]))}_loadUserBannedPromise(){return this._queryAllSelectedFortigates(BANNED_URL).then(results=>results.reduce((entries,fgtResult)=>{const serial=fgtResult.data.serial;return entries.concat(fgtResult.data.results.map(entry=>Object.assign(entry,{category:CATEGORIES.USER_BANNED,fortigate:serial})))},[]))}_loadEMSQuarantinePromise(){return this._queryAllSelectedFortigates(EMS_RECORD_LIST_URL).then(results=>results.reduce((entries,fgtResult)=>{const serial=fgtResult.data.serial;return entries.concat(fgtResult.data.results.filter(entry=>"boolean"==typeof entry.quarantined?entry.quarantined:"quarantined"===entry.state).map(entry=>Object.assign(entry,{category:CATEGORIES.EMS_QUARANTINE,fortigate:serial})))},[]))}_loadDetectedDevicePromise(){let promises;const selectedFortigate=this.fortigate||csfTopology.thisFortigate;return promises="all"===selectedFortigate.q_origin_key?csfTopology.fortigates.map(fortigate=>getDetectedDevicesPromise(fortigate.path)):[getDetectedDevicesPromise(selectedFortigate.path)],$q.all(promises).then(result=>result.reduce((mapping,fgtResult)=>Object.assign(mapping,fgtResult.mapping),{}));function getDetectedDevicesPromise(csfPath){var source=fwebUtilSelect.getCSFProxySourceID("devices",csfPath);return Omniselect.getSourceData(source)}}}return QuarantineMonitorSource.prototype.AUTO_REFRESH=!0,QuarantineMonitorSource}return providers=>{providers.$provide.factory("QuarantineMonitorSource",QuarantineMonitorSourceFactory)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1839:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8),__webpack_require__(30)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((ftnt_shared,fLog)=>{function UserCollectedEmailSourceFactory($http,state){const MONITOR_USER_COLLECTED_EMAIL_URL="/api/v2/monitor/user/collected-email";class UserCollectedEmailSource extends ftnt_shared.MuTable.FixedStreamableSource{constructor(fortigate){super(),this.totalTrafficVolume=0,this.fortigate=fortigate}fetchEntries(){return this._promise||(this._promise=this._getCollectedEmail()),this._promise.finally(()=>this._promise=null)}_getCollectedEmail(){const ipv6=state.featureEnabled("gui-ipv6");return $http.get(MONITOR_USER_COLLECTED_EMAIL_URL,{csfProxy:this.fortigate,params:{ipv6:ipv6}}).then(response=>{let results=response.data.results;return this.totalTrafficVolume=results.reduce((totalTraffic,user)=>totalTraffic+(user.traffic_vol_bytes||0),0),results}).catch(e=>(fLog.error(e),[]))}}return UserCollectedEmailSource.prototype.AUTO_REFRESH=!0,UserCollectedEmailSource}return providers=>{providers.$provide.factory("UserCollectedEmailSource",UserCollectedEmailSourceFactory)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1853:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(ftnt_shared){const WIFI_CLIENT_URL="/api/v2/monitor/wifi/client",{MuTable:MuTable}=ftnt_shared;function factory($http){class WifiLoginFailuresSource extends MuTable.FixedStreamableSource{constructor(fortigate){super(),this.fortigate=fortigate}async fetchData(){const config={params:{type:"fail-login"}};this.fortigate&&(config.csfProxy=this.fortigate);const response=await $http.get(WIFI_CLIENT_URL,config),entries=response.data.results;return entries.forEach(entry=>entry.fortigate=response.data.serial),entries}async fetchEntries(){return this.promise||(this.promise=this.fetchData()),await this.promise.finally(()=>this.promise=null)}}return WifiLoginFailuresSource.prototype.AUTO_REFRESH=!0,WifiLoginFailuresSource}return providers=>providers.$provide.factory("WifiLoginFailuresSource",factory)}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},329:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26),__webpack_require__(31),__webpack_require__(34),__webpack_require__(111),__webpack_require__(54),__webpack_require__(38),__webpack_require__(8),__webpack_require__(43),__webpack_require__(36)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((angular,inject,dom,fweb_datetime,fweb_avatars,select_setup,fweb_icon,ftnt_shared,fweb_lang,fweb_select)=>{function DeviceListOptions(injector,csfTopology){injector.injectMarked(this),this.csf=csfTopology}DeviceListOptions.prototype={hasViewOptions:function(listType){return!!this.getConfig(listType).hasViewOptions},hasDisplaySettings:function(listType){return!!this.getConfig(listType).hasDisplaySettings}};const genTableId=(listType,viewType,selectAllFortigates)=>{return`${selectAllFortigates?"all_fortigates_":""}${listType}${viewType=viewType?`_${viewType}`:""}`};DeviceListOptions.prototype.getConfig=inject.mark(state=>(function(listType,tableId){const chartColumnsMap=new Map([[genTableId("fortiClientMonitor","status",!0),["online_status","fortigate"]],[genTableId("fortiClientMonitor","status",!1),["online_status","interfaces"]],[genTableId("fortiClientMonitor","interface",!1),["detected_interface","online_status"]],[genTableId("fortiClientMonitor","fortigate",!0),["fortigate","online_status"]],[genTableId("deviceInventory","hardware_vendor",!0),["hardware_vendor","os_name","online_status","fortigate"]],[genTableId("deviceInventory","hardware_vendor",!1),["hardware_vendor","os_name","online_status","interfaces"]],[genTableId("deviceInventory","os_name",!0),["os_name","hardware_vendor","online_status","fortigate"]],[genTableId("deviceInventory","os_name",!1),["os_name","hardware_vendor","online_status","interfaces"]]]),defaultColumnsMap=new Map([[genTableId("deviceInventory","hardware_vendor",!0),["device","user","joinedAddresses","os_name","fortigate","hardware_family","hardware_version"]],[genTableId("deviceInventory","hardware_vendor",!1),["device","user","joinedAddresses","os_name","hardware_family","hardware_version"]],[genTableId("deviceInventory","os_name",!1),["device","user","joinedAddresses","hardware_vendor","os_version"]],[genTableId("deviceInventory","os_name",!0),["device","user","joinedAddresses","hardware_vendor","fortigate","os_version"]],[genTableId("fortiClientMonitor","status",!0),["device","user","joinedAddresses","forticlient_version","fortigate"]],[genTableId("fortiClientMonitor","status",!1),["device","user","joinedAddresses","forticlient_version"]],[genTableId("fortiClientMonitor","interface",!1),["device","user","joinedAddresses","forticlient_version"]],[genTableId("fortiClientMonitor","fortigate",!0),["device","user","joinedAddresses","forticlient_version"]]]);let result={deviceInventory:{userDefinedSections:!1,hasViewOptions:!0,defaultView:"hardware_vendor",sections:{hardware_vendor:["hardware_vendor"],os_name:["os_name"]},columnFilter:col=>{return state.featureEnabled("gui-endpoint-control")||!["domain","forticlient_version"].includes(col.id)}},fortiClientMonitor:{hasViewOptions:!0,hasDisplaySettings:!0,defaultView:"interface",userDefinedSections:!1,sections:{interface:["detected_interface"],fortigate:["fortigate"],status:["online_status"]},columnFilter:col=>"fortiswitch_port"!==col.id}}[listType];return result.chartColumns||(result.chartColumns=chartColumnsMap.get(tableId)),result.defaultColumns||(result.defaultColumns=defaultColumnsMap.get(tableId)),result}));const getOsSectionLabel=({server:server,os:os})=>server?fweb_lang.translate("User::Device::OS.server"):os||fweb_lang.translate("User::Device::OS.unknown"),copyKeys=(entry,keys)=>keys.reduce((result,key)=>(result[key]=entry[key],result),{}),joinChildDevices=(entry,keys)=>[copyKeys(entry,keys),...entry.other_macs||[]],getUserInfoValue=(userInfo,key)=>userInfo&&userInfo[key]&&userInfo[key][0];return DeviceListOptions.prototype.getColumns=inject.mark(state=>(function(listType,viewType,selectAllFortigates){const sortUtils=this.getSortFn(),columnFilterFn=this.getConfig(listType).columnFilter,ipv6Enabled=state.featureEnabled("gui-ipv6");function addLastSeenToolTip(element,entry){if(!this.section)ftnt_shared.Tooltip.addToElement(element,(onlineStatus=>dom.elem("span",{textContent:fweb_lang.translate(`User::Device::status.${onlineStatus}`)}))(entry.online_status));else{let tooltip=((elapsedSeconds,intf)=>{if(null!=elapsedSeconds&&intf){let lastSeen=fweb_datetime.formatDateTime(new Date(Date.now()-1e3*elapsedSeconds),{fromBrowser:!0});return`${fweb_lang.translate("last_seen")}: ${lastSeen} (${intf})`}})(entry.last_seen,entry.detected_interface);tooltip&&ftnt_shared.Tooltip.addToElement(element,dom.elem("span",{textContent:tooltip}))}}let columns=[{id:"online_status",langKey:"status",cellValueFunction:entry=>fweb_lang.translate(`User::Device::status.${entry.online_status}`),cellFormatter:(entry,column,value)=>{const state=entry[column.id],iconClass=fweb_icon.iconClass(fweb_icon.ICON_TYPE.DEVICE_STATUS,state),hasLastSeenTooltip=null!=entry.last_seen&&entry.detected_interface;return dom.elem("span",{className:hasLastSeenTooltip?"tooltip-hint":""},{children:[dom.elem("f-icon",{className:iconClass}),dom.elem("span",{textContent:value})]})},onCellRendered:addLastSeenToolTip,sortComparator:sortUtils.defaultDeviceSortFn},{id:"device",langKey:"device",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:entry=>{return{datasource:fweb_select.getCSFProxySourceID("devices",entry.csfPath),q_origin_key:entry.mac,hostname:entry.hostname,"css-class":entry["css-class"]}},collectionEntryFormatter:entry=>dom.elem("span",null,{children:[dom.elem("f-icon",{className:entry["css-class"]}),dom.elem("span",{textContent:entry.hostname||entry.q_origin_key})]}),sortComparator:sortUtils.defaultDeviceSortFn},{id:"user",langKey:"User",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:entry=>{const source=fweb_select.getCSFProxySourceID("user.info",entry.csfPath);let unauthuserInfo;return getUserInfoValue(entry.user_info,"cn")||(unauthuserInfo={unauthuser:entry.unauth_user,isFortiClientUnauthuser:entry.is_forticlient_unauth_user,uid:entry.forticlient_id,quarantinedOnFortiClient:entry.quarantined_on_forticlient,csfPath:entry.csfPath}),{datasource:source,q_origin_key:getUserInfoValue(entry.user_info,"cn"),$unauthuserInfo:unauthuserInfo}},collectionEntryFormatter:entry=>entry.q_origin_key?dom.elem("span",{children:[dom.elem("f-icon",{className:"fa-user-authenticated"}),dom.elem("span",{textContent:entry.q_origin_key})]}):entry.$unauthuserInfo&&entry.$unauthuserInfo.unauthuser?fweb_avatars.userFormatFragment(entry.$unauthuserInfo):void 0},{id:"os_name",langKey:"Software OS",cellValueFunction:entry=>getOsSectionLabel({server:entry.server,os:entry.os_name}),onCellRendered:function(element,entry){let os,tooltip;!!this.section&&entry.server&&(os=getOsSectionLabel({os:entry.os_name}),tooltip=`${fweb_lang.translate("Software OS")}: ${os}`,os&&ftnt_shared.Tooltip.addToElement(element,dom.elem("span",{textContent:tooltip})))},sortComparator:sortUtils.sortTypeSectionsFn},{id:"hostname",langKey:"host_name"},{id:"joinedAddresses",langKey:"Address",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:entry=>{return(entry.joinedAddresses||[]).filter(addr=>(ipv6Enabled||"ipv6"!==addr.type)&&(addr=>"interface"!==viewType||!entry.is_master_device||addr.detected_interface===entry.detected_interface)(addr))},collectionEntryFormatter:entry=>entry.value||""},{id:"mac"},{id:"interfaces",langKey:"interface",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:entry=>{const source=fweb_select.getCSFProxySourceID("firewallInterfaces",entry.csfPath);let interfaceSet=new Set;for(const intf of joinChildDevices(entry,["detected_interface"]))intf&&intf.detected_interface&&interfaceSet.add(intf.detected_interface);return interfaceSet.size||interfaceSet.add("Unknown"),[...interfaceSet].map(intf=>({datasource:source,q_origin_key:intf}))},collectionEntryFormatter:()=>"Unknown"},{id:"fortiswitch_port",trustCellFormatterForHTML:!0,type:"collection",cellValueFunction:entry=>{return joinChildDevices(entry,["fortiswitch_id","fortiswitch_name","fortiswitch_port_name"]).filter(item=>item.fortiswitch_port_name&&item.fortiswitch_id)},collectionEntryFormatter:entry=>{const label=`${entry.fortiswitch_name||entry.fortiswitch_id}: ${entry.fortiswitch_port_name}`;return dom.elem("span",{},{children:[dom.elem("f-icon",{className:"ftnt-standard-fortiswitch security-fabric-node"}),dom.elem("span",{textContent:label})]})}},{id:"forticlient_version",langKey:"forticlient_version"},{id:"last_seen",langKey:"last_seen",type:"date",dateType:"fromNow",cellValueFunction:entry=>{if(entry.hasOwnProperty("last_seen"))return new Date(Date.now()-1e3*entry.last_seen)},onCellRendered:addLastSeenToolTip},{id:"hardware_vendor",langKey:"Hardware Vendor",cellValueFunction:(entry,column)=>entry[column.id]||fweb_lang.translate("User::Device::OS.unknown"),sortComparator:sortUtils.sortHardwareVendorFn},{id:"hardware_type",langKey:"Device Type"},{id:"hardware_family",langKey:"Device Family"},{id:"hardware_version",langKey:"Hardware Version"},{id:"os_version",langKey:"Software Version"},{id:"server",langKey:"Server",cellValueFunction:entry=>{if(entry.server)return fweb_lang.translate(`Server::type.${entry.server}`)},cellFormatter:(entry,column,value)=>{const os=entry.os_name||"unknown";let iconClass,content;if(entry.server)return iconClass=fweb_icon.iconClass(fweb_icon.ICON_TYPE.SERVER_TYPE,entry.server)||"fa-server",content=`${value}${((label,start,end)=>label?`${start}${label}${end}`:"")(os," (",")")}`,dom.elem("span",null,{children:[dom.elem("f-icon",{className:iconClass,title:content}),dom.elem("span",{textContent:content})]})}},{id:"detected_interface",hidden:!0,langKey:"Interface",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:entry=>{return{datasource:fweb_select.getCSFProxySourceID("firewallInterfaces",entry.csfPath),q_origin_key:entry.detected_interface}},collectionEntryFormatter:entry=>entry.q_origin_key||"Unknown",sortComparator:sortUtils.sortInterfaceSectionsFn},{id:"domain"}];return selectAllFortigates&&columns.push({id:"fortigate",langKey:"FortiGate",type:"omniselect",cellValueFunction:entry=>({datasource:"csfFortiGates",q_origin_key:entry.fortigate})}),angular.isFunction(columnFilterFn)&&(columns=columns.filter(columnFilterFn)),columns})),DeviceListOptions.prototype.getSortFn=function(){const alphaSortFn=ftnt_shared.util.fastLocaleCompare,deviceSortFn=(a,b,entryA,entryB)=>{const nameA=entryA.mac_firewall_address||entryA.hostname||entryA.mac,nameB=entryB.mac_firewall_address||entryB.hostname||entryB.mac;return alphaSortFn(nameA,nameB)},getStateSortOrder=state=>{return["quarantined","registered-online-offnet","registered-online-onnet","registered-online","registered","registered-offline","online","offline"].map(key=>fweb_lang.translate(`User::Device::status.${key}`)).indexOf(state)},getOnlineStatus=entry=>fweb_lang.translate(`User::Device::status.${entry.online_status}`),defaultDeviceSortFn=function(a,b,entryA,entryB){const aOrder=getStateSortOrder(getOnlineStatus(entryA)),bOrder=getStateSortOrder(getOnlineStatus(entryB));return aOrder>bOrder?1:aOrder<bOrder?-1:deviceSortFn(0,0,entryA,entryB)};function sortSectionTypeNameFn(a,b){let aOrder,bOrder,fixed=["server","unknown"].map(key=>fweb_lang.translate(`User::Device::OS.${key}`));return a===b?0:a?b?(aOrder=fixed.indexOf(a),bOrder=fixed.indexOf(b),-1===aOrder&&-1===bOrder?alphaSortFn(a,b):-1===aOrder&&bOrder>-1?-1:aOrder>-1&&-1===bOrder?1:aOrder>bOrder?1:-1):-1:1}function getSortSectionFn(sortFn){return function(a,b,entryA,entryB){let result=0;return sortFn&&(result=sortFn(a._value,b._value,entryA,entryB)),0!==result?result:defaultDeviceSortFn(a._value,b._value,entryA,entryB)}}return{deviceSortFn:deviceSortFn,alphaSortFn:alphaSortFn,defaultDeviceSortFn:defaultDeviceSortFn,sortTypeSectionsFn:getSortSectionFn(sortSectionTypeNameFn),sortInterfaceSectionsFn:getSortSectionFn(function(a,b){return a===b?0:a?b?"Unknown"===a?1:"Unknown"===b?-1:alphaSortFn(a,b):-1:1}),sortHardwareVendorFn:getSortSectionFn(sortSectionTypeNameFn)}},DeviceListOptions.prototype.getOptions=inject.mark((state,csfTopology)=>(function(type,viewType,fortigate){const selectedFortigate=fortigate||csfTopology&&(csfTopology.selectedFortigate||csfTopology.thisFortigate),selectAllFortigates=selectedFortigate&&"all"===selectedFortigate.q_origin_key,id=genTableId(type,viewType,selectAllFortigates),config=this.getConfig(type,id);return{id:id,columns:this.getColumns(type,viewType,selectAllFortigates),defaultColumns:config.defaultColumns,defaultSectionColumn:config.hasViewOptions?config.sections[viewType][0]:config.sections[0],userDefinedSections:config.userDefinedSections,defaultSortColumn:"online_status",defaultSortDirection:"asc",chartColumns:config.chartColumns}})),providers=>{providers.$provide.service("deviceListOptions",DeviceListOptions)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},538:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){function DeviceDisplaySettings(){}return DeviceDisplaySettings.prototype={options:{online:{online:{lang:"Online Only"},all:{lang:"Include Offline"}},telemetry:{sending:{lang:"Sending FortiTelemetry Only"},all:{lang:"Include All FortiTelemetry States"},not_sending:{lang:"Not Sending FortiTelemetry Only"}}},defaultOption:{online:"online",telemetry:"sending"}},function(providers){providers.$provide.service("deviceDisplaySettings",DeviceDisplaySettings)}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}}]);