(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{151:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(32),__webpack_require__(36),__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,f_formatters,f_select,ftnt_shared){const Omniselect=ftnt_shared.Omniselect;function factory(CMDB){var QUOTED_STRING_SPLIT_EXPR=/(?:"([^"]+)") ?/g;function quotedStringSplit(str){for(var match,split=new RegExp(QUOTED_STRING_SPLIT_EXPR),result=[];match=split.exec(str);)result.push(match[1]);return result}function makeDatasourceEntry(datasource,name){if("string"!=typeof name)throw new Error("datasource entry name must be a string");var entry={name:name,datasource:datasource};return entry[Omniselect.prototype.ENTRY_ID_KEY]=name,"system.vdom"===datasource&&(entry["css-class"]=f_formatters.vdom_icon_class(name)),entry}function VCluster(haModel){this._haModel=haModel}function SystemHaModel($initPromise,lang,state){if(this.state=state,!this.$cmdb.datasource)throw new Error("This model must be used with `datasource: true`");this._init(),monitorInterfaceMixin(this["secondary-vcluster"]),$initPromise.then(function(){this.$schema.$promise=this.$schema.$promise.then(function(schema){return this.$schema.children.mode.options.forEach(function(opt){opt.lang=lang("System::HA::mode."+opt.name)}),this.$schema.children.hbdev.$priority={min:0,max:512,default:0},this._initHbdev(),schema}.bind(this))}.bind(this)),this.$vclusters=SystemHaModel.getVClusters(this)}return VCluster.prototype={_haModel:null,_vdomString:null,_vdoms:null,get vdoms(){if(this._vdomString===this._haModel.vdom)return this._vdoms;var result,vdoms=quotedStringSplit(this._haModel.vdom);return this._vdomString=this._haModel.vdom,result=vdoms.map(makeDatasourceEntry.bind(null,"system.vdom")),this._vdoms=result},set vdoms(value){var idKey=Omniselect.prototype.ENTRY_ID_KEY;value=value||[],this._haModel.vdom='"'+value.map(function(vd){return vd[idKey]}).join('" "')+'"',this._vdomString=this._haModel.vdom,this._vdoms=value}},monitorInterfaceMixin(VCluster.prototype),SystemHaModel.getVClusters=function(model){return[new VCluster(model),new VCluster(model["secondary-vcluster"])]},SystemHaModel.filters={monitor:function(intf){return intf.is_ha_monitorable},hbdev:function(intf){return intf.is_ha_heartbeatable}},SystemHaModel.prototype=new CMDB.ResourceModel({$save:function(){return this._storeHbdev(),this._storeMonitor(),this["secondary-vcluster"]._storeMonitor(),"a-p"!==this.mode&&(this.$vcluster2=!1),CMDB.ResourceModel.prototype.$save.apply(this,arguments)},get $sessionPickup(){return"enable"===this["session-pickup"]},set $sessionPickup(value){this["session-pickup"]=value?"enable":"disable"},get $hbdev(){return this.$$hbdev},set $hbdev(value){this.$schema&&this.$schema.$promise.then(function(){value&&value.forEach(function(dev){dev.name in this.$hbdevPriority||(this.$hbdevPriority[dev.name]=this.$schema.children.hbdev.$priority.default)}.bind(this)),this._storeHbdev(value)}.bind(this)),this.$$hbdev=value},get $syncMgmtVdom(){return"disable"===this["standalone-mgmt-vdom"]},set $syncMgmtVdom(value){this["standalone-mgmt-vdom"]=value?"disable":"enable"},get $mgmtStatus(){return"enable"===this["ha-mgmt-status"]},set $mgmtStatus(value){this["ha-mgmt-status"]=value?"enable":"disable"},get $vcluster2(){return"enable"===this.vcluster2},set $vcluster2(value){this.vcluster2=value?"enable":"disable"},get $unicastHb(){return"enable"===this["unicast-hb"]},set $unicastHb(value){this["unicast-hb"]=value?"enable":"disable"},_init:function(){this.password&&(this.password=void 0);var cmdb=new CMDB("system","ha",{children:"ha-mgmt-interfaces",shortcuts:!1});this["ha-mgmt-interfaces"].$factory=cmdb.defaults.bind(cmdb),0===this["ha-mgmt-interfaces"].length&&this["ha-mgmt-interfaces"].push(cmdb.defaults()),this["ha-mgmt-interfaces"].forEach(entry=>{var intf=entry.interface;if(intf){const datasource=this.state.isGlobalVDOM()?f_select.makeGlobalSourceID("haFirewallInterfaces"):"haFirewallInterfaces";var intfName=this.$cmdb.datasource?intf.name:intf;entry.interface=makeDatasourceEntry(datasource,intfName)}})},_storeHbdev:function(value){void 0===value&&(value=this.$hbdev),this.hbdev=value&&value.map(function(v){return'"'+v.name+'" '+this.$hbdevPriority[v.name]}.bind(this),[]).join(" ")||null},_initHbdev:function(){var match,device,split=/(?:"([^"]+)") (\d+) ?/g;for(this.$$hbdev=[],this.$hbdevPriority={};match=split.exec(this.hbdev);)(device=makeDatasourceEntry("haFirewallInterfaces",match[1]))[Omniselect.prototype.ENTRY_ID_KEY]=device.name,this.$$hbdev.push(device),this.$hbdevPriority[device.name]=Number(match[2])||this.$schema.children.hbdev.$priority.default},mgmtFilter:function(intf){var name;return(this.$original&&this.$original["ha-mgmt-interfaces"]).some((name=intf.name,function(mgmtIntf){var entry=mgmtIntf.interface;return entry&&entry.name===name}))||intf.is_ha_mgmt_candidate},mgmtIntfUnique:function(value,index){return!this["ha-mgmt-interfaces"].some(function(intf,i){return intf.interface&&intf.interface.name===value.name&&i!==index})}}),monitorInterfaceMixin(SystemHaModel.prototype),SystemHaModel;function monitorInterfaceMixin(target){Object.defineProperty(target,"$monitor",{get:function(){if(!this._monitor&&this.monitor){var intfs=Array.isArray(this.monitor)?this.monitor.map(function(intf){return intf.name}):quotedStringSplit(this.monitor);this._monitor=intfs.map(makeDatasourceEntry.bind(null,"haFirewallInterfaces"))}return this._monitor},set:function(value){value=value||[],this._monitor=value,this._storeMonitor(value)},enumerable:!0}),target._storeMonitor=function(value){void 0===value&&(value=this._monitor||[]),this.monitor=value&&value.map(function(v){return'"'+v[Omniselect.prototype.ENTRY_ID_KEY]+'"'}).join(" ")||null}}}return function(providers){providers.$provide.factory("SystemHaModel",factory)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1720:function(module,exports){var path="/migadmin/ng/system/dashboard/f-system-dashboard.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard widget-size="::$ctrl.WIDGET_SIZE"\n    fixed="$ctrl.dashboard.permanent !== \'enable\' && $ctrl.dashboard[\'layout-type\'] === \'fixed\'"\n    fixed-columns="$ctrl.dashboard.columns"\n    dashboard="$ctrl.dashboardController"\n    on-widgets-updated="$ctrl.onWidgetsUpdated(widgets)"\n    on-widget-removed="$ctrl.onWidgetRemoved(widget)"\n    initial-widgets="$ctrl.initialWidgets"\n    loading="$ctrl._loading">\n    <div class="left-menu-items" ng-if="!$ctrl.isStandaloneLayout()">\n        <div f-menu-item-button click="$ctrl.addWidget()" emphasized="::true"\n            enabled="!$ctrl._disabledAddFunction || ($ctrl.isStandaloneLayout() && !$ctrl.widgets.length)">\n            <f-icon class="fa-plus"></f-icon>\n            <span>{{::\'Add Widget\' | lang}}</span>\n        </div>\n    </div>\n    <div class="center-menu-items no-separator" ng-if="$ctrl.csfEnabled"></div>\n    <div class="right-menu-items" ng-if="$ctrl.csfEnabled">\n        <f-csf-fortigate-chooser></f-csf-fortigate-chooser>\n    </div>\n</f-dashboard>\n')}]),module.exports=path},1735:function(module,exports){var path="/migadmin/ng/system/dashboard/f-license-renew-options.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div ng-if="$ctrl.showPurchaseActions()">\n    <div f-menu-item-button click="$ctrl.renewVideo()">\n        <f-icon class="fa-video-camera"></f-icon>\n        <span ng-if="$ctrl.hasNoLicense()">\n            {{::\'How to Purchase\' | lang}}\n        </span>\n        <span ng-if="$ctrl.hasExpiringLicense()">\n            {{::\'How to Renew\' | lang}}\n        </span>\n        <span ng-if="$ctrl.hasUpgradeableLicense()">\n            {{::\'How to Upgrade\' | lang}}\n        </span>\n    </div>\n    <div ng-if="!$ctrl.hideRegistration" f-menu-item-button click="$ctrl.enterLicense()">\n        <f-icon class="fa-pencil"></f-icon>\n        <span ng-if="!$ctrl.isVdom">{{::\'Enter Registration Code\' | lang}}</span>\n        <span ng-if="$ctrl.isVdom">{{::\'Enter License Key\' | lang}}</span>\n    </div>\n</div>\n')}]),module.exports=path},1738:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(48),__webpack_require__(10),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(d3,$,inject){var VULNERABILITY_LEVELS=["critical","high","medium","low"];function VulnerabilitySummaryWidget($scope,state,vulnerabilitySummaryData){var timeframeOptions=state.getFortiViewTimeframeOptions(),timePeriod=this.timePeriod=timeframeOptions[timeframeOptions.length-1];this.loading=!0,vulnerabilitySummaryData.getHostScanSummary(timePeriod).then(function(results){results.vulnerabilityCategories=Object.keys(results.vulncat),this.vulnerabilitySummaryData=results,results.vulnerable||(this.additionalInfo=results.secured?"No Vulnerabilities Detected.":"To scan endpoints for vulnerabilities FortiClient must be enabled."),this.loading=!1}.bind(this))}function VulnerabilitySummaryVisualization($scope,$element,injector){injector.injectMarked(this,{$scope:$scope}),$element.addClass("d3-chart");var parent=d3.select($element[0]),svg=this.svg=parent.append("svg");this.g=svg.append("g"),$scope.$watch(function(){return{width:$element.width(),relativeHeight:this.summaryWidget.widgetModel.getRelativeHeight()}}.bind(this),function(result){this.dimensions={width:result.width,height:Math.max(result.relativeHeight*this.systemDashboard.WIDGET_SIZE,100)},this.update(this.data)}.bind(this),!0),$scope.$watch("$ctrl.data",this.update.bind(this))}return VulnerabilitySummaryWidget.prototype.toggleMenu=function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})},VulnerabilitySummaryVisualization.prototype.update=inject.mark(function(lang){return function(summaryData){if(!summaryData||!summaryData.severity)return;var visibleLevels=VULNERABILITY_LEVELS.filter(function(type){return summaryData.severity[type]}),levelCounts=visibleLevels.map(function(type){return summaryData.severity[type]}),minDimension=Math.min(this.dimensions.width/visibleLevels.length,this.dimensions.height-60);this.svg.style("height",minDimension+"px"),this.g.attr("transform","translate("+this.dimensions.width/2+","+minDimension/2+")");var customLabel,circleRadius=minDimension/2-5,haveSpaceForLabels=2*circleRadius>100;visibleLevels.length||(levelCounts=[summaryData.secured],visibleLevels=summaryData.secured?["none"]:["nothing-to-show"],customLabel="scanned");const updateLevelLabel=selection=>{selection.attr("dy",circleRadius/2).style("fill","nothing-to-show"===visibleLevels[0]?"black":"white").text((d,i)=>haveSpaceForLabels?lang(customLabel||visibleLevels[i]):"")},updateLevelCount=selection=>{selection.style("font-size",.75*circleRadius).style("fill","nothing-to-show"===visibleLevels[0]?"black":"white").text((d,i)=>levelCounts[i])},updateCircleOutline=selection=>{selection.attr("r",circleRadius).attr("class",(d,i)=>"outline severity-"+visibleLevels[i])},updateCircleInner=selection=>{selection.attr("r",circleRadius-.085*circleRadius*.5-1).attr("class",(d,i)=>"inner severity-"+visibleLevels[i]).style("stroke-width",.085*circleRadius)},transformCircle=selection=>{selection.attr("transform",function(d,i){var radiusWithMargin=circleRadius+5;return"translate("+[2*radiusWithMargin*(i-visibleLevels.length/2)+radiusWithMargin,0]+")"})};var groups=this.g.selectAll("g").data(levelCounts,(d,i)=>customLabel||visibleLevels[i]);groups.exit().remove();var newGroups=groups.enter().append("g").call(transformCircle);newGroups.append("circle").attr("class","outline").call(updateCircleOutline),newGroups.append("circle").attr("class","inner").style("stroke","white").call(updateCircleInner),newGroups.append("text").classed("level-count",!0).attr("text-anchor","middle").attr("dominant-baseline","middle").call(updateLevelCount),newGroups.append("text").classed("level-label",!0).attr("dy",circleRadius).attr("text-anchor","middle").attr("dominant-baseline","middle").call(updateLevelLabel),groups.call(transformCircle),groups.select("circle.inner").call(updateCircleInner),groups.select("circle.outline").call(updateCircleOutline),groups.select("text.level-label").call(updateLevelLabel),groups.select("text.level-count").call(updateLevelCount)}}),function(providers){providers.$compile.component("fortiviewVulnerabilitySummaryVisualization",{controller:VulnerabilitySummaryVisualization,bindings:{data:"="},require:{summaryWidget:"^fVulnerabilitySummaryWidget",systemDashboard:"^fSystemDashboard"}}),providers.$compile.component("fVulnerabilitySummaryWidget",{templateUrl:__webpack_require__(1739),controller:VulnerabilitySummaryWidget,bindings:{widgetModel:"<"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1739:function(module,exports){var path="/migadmin/ng/system/dashboard/f-vulnerability-summary-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel" loading="$ctrl.loading">\n    <widget-title>\n        {{::\'dashboard_widget_type::vulnerability-summary\' | lang}}\n    </widget-title>\n    <widget-content f-tip-target class="tooltip-hint">\n        <fortiview-vulnerability-summary-visualization data="$ctrl.vulnerabilitySummaryData"\n            class="flex-column-centered">\n            <div style="order: 2;" class="flex-row flex-wrap">\n                <div class="categoryItem" ng-repeat="category in $ctrl.vulnerabilitySummaryData.vulnerabilityCategories"><h2>{{ $ctrl.vulnerabilitySummaryData.vulncat[category] || 0 }}</h2>{{ category | lang }}</div>\n            </div>\n        </fortiview-vulnerability-summary-visualization>\n        <div f-tip ng-if="$ctrl.additionalInfo">\n            <span>{{$ctrl.additionalInfo | lang}}</span>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n\n\x3c!-- TODO add link to endpoint Device detached dashboard--\x3e\n')}]),module.exports=path},1740:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(48),__webpack_require__(10),__webpack_require__(8),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(d3,$,ftnt_shared,inject){var HOST_STATUS_CLASS=["severity-critical","severity-none","severity-medium"],HOST_STATUS_LANG=["Vulnerable","Secured","Unscanned"],HOST_STATUS_TYPES=["vulnerable","secured","unscanned"];function HostScanSummaryWidget($scope,vulnerabilitySummaryData,injector){injector.injectMarked(this,{$scope:$scope}),this.hostScanSummaryData={vulnerable:0,secured:0,unscanned:0},this.timePeriod="realtime",this.loading=!0,vulnerabilitySummaryData.getHostScanSummary().then(function(result){this.hostScanSummaryData=result,this.loading=!1}.bind(this))}HostScanSummaryWidget.prototype.toggleMenu=function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})};function FortiviewHostScanSummaryVisualization($scope,$element,lang,injector){injector.injectMarked(this,{$scope:$scope});var parent=d3.select($element[0]),svg=this.svg=parent.append("svg").append("g");svg.append("text").classed("host-count",!0).attr("text-anchor","middle").attr("dominant-baseline","middle").style("font-size","4.8em"),svg.append("text").classed("total-hosts-label",!0).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("dy",43).text(lang("Total Hosts").toString()),$scope.$watch(function(){return{width:$element.width(),height:$element.height()}},function(updatedDimensions){this.dimensions=updatedDimensions,this.updateVisualization(this.data)}.bind(this),!0),$scope.$watch("$ctrl.data",this.updateVisualization.bind(this)),this._tooltip=new ftnt_shared.Tooltip({class:"d3-tooltip"})}function midAngle(d){return d.startAngle+(d.endAngle-d.startAngle)/2}return FortiviewHostScanSummaryVisualization.prototype.updateVisualization=function(data){data=data?HOST_STATUS_TYPES.map(function(type){return data[type]}):[],this.svg.attr("transform","translate("+this.dimensions.width/2+","+this.dimensions.height/2+")"),this.circleRadius=Math.min(this.dimensions.width,this.dimensions.height)/2;var innerRadius=.9*this.circleRadius;this._arcShape=d3.arc().innerRadius(.95*innerRadius).outerRadius(innerRadius),this._pieLayout=d3.pie().padAngle(.02),this._outerArc=d3.arc().innerRadius(this.circleRadius-15).outerRadius(this.circleRadius),this.svg.selectAll("text.host-count").style("font-size",Math.max(1,Math.min(4.8,this.dimensions.height/30))+"em").text(data.reduce(function(a,b){return a+b},0)),this.svg.selectAll("text.total-hosts-label").style("display",this.circleRadius>72?"":"none"),this._updatePie(data),this.dimensions.width/2-this.circleRadius-100<0||innerRadius<100?this.svg.selectAll("text.status, polyline").remove():(this._updateLeaderLines(data),this._updateLabels(data))},FortiviewHostScanSummaryVisualization.prototype._updatePie=inject.mark(function(lang){return function(data){var tooltip=this._tooltip,pieData=this._pieLayout(data);0===data.reduce((sum,current)=>sum+current,0)&&(pieData=[{startAngle:0,endAngle:2*Math.PI,class:"empty"}]);var selection=this.svg.selectAll("path").data(pieData);selection.exit().remove(),selection.enter().append("path").merge(selection).attr("d",this._arcShape).attr("class",(d,i)=>d.class||HOST_STATUS_CLASS[i]).each(function(d,i){var $this=$(this);$this.off("mouseleave.tooltip").on("mouseleave.tooltip",tooltip.hide.bind(tooltip)),$this.off("mouseenter.tooltip").on("mouseenter.tooltip",function(event){var $div=$("<div></div>");$div.text(lang(HOST_STATUS_LANG[i])+": "+d.value||0),tooltip.show($div[0],event.pageX,event.pageY)})})}}),FortiviewHostScanSummaryVisualization.prototype._updateLeaderLines=function(data){var lines=this.svg.selectAll("polyline").data(this._pieLayout(data));lines.enter().append("polyline").style("stroke","#505050").style("stroke-width","1px").style("fill","none"),lines.attr("points",function(d){if(0===d.value)return[];var pos=this._outerArc.centroid(d);return pos[0]=this.circleRadius*(midAngle(d)<Math.PI?1:-1),[this._arcShape.centroid(d),this._outerArc.centroid(d),pos]}.bind(this)),lines.exit().remove()},FortiviewHostScanSummaryVisualization.prototype._updateLabels=inject.mark(function(lang){return function(data){var labels=this.svg.selectAll("text.status").data(this._pieLayout(data));labels.enter().append("text").attr("dy",".35em").classed("status",!0),labels.text(function(d,i){return 0===d.value?"":lang(HOST_STATUS_LANG[i])+": "+d.value}),labels.attr("transform",function(d){var pos=this._outerArc.centroid(d);return pos[0]=this.circleRadius*(midAngle(d)<Math.PI?1:-1),"translate("+pos+")"}.bind(this)).style("text-anchor",function(d){return midAngle(d)<Math.PI?"start":"end"})}}),function(providers){providers.$compile.component("fortiviewHostScanSummaryVisualization",{controller:FortiviewHostScanSummaryVisualization,bindings:{data:"="}}),providers.$compile.component("fHostScanSummaryWidget",{templateUrl:__webpack_require__(1741),controller:HostScanSummaryWidget,bindings:{widgetModel:"<"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1741:function(module,exports){var path="/migadmin/ng/system/dashboard/f-host-scan-summary-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel" loading="$ctrl.loading">\n    <widget-title>\n        {{:: \'dashboard_widget_type::host-scan-summary\' | lang }}\n    </widget-title>\n    <widget-content>\n        <fortiview-host-scan-summary-visualization class="full-graph d3-chart menu-toggle-area clickable"\n             ng-click="$ctrl.toggleMenu($ctrl.popUpMenu, $event)" data="$ctrl.hostScanSummaryData" >\n        </fortiview-host-scan-summary-visualization>\n    </widget-content>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu">\n    <div class="menu-item">\n        <a class="button-style" href="/ng/system/dashboard-preview/forticlient">\n            <f-icon class="fa-external-link"></f-icon>\n            <span>{{::\'View FortiClient Monitor\' | lang}}</span>\n        </a>\n    </div>\n\n    <div class="menu-item">\n        <a class="button-style" href="/ng/system/dashboard-preview/device-inventory">\n            <f-icon class="fa-external-link"></f-icon>\n            <span>{{::\'View Device Inventory\' | lang}}</span>\n        </a>\n    </div>\n</div>\n')}]),module.exports=path},1742:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(0)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,BUILD){var PAGE_URLS={fortitoken:{href:"/ng/user/ftoken",vdom:!0},vdom:{href:"/ng/system/vdom"}},STATUSES=BUILD.SYMBOLS,LICENSES=[{key:"forticare",title:"FortiCare Support",hidden:BUILD.PLATFORM.GUI_HIDE_FORTICARE_SUPPORT},{key:"appctrl",title:"Firmware & General Updates"},{key:"ips",title:"ips",requiresFeature:["gui-ips"]},{key:"antivirus",title:"antivirus",requiresFeature:["gui-antivirus"]},{key:"web_filtering",title:"web_filtering",requiresFeature:["gui-webfilter"]},{key:"security_rating",title:"Security Rating",hidden:!BUILD.PLATFORM.HAVE_NODEJS},{key:"outbreak_prevention",title:"Outbreak Prevention",requiresFeature:["gui-antivirus"]},{key:"antispam",title:"email_filtering",requiresFeature:["gui-spamfilter"]},{key:"sdwan_network_monitor",title:"SD-WAN Network Monitor",requiresFeature:["gui-wan-load-balancing"]},{key:"fortiipam_cloud",title:"FortiIPAM"}];function LicenseInformationWidget($scope,injector){injector.injectMarked(this,{$scope:$scope})}return LicenseInformationWidget.prototype.$onInit=inject.mark(function(state){return function(){this.state=state,this.loading=!0,this._watchDimensions(),this._run(),this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.hasSystemWritePermission=state.adminHasWritePermission(state.ACCESS_GROUP.SYSTEM_CFG)}}),LicenseInformationWidget.prototype._setVisibleLicenses=inject.mark(function(state){return function(){var i,license,shouldInclude,visible=[],count=0,allowed=Math.max(5*Math.floor(this.width),Math.floor(5*this.height));const fortigateState=this.fortigate&&this.fortigate.state||state;for(i=0;i<LICENSES.length&&!(count>=allowed);i++)(shouldInclude=!(license=LICENSES[i]).hidden)&&Array.isArray(license.requiresFeature)&&(shouldInclude=license.requiresFeature.some(feature=>fortigateState.featureEnabledInAnyVDOM(feature))),shouldInclude&&(visible.push(license),count++);this.visibleLicenses=visible}}),LicenseInformationWidget.prototype._watchDimensions=inject.mark(function($scope){return function(){$scope.$watchGroup(["$ctrl.widgetModel.getRelativeWidth()","$ctrl.widgetModel.getRelativeHeight()"],([newWidth,newHeight])=>{this.width=newWidth,this.height=newHeight,this.loading||this._setVisibleLicenses()})}}),LicenseInformationWidget.prototype._deregisterListeners=function(){this._broadcastListeners&&this._broadcastListeners.forEach(listener=>listener())},LicenseInformationWidget.prototype._run=inject.mark(function($scope,$q,notificationRequests,csfTopology){return async function(){var promise=$q.resolve();const callback=({license:license,fortitoken:fortitoken})=>{this.licenses=Object.assign({},license,{fortitoken:fortitoken}),this._processLicenses(this.licenses),this.loading=!1,this._setVisibleLicenses()};await csfTopology.buildIfNecessary(),promise.then(()=>{const watch=fortigate=>{this.fortigate=fortigate,$q.when(notificationRequests.watchMultiple({scope:$scope,requestTypes:["license","fortitoken"],callback:callback,fortigate:fortigate,immediate:!0})).then(listeners=>this._broadcastListeners=listeners)};watch(this.dashboard.getChosenFortigate(this.modelData)),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,(newValue,oldValue)=>{newValue&&newValue!==oldValue&&(this.loading=!0,this._deregisterListeners(),watch(newValue))})})}}),LicenseInformationWidget.prototype._processLicenses=function(licenses){var license,LICENSE_WITH_USAGE=["vdom","fortitoken"];Object.keys(licenses).forEach(function(key){(license=licenses[key])&&LICENSE_WITH_USAGE.indexOf(key)>=0&&0!==license.max&&(license.percentage=license.used/license.max*100,license.subTitle=license.used+" / "+license.max)})},LicenseInformationWidget.prototype.showSystemFortiGuard=inject.mark(function($location){return function(){$location.path("/system/fortiguard")}}),LicenseInformationWidget.prototype.toggleMenu=inject.mark(function(){return function(event,menuKey){this.popUpMenu[menuKey].toggle({top:event.clientY,left:event.clientX})}}),LicenseInformationWidget.prototype.redirectTo=inject.mark(function($location,structure,state){return function(destination,vdom){var uri=structure.ngURI(PAGE_URLS[destination].href);PAGE_URLS[destination].vdom&&state.vdom_mode?$location.path(uri).search("vdom",vdom||state.management_vdom):$location.path(uri)}}),LicenseInformationWidget.prototype.isCriticalStatus=function(){if(this.licenses){var forticareLicense=this.licenses.forticare;if(forticareLicense)return forticareLicense.status===STATUSES.LICENSE_STATUS_NOT_REGISTERED}return!1},LicenseInformationWidget.prototype.isCurrentFortigate=function(){return!this.fortigate||this.fortigate.isCurrent},function(providers,loaderProvider){return providers.$compile.component("fLicenseInformationWidget",{templateUrl:__webpack_require__(1743),controller:LicenseInformationWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}}),loaderProvider.initModules([__webpack_require__(1744),__webpack_require__(532),__webpack_require__(533),__webpack_require__(531)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1743:function(module,exports){var path="/migadmin/ng/system/dashboard/f-license-information-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)"\n    ng-class="{\'critical\': $ctrl.isCriticalStatus()}">\n    <widget-title>\n        <div class="flex-row-centered">\n            {{::\'Licenses\' | lang}}\n            <f-license-update-server widget-model="::$ctrl.widgetModel">\n            </f-license-update-server>\n            <div class="flex-grow title-help-container">\n                <f-icon class="fa-help-info" f-tip>\n                    {{::\'Increase/decrease widget size to show more/less licenses\' | lang}}\n                </f-icon>\n            </div>\n        </div>\n    </widget-title>\n    <extra-controls>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div ng-if="!$ctrl.loading">\n            <div class="license-container" f-equal-width>\n                <f-license-license-item ng-repeat="license in $ctrl.visibleLicenses"\n                    license="$ctrl.licenses[license.key]"\n                    item-title="::license.title"\n                    is-forticare="::license.key === \'forticare\'"\n                    fortigate="$ctrl.fortigate">\n                </f-license-license-item>\n            </div>\n\n            <div class="service-container">\n                <f-license-service-item license="$ctrl.licenses.vdom"\n                    item-title="::\'VDOM\'"\n                    ng-click="$ctrl.toggleMenu($event, \'vdom\')"\n                    ng-if="$ctrl.fortigate.state.vdom_mode">\n                </f-license-service-item>\n                <f-license-service-item license="$ctrl.licenses.fortitoken"\n                    item-title="::\'fortitoken\'"\n                    ng-click="$ctrl.isCurrentFortigate() && $ctrl.toggleMenu($event, \'fortitoken\')">\n                </f-license-service-item>\n            </div>\n\n            <div f-pop-up-menu="$ctrl.popUpMenu.vdom">\n                <f-license-renew-options license="$ctrl.licenses.vdom" is-vdom="::true" fortigate="$ctrl.fortigate">\n                </f-license-renew-options>\n                <div f-menu-item-button click="$ctrl.showSystemFortiGuard()">\n                    <f-icon class="fa-external-link"></f-icon>\n                    <span>{{::\'View details in System > FortiGuard\' | lang}}</span>\n                </div>\n                <div f-menu-item-button click="$ctrl.redirectTo(\'vdom\')">\n                    <f-icon class="fa-external-link"></f-icon>\n                    <span>{{:: \'View in System > VDOM\' | lang }}</span>\n                </div>\n            </div>\n\n            <div f-pop-up-menu="$ctrl.popUpMenu.fortitoken">\n                <div f-menu-item-submenu="fortitokenPopUpMenu"\n                     ng-if="$ctrl.state.vdom_mode">\n                    <f-icon class="fa-external-link"></f-icon>\n                    <span>{{:: \'View in FortiTokens\' | lang }}</span>\n                </div>\n                <div f-menu-item-button click="$ctrl.redirectTo(\'fortitoken\')"\n                     ng-if="!$ctrl.state.vdom_mode">\n                    <f-icon class="fa-external-link"></f-icon>\n                    <span>{{:: \'View in FortiTokens\' | lang }}</span>\n                </div>\n            </div>\n            <div f-pop-up-menu="fortitokenPopUpMenu">\n                <div f-menu-item-button\n                    ng-repeat="vdom in $ctrl.licenses.fortitoken.vdoms"\n                    click="$ctrl.redirectTo(\'fortitoken\', vdom.name)">\n                    <f-object-formatted mkey="{{::vdom.name}}" datasource="availableVdoms">\n                    </f-object-formatted>\n                 </div>\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n\n')}]),module.exports=path},1744:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function LicenseUpdateServer(injector,state,$scope){injector.injectMarked(this,{$scope:$scope}),this.fgdIPLoading=!0}return LicenseUpdateServer.prototype.$onInit=inject.mark(function($scope,notificationRequests){return function(){notificationRequests.watch({scope:$scope,requestType:"license",callback:license=>{this.fortiguard=license.fortiguard;var fgdIP=this.fortiguard&&this.fortiguard.server_address&&function(ip){return ip.replace(/(:\d*)$/,"")}(this.fortiguard.server_address);fgdIP&&fgdIP!==this.fgdIP&&(this.fgdIPLoading=!0,this.fgdIP=fgdIP,this._getFGDLocation(this.fgdIP).finally(function(){this.fgdIPLoading=!1}.bind(this)))},immediate:!0})}}),LicenseUpdateServer.prototype._getFGDLocation=inject.mark(function(widgetShared){return function(fgdIP){return widgetShared.getIPLocation(fgdIP).then(function(location){this.fgdCountryISOCode=location.countryISOCode,this.fgdLocation=location.location}.bind(this))}}),function(providers){return providers.$compile.component("fLicenseUpdateServer",{bindings:{widgetModel:"<"},controller:LicenseUpdateServer,templateUrl:__webpack_require__(1745)})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1745:function(module,exports){var path="/migadmin/ng/system/dashboard/f-license-update-server.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<span ng-if="$ctrl.fortiguard.server_address">\n    <span ng-if="$ctrl.fgdIPLoading">\n        <f-icon class="fa-loading"></f-icon>\n    </span>\n    <span f-tip-target ng-if="!$ctrl.fgdIPLoading">\n        &nbsp;\n        <span>(</span>\n        <span ng-if="$ctrl.widgetModel.getRelativeWidth() >= 2">\n            {{:: \'Update Server\' | lang }}\n            :&nbsp;\n        </span>\n        <span class="tooltip-hint">\n            <span ng-if="$ctrl.fgdCountryISOCode"\n                  class="country_flag country_{{ $ctrl.fgdCountryISOCode }}"></span>\n            <span>{{ $ctrl.fgdIP }}</span>\n        </span>\n        <span>)</span>\n        <div f-tip>\n            <table class="table key-value slightly-condensed">\n                <tbody>\n                    <tr>\n                        <td>{{:: \'Update Server\' | lang }}</td>\n                        <td>\n                            <span ng-if="$ctrl.fgdCountryISOCode"\n                                  class="country_flag country_{{ $ctrl.fgdCountryISOCode }}"></span>\n                            <span>{{ $ctrl.fgdIP }}</span>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.fgdLocation">\n                        <td>{{:: \'location\' | lang }}</td>\n                        <td>\n                            <span>{{ $ctrl.fgdLocation }}</span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </span>\n</span>\n')}]),module.exports=path},1746:function(module,exports){var path="/migadmin/ng/system/dashboard/f-license-license-item.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div f-tip-target ng-click="$ctrl.showMenu($event)">\n    <div class="clickable severity-message" f-equal-width-item ng-class="$ctrl.getSeverityLevel()">\n        <f-icon class="{{ $ctrl.getStatusIcon() }}"></f-icon>\n        <span class="tooltip-hint">{{:: $ctrl.title | lang:$ctrl.titleParams || []}}</span>\n    </div>\n    <div f-tip>\n        <table class="table key-value">\n            <tbody>\n                <tr>\n                    <td>{{:: \'Status\' | lang }}</td>\n                    <td>\n                        <f-icon class="{{$ctrl.getStatusIcon($ctrl.license.status)}}"></f-icon>\n                        <span>{{$ctrl.STATUS_BASE_LANG_KEY + $ctrl.license.status | lang}}</span>\n                    </td>\n                </tr>\n                <tr ng-if="$ctrl.license.expires">\n                    <td>{{$ctrl.getExpiresLabel()}}</td>\n                    <td>{{$ctrl.formatExpiryDate($ctrl.license.expires)}}</td>\n                </tr>\n                <tr ng-if="$ctrl.isForticare && $ctrl.license.account != null">\n                    <td>{{:: \'FortiCloud Account\' | lang }}</td>\n                    <td>{{ $ctrl.license.account }}</td>\n                </tr>\n                <tr ng-if="$ctrl.isForticare && $ctrl.license.account != null && $ctrl.license.company">\n                    <td>{{:: \'company\' | lang }}</td>\n                    <td>{{ $ctrl.license.company }}</td>\n                </tr>\n                <tr ng-if="$ctrl.isForticare && $ctrl.license.account != null && $ctrl.license.industry">\n                    <td>{{:: \'Industry\' | lang }}</td>\n                    <td>{{ $ctrl.translatedFortiCareIndustry() }}</td>\n                </tr>\n                <tr ng-if="$ctrl.isForticare" ng-repeat="(key, support) in $ctrl.license.support">\n                    <td>{{::$ctrl.getSupportLangKey(key) | lang}}</td>\n                    <td>\n                        <f-icon class="{{$ctrl.getStatusIcon(support.status)}}"></f-icon>\n                        <span>{{:: support.support_level | langPrefixed:\'forticare_support_level::\' }}</span>\n                        <span ng-if="support.expires">\n                            - {{$ctrl.formatExpiresLabel(support.status, support.expires)}}\n                        </span>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n<div f-pop-up-menu="$ctrl.menu">\n    <div class="menu-item" ng-if="$ctrl.isForticare &&\n        $ctrl.license.status === $ctrl.SYMBOLS.LICENSE_STATUS_REGISTERED">\n        <a class="button-style"\n            f-fortiguard-link="SUPPORT"\n            link-path="$ctrl.getFortiCarePortalPath()">\n            <f-icon class="fa-external-link"></f-icon>\n            <span>{{::\'Login to My Account\' | lang}}</span>\n        </a>\n    </div>\n    <div f-menu-item-button ng-if="$ctrl.isForticare &&\n        $ctrl.license.status === $ctrl.SYMBOLS.LICENSE_STATUS_NOT_REGISTERED &&\n        $ctrl.license.registration_supported"\n        click="$ctrl.registerFortiCare()"\n        enabled="$ctrl.hasSystemWritePermission">\n        <f-icon class="fa-sign-in"></f-icon>\n        <span>{{::\'Register\' | lang}}</span>\n    </div>\n    <div class="menu-item" ng-if="$ctrl.isForticare &&\n        $ctrl.license.status === $ctrl.SYMBOLS.LICENSE_STATUS_NOT_REGISTERED &&\n        !$ctrl.license.registration_supported">\n        <a class="button-style"\n            f-fortiguard-link="SUPPORT">\n            <f-icon class="fa-external-link"></f-icon>\n            <span>{{::\'Register Online\' | lang}}</span>\n        </a>\n    </div>\n    <f-license-renew-options license="$ctrl.license" fortigate="$ctrl.fortigate">\n    </f-license-renew-options>\n    <div f-menu-item-button ng-if="!$ctrl.license.status.includes(\'vm\')"\n        click="$ctrl.showSystemFortiGuard()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'View details in System > FortiGuard\' | lang}}</span>\n    </div>\n    <div ng-if="::$ctrl.isSuperAdmin">\n        <div f-menu-item-button ng-if="$ctrl.isForticare &&\n            $ctrl.license.status === $ctrl.SYMBOLS.LICENSE_STATUS_REGISTERED"\n            click="$ctrl.changeFortiCloudAccounts()">\n            <f-icon class="fa-sign-in"></f-icon>\n            <span>{{::\'FortinetService::type.forticloud_account_title_transfer\' | lang}}</span>\n        </div>\n    </div>\n</div>\n')}]),module.exports=path},1747:function(module,exports){var path="/migadmin/ng/system/dashboard/f-license-service-item.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="service-item severity-message clickable"\n     ng-class="$ctrl.getSeverityLevel()"\n    f-tip-target>\n    <div class="service-title">\n        <span ng-class="{\'tooltip-hint\': $ctrl.hasTooltip}">\n            {{:: $ctrl.title | lang }}\n        </span>\n        <span ng-if="$ctrl.license.max !== 0">\n            {{ $ctrl.license.subTitle }}\n        </span>\n        <span ng-if="$ctrl.license.max === 0">\n            0 / 0\n        </span>\n    </div>\n    <div class="service-detail">\n        <div ng-if="!$ctrl.useProgressBar">\n            <div ng-if="$ctrl.license.max > 0">\n                <div f-resource-bar="$ctrl.license.percentage"\n                    show-percentage="::true">\n                </div>\n            </div>\n            <div ng-if="$ctrl.license.max === 0">\n                <div f-resource-bar="::0"\n                    show-percentage="::true">\n                </div>\n            </div>\n        </div>\n        <div ng-if="$ctrl.useProgressBar">\n            <div ng-if="$ctrl.license.max > 0">\n                <div f-progress-bar="$ctrl.license.percentage"\n                    show-percentage="::true">\n                </div>\n            </div>\n            <div ng-if="$ctrl.license.max === 0">\n                <div f-progress-bar="::0"\n                    show-percentage="::true">\n                </div>\n            </div>\n        </div>\n    </div>\n    <div f-tip\n         ng-if="$ctrl.hasTooltip">\n        <table class="table key-value">\n            <tbody>\n                <tr ng-show="$ctrl.license.status">\n                    <td>{{:: \'Status\' | lang }}</td>\n                    <td>\n                        <f-icon class="{{$ctrl.getLicenseStatusIcon()}}"></f-icon>\n                        <span>{{ $ctrl.STATUS_BASE_LANG_KEY + $ctrl.license.status | lang }}</span>\n                    </td>\n                </tr>\n                <tr ng-show="$ctrl.license.expires">\n                    <td>{{$ctrl.getExpiresLabel()}}</td>\n                    <td>{{$ctrl.formatExpiryDate($ctrl.license.expires)}}</td>\n                </tr>\n                <tr ng-repeat="tooltip in $ctrl.extraTooltips">\n                    <td>{{ tooltip.key }}</td>\n                    <td>{{ tooltip.value }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n')}]),module.exports=path},1748:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function LogRateWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.loading=!0}return LogRateWidget.prototype.title="Log Rate",LogRateWidget.prototype.AVAILABLE_LOG_SOURCES=[{selector:"disk_lograte",label:"disk",color:Chart.prototype.COLORS.DEEP_PURPLE},{selector:"faz_lograte",label:"faz",color:Chart.prototype.COLORS.AMBER},{selector:"forticloud_lograte",label:"FortiGate Cloud",color:Chart.prototype.COLORS.RED}],LogRateWidget.prototype.$onInit=inject.mark(function($q,$http,state,systemResourceUsage,csfTopology,$scope){return async function(){await csfTopology.buildIfNecessary(),this.state=state,this.systemResourceUsage=systemResourceUsage,this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.timeOptions=systemResourceUsage.getTimeOptions(),this.currentTimeOption=systemResourceUsage.getTimeOptionForWidget("log-rate"),this.dashboardCsf||systemResourceUsage.registerWatch($scope.$id,this.fortigate),this._setupWatches()}}),LogRateWidget.prototype._setupWatches=inject.mark(function($scope,csfTopology){return function(){$scope.$watchGroup(this.AVAILABLE_LOG_SOURCES.map(function(source){return`$ctrl.systemResourceUsage.getResource('${source.selector}',\n                        $ctrl.fortigate)`}),logRates=>{logRates.every(function(logRate){return logRate&&logRate.length})&&(this.loading=!1,this.logRates={},this.AVAILABLE_LOG_SOURCES.forEach((logSource,logSourceIndex)=>{this.logRates[logSource.selector]=logRates[logSourceIndex]}),this._plot())}),$scope.$watch("$ctrl.widgetModel.getRelativeWidth()",(curr,prev)=>{curr!==prev&&this._plot(),this.largeLegend=Math.round(curr)<=1}),$scope.$on("$destroy",()=>{this.systemResourceUsage.unRegisterWatch($scope.$id)}),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,newVal=>{newVal&&(this.systemResourceUsage.registerWatch($scope.$id,newVal),this.loading=!0,this.fortigate=newVal)})}}),LogRateWidget.prototype._plot=inject.mark(function($filter,lang,systemResourceUsage){const dateFilter=$filter("fDateTime");return function(){let logRateHistory;const data=this.data=this.AVAILABLE_LOG_SOURCES.map(logSource=>{const logSourceData=this.logRates[logSource.selector][0].historical[this.currentTimeOption.option];return logRateHistory=logRateHistory||logSourceData,{label:lang(logSource.label).toString(),color:logSource.color,data:logSourceData.values,currentValue:this.logRates[logSource.selector][0].current}}).filter(function(logPlotData){return logPlotData.data.some(function(valueArr){return valueArr[1]>0})});this.noLogSource=0===data.length,this.singleLogSource=1===data.length,this.lineChartConfig=!this.noLogSource&&{data:data,options:{xaxis:systemResourceUsage.plotFormatters.xAxisConfig(this.widgetModel,logRateHistory.start,logRateHistory.end,"1-min"!==this.currentTimeOption.option),yaxis:{tickFormatter:function(value){return lang("{0}/s",[value]).toString()},min:0,tickDecimals:0},series:{lines:{show:!0,fill:!!this.singleLogSource},stack:!1},legend:{show:!1}},tooltips:!0,tooltip_formatter:function(label,x,y){return label+" - "+dateFilter(x,{skipProcessing:!0})+": "+lang("{0}/s",[y]).toString()}}}}),LogRateWidget.prototype.setTimeOption=inject.mark(function(systemResourceUsage){return function(timeOption){this.currentTimeOption=timeOption,systemResourceUsage.saveOptionForWidget("log-rate",timeOption,"TIME"),this._plot()}}),LogRateWidget.prototype.toggleMenu=function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})},LogRateWidget.prototype.configureLogSettings=inject.mark(function($location){return function(vdom){$location.path("/log/settings").search({vdom:vdom})}}),function(providers){providers.$compile.component("fLogRateWidget",{templateUrl:__webpack_require__(1749),controller:LogRateWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1749:function(module,exports){var path="/migadmin/ng/system/dashboard/f-log-rate-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel"\n    min-column-span="::2" loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>{{ $ctrl.title | lang }}</widget-title>\n    <extra-controls ng-if="!$ctrl.logRateDisabled && !$ctrl.loading">\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu">\n            {{ \'time_period::\' + $ctrl.currentTimeOption.name | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.timeOptionsMenu">\n            <div f-menu-item-button ng-repeat="timeOption in $ctrl.timeOptions"\n                 selected="$ctrl.currentTimeOption === timeOption"\n                 ng-click="$ctrl.setTimeOption(timeOption)">\n                <span>{{ \'time_period::\' + timeOption.name | lang }}</span>\n            </div>\n        </div>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div ng-if="!$ctrl.noLogSource" class="menu-toggle-area clickable"\n             ng-click="!$ctrl.noLogSource && $ctrl.toggleMenu($ctrl.popUpMenu, $event)">\n            <div f-chart="$ctrl.lineChartConfig"\n                 ng-if="!$ctrl.noLogSource && $ctrl.lineChartConfig"\n                 class="full-graph with-current-stat"\n                 ng-class="{ \'large-legend\': $ctrl.largeLegend && $ctrl.LOG_SOURCES.length >= 3 }"></div>\n            <div ng-if="!$ctrl.noLogSource" class="current-stat"\n                 ng-class="{ \'large-legend\': $ctrl.largeLegend && $ctrl.LOG_SOURCES.length >= 3 }">\n                <div ng-repeat="source in $ctrl.data" class="current-stat-item">\n                    <div class="chart-legend-item">\n                        <div class="chart-legend-color"\n                            ng-style="::{\'background-color\': source.color}"></div>\n                    </div>\n                    <span class="light-text">{{:: source.label | lang }}</span>\n                    <span class="current-stat-value">\n                        {{ \'{0}/s\' | lang:[source.currentValue] }}\n                    </span>\n                </div>\n            </div>\n        </div>\n        <div ng-if="$ctrl.noLogSource"\n             class="menu-toggle-area full-dimension-widget flex-centered"\n             ng-click="$ctrl.toggleMenu($ctrl.popUpMenu, $event)">\n            <span>{{:: \'no_data\' | lang}}</span>\n            <f-icon class="fa-help-info icon-lg" f-tip\n                    title="{{:: \'No log data available. Check the log settings.\' | lang}}">\n            </f-icon>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu">\n    <div f-menu-item-button click="$ctrl.configureLogSettings()"\n         ng-if="!$ctrl.state.vdom_mode">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{:: \'Configure settings in Log & Report > Log Settings\' | lang }}</span>\n    </div>\n    <div f-menu-item-submenu="$ctrl.diskLoggingPopUpMenu" ng-if="$ctrl.state.vdom_mode">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{:: \'Configure settings in Log & Report > Log Settings\' | lang }}</span>\n    </div>\n</div>\n<div f-pop-up-menu="$ctrl.diskLoggingPopUpMenu" ng-if="$ctrl.state.vdom_mode">\n    <div f-menu-item-button\n         ng-repeat="vdom in ::$ctrl.state.admin.vdoms"\n         click="$ctrl.configureLogSettings(vdom)">\n        <span ng-if="::vdom === \'\'">\n            <f-icon class="fa-globe"></f-icon>\n            <span>{{ ::\'global\' | lang }}</span>\n        </span>\n        <span ng-if="::vdom !== \'\'">\n            <f-object-formatted mkey="{{::vdom}}" datasource="availableVdoms">\n            </f-object-formatted>\n        </span>\n     </div>\n</div>\n')}]),module.exports=path},1750:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function MemUsageWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.resource="mem",this.loading=!0}return MemUsageWidget.prototype={COLOR:Chart.prototype.COLORS.ORANGE,$onInit:inject.mark(function($scope,systemResourceUsage,csfTopology){return async function(){await csfTopology.buildIfNecessary(),this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.timeOptions=systemResourceUsage.getTimeOptions(),this.currentTimeOption=systemResourceUsage.getTimeOptionForWidget("memory-usage"),this.dashboardCsf||systemResourceUsage.registerWatch($scope.$id,this.fortigate),$scope.$watch(()=>systemResourceUsage.getResource(this.resource,this.fortigate),memUsage=>{memUsage&&memUsage.length&&(this.loading=!1,this.memUsage=memUsage,this.currentUsage=memUsage[0].current,this._plot())}),$scope.$watch("$ctrl.widgetModel.getRelativeWidth()",(curr,prev)=>{curr!==prev&&this._plot()}),$scope.$on("$destroy",function(){systemResourceUsage.unRegisterWatch($scope.$id)}),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,newVal=>{newVal&&(systemResourceUsage.registerWatch($scope.$id,newVal),this.loading=!0,this.fortigate=newVal)})}}),_plot:inject.mark(function($filter,systemResourceUsage){const dateFilter=$filter("fDateTime");return function(){const memUsageDataEntry=this.memUsage[0].historical[this.currentTimeOption.option],data=[{data:memUsageDataEntry.values,color:this.COLOR}];this.stackedAreaChartConfig={data:data,options:{xaxis:systemResourceUsage.plotFormatters.xAxisConfig(this.widgetModel,memUsageDataEntry.start,memUsageDataEntry.end,"1-min"!==this.currentTimeOption.option),yaxis:{min:0,max:100,tickFormatter:function(value){return value+"%"}},series:{lines:{fill:!0},stack:!0},legend:{show:!1}},tooltips:!0,tooltip_formatter:function(label,x,y){return dateFilter(x,{skipProcessing:!0})+": "+y+"%"}}}}),setTimeOption:inject.mark(function(systemResourceUsage){return function(timeOption){this.currentTimeOption=timeOption,systemResourceUsage.saveOptionForWidget("memory-usage",timeOption,"TIME"),this._plot()}})},function(providers){providers.$compile.component("fMemUsageWidget",{templateUrl:__webpack_require__(1751),controller:MemUsageWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1751:function(module,exports){var path="/migadmin/ng/system/dashboard/f-mem-usage-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{::\'memory\' | lang}}\n    </widget-title>\n    <extra-controls ng-if="!$ctrl.loading">\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu">\n            {{ \'time_period::\' + $ctrl.currentTimeOption.name | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.timeOptionsMenu">\n            <div f-menu-item-button ng-repeat="timeOption in $ctrl.timeOptions"\n                 selected="$ctrl.currentTimeOption === timeOption"\n                 ng-click="$ctrl.setTimeOption(timeOption)">\n                <span>{{ \'time_period::\' + timeOption.name | lang }}</span>\n            </div>\n        </div>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div f-chart="$ctrl.stackedAreaChartConfig" class="full-graph with-current-stat"></div>\n        <div class="current-stat">\n            <div class="current-stat-item">\n                <span class="light-text">{{:: \'Current usage\' | lang }}</span>\n                <span class="current-stat-value">{{ $ctrl.currentUsage + \'%\' }}</span>\n            </div>\n        </div>\n    </widget-content>\n    <widget-absolute>\n        <span ng-if="$ctrl.currentUsage >= 90" class="severity-message severity-high large pinned-message">\n            <f-icon class="fa-severity-high"></f-icon>\n            <span>{{:: \'High memory usage\' | lang }}</span>\n        </span>\n    </widget-absolute>\n</f-dashboard-widget>\n')}]),module.exports=path},1752:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,ftnt_shared){const STR_SECURITY_FABRIC="Security Fabric";function SecurityFabricWidget($scope,injector,lang){injector.injectMarked(this,{$scope:$scope}),this.loading=!0,this.extensionsLoading=!0,this.title=lang(STR_SECURITY_FABRIC).toString(),this.csfEnabled=!0,this._init().then(()=>{this.loading=!1})}return SecurityFabricWidget.prototype._init=inject.mark(function(csfTopology,lang,$scope,$timeout,state){return function(){var flags=csfTopology.BUILD_TYPES.WITH_EXTENSION_DEVICES;return csfTopology.build(flags).then(function(){var groupName=csfTopology.groupName;groupName&&(this.title=lang("Security Fabric: {NAME}",[groupName]).toString()),this.buildCsfSource(),this.csfEnabled=csfTopology.csfEnabled,this.csfEnabled&&csfTopology.thisFortigate.isRoot&&state.csfObjectSyncEnabled()&&(this.pollCSF(),$scope.$on("$destroy",()=>{$timeout.cancel(this.pollCSFTimeout)}))}.bind(this))}}),SecurityFabricWidget.prototype.buildCsfSource=inject.mark(function($q,csfTopology,topologyVisualizationState){return async function(){let blockCutTreeNodes=Object.keys(csfTopology.blockCutTreeMap).map(function(id){return csfTopology.blockCutTreeMap[id].node}).filter(function(csfInstance){return"csfPendingDevices"!==csfInstance.sourceID&&"csfPreauthorizedDevices"!==csfInstance.sourceID}).sort(csfTopology.csfInstancesSort).map(function(csfInstance){return{instance:csfInstance,id:csfInstance.id,parentId:csfInstance.bcTreeParentId}});const filter=topologyVisualizationState.filter;let filteredTreeNodes=[],parentIdReplacementMap={};blockCutTreeNodes.forEach(node=>{let{instance:instance,id:id,parentId:parentId}=node;!filter.fortiswitch&&function(csfInstance){return"csfFortiSwitches"===csfInstance.sourceID||csfInstance.isFswHa||csfInstance.isFswBlock}(instance)||!filter.fortiap&&function(csfInstance){return"csfFortiAPs"===csfInstance.sourceID}(instance)||!filter.fortinac&&function(csfInstance){return"csfFortiNACs"===csfInstance.sourceID}(instance)?parentIdReplacementMap[id]=parentId:filteredTreeNodes.push(node)}),Object.keys(parentIdReplacementMap).forEach(function resolveParent(key){let parentKey=parentIdReplacementMap[key];if(!parentIdReplacementMap[parentKey])return parentKey;return parentIdReplacementMap[key]=resolveParent(parentKey)}),filteredTreeNodes.forEach(node=>{let replacedParentId=parentIdReplacementMap[node.parentId];replacedParentId&&(node.parentId=replacedParentId)}),this.blockCutTreeNodes=filteredTreeNodes,this.csfDevices=csfTopology.spanningTreeNodes.map(node=>node.node);const detectedDevices=await $q.all(csfTopology.fortigates.map(fortigate=>{const sourceID=fortigate.getOmniselectProxySourceID("devices");return ftnt_shared.Omniselect.getSourceData(sourceID)}));this.detectedDevices=detectedDevices.reduce((prev,devices)=>prev.concat(devices),[])}}),SecurityFabricWidget.prototype.pollCSF=inject.mark($timeout=>(function(){this.checkCSFSyncStatus().then(()=>{this.pollCSFTimeout=$timeout(()=>{this.pollCSF()},5e3)})})),SecurityFabricWidget.prototype.checkCSFSyncStatus=inject.mark(state=>(async function(){const res=await state.buildOutofSyncTables();this.fortigates=res.fortigates,this.tables=res.tables,this.tablesOutofSync=this.fortigates.length})),SecurityFabricWidget.prototype.openFabricSyncWizard=inject.mark((slide,$rootScope,lang,loader)=>(async function(){loader.initModules([__webpack_require__(95)]);const scope=$rootScope.$new();scope.title=lang("Firewall Object Synchronization"),scope.fortigates=this.fortigates,scope.tables=this.tables;var slideParams={template:'<f-sync-fabric-wizard\n                        form-type="formType"\n                        fortigates="fortigates"\n                        tables="tables">\n                    </f-sync-fabric-wizard>',parentScope:scope,options:{title:lang(scope.title),closeOnEscape:!0,fullHeight:!0,width:700}};try{await slide.open("sync-fabric-tables",slideParams)}finally{scope.$destroy()}})),SecurityFabricWidget.prototype.openMenu=function(event,menu){menu.toggle({top:event.clientY,left:event.clientX})},SecurityFabricWidget.prototype.configureFabricSettings=inject.mark(function($location){return function(){$location.path("/fabric-connector/edit/security-fabric-connection")}}),SecurityFabricWidget.prototype.toggleDisplayOptions=inject.mark(function(topologyVisualizationState){return function(key,subKey){let filter;filter="fabricDevice"===key?{[subKey=subKey||"generic-fabric-device"]:!topologyVisualizationState.filter[subKey]}:{[key]:!topologyVisualizationState.filter[key]},topologyVisualizationState.updateParams({filter:filter}),this.buildCsfSource()}}),function(providers,loaderProvider){return providers.$compile.component("fSecurityFabricWidget",{templateUrl:__webpack_require__(1753),controller:SecurityFabricWidget,bindings:{widgetModel:"<"}}),loaderProvider.initModules([__webpack_require__(119),__webpack_require__(322),__webpack_require__(104)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1753:function(module,exports){var path="/migadmin/ng/system/dashboard/f-security-fabric-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading || $ctrl.extensionsLoading">\n    <widget-title>\n        {{$ctrl.title}}\n    </widget-title>\n    <widget-content>\n        <f-csf-extension-devices-info loading="$ctrl.extensionsLoading"\n            csf-devices="$ctrl.csfDevices"\n            detected-devices="$ctrl.detectedDevices"\n            display-options="$ctrl.displayOptions"\n            toggle-display-options-fn="$ctrl.toggleDisplayOptions(key)"\n            display-options-mode="\'widget\'">\n        </f-csf-extension-devices-info>\n        <div class="separator-line"></div>\n        <f-csf-tree-view\n            source="$ctrl.blockCutTreeNodes"\n            with-context-menu="true">\n        </f-csf-tree-view>\n    </widget-content>\n    <widget-absolute>\n        <div ng-if="!$ctrl.csfEnabled">\n            <span class="severity-message severity-high large clickable pinned-message"\n                ng-click="$ctrl.openMenu($event, $ctrl.fabricSettingsPopUpMenu)">\n                <f-icon class="fa-severity-high"></f-icon>\n                <span f-lang="Security Fabric Connection is disabled."></span>\n            </span>\n        </div>\n        <div ng-if="$ctrl.tablesOutofSync">\n            <span class="severity-message severity-high large clickable pinned-message"\n                ng-click="$ctrl.openFabricSyncWizard()">\n                <f-icon class="fa-severity-high"></f-icon>\n                <span f-lang="Firewall objects are not synchronized."></span>\n            </span>\n        </div>\n    </widget-absolute>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.fabricSettingsPopUpMenu">\n    <div f-menu-item-button click="$ctrl.configureFabricSettings()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Configure settings in Security Fabric > Fabric Connectors > {CONNECTOR}\' | lang:[(\'Security Fabric Setup\' | lang)]}}</span>\n    </div>\n</div>\n')}]),module.exports=path},1755:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function SessionRateWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.resource="setuprate",this.loading=!0}return SessionRateWidget.prototype={COLOR:Chart.prototype.COLORS.BLUE_GREY,$onInit:inject.mark(function($scope,systemResourceUsage,csfTopology){return async function(){await csfTopology.buildIfNecessary(),this.ipVersionOptions=systemResourceUsage.getIpVersionOptions(),this.ipVersion=systemResourceUsage.getIpVersionOptionForWidget("session-rate"),this.timeOptions=systemResourceUsage.getTimeOptions(),this.currentTimeOption=systemResourceUsage.getTimeOptionForWidget("session-rate"),this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.dashboardCsf||systemResourceUsage.registerWatch($scope.$id,this.fortigate),$scope.$watch(()=>systemResourceUsage.getResource(this.resource,this.fortigate),sessionRate=>{sessionRate&&sessionRate.length&&(this._refresh(),this.loading=!1)}),$scope.$watch("$ctrl.widgetModel.getRelativeWidth()",(curr,prev)=>{curr!==prev&&this._plot()}),$scope.$on("$destroy",function(){systemResourceUsage.unRegisterWatch($scope.$id)}),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,newVal=>{newVal&&(systemResourceUsage.registerWatch($scope.$id,newVal),this.loading=!0,this.fortigate=newVal)})}}),_refresh:inject.mark(function(systemResourceUsage){return function(){this.currentSessionRate=systemResourceUsage.getResourceData("setuprate","current",this.ipVersion,this.fortigate),this._plot()}}),_plot:inject.mark(function($filter,lang,systemResourceUsage){var dateFilter=$filter("fDateTime");return function(){var sessionRateHistory=systemResourceUsage.getResourceData("setuprate",this.currentTimeOption.option,this.ipVersion,this.fortigate),data=[{data:sessionRateHistory.values,color:this.COLOR}];this.lineChartConfig={data:data,options:{xaxis:systemResourceUsage.plotFormatters.xAxisConfig(this.widgetModel,sessionRateHistory.start,sessionRateHistory.end,"1-min"!==this.currentTimeOption.option),yaxis:{tickFormatter:function(value){return lang("{0}/s",[value]).toString()},min:0,tickDecimals:0},series:{lines:{fill:!0},stack:!0},legend:{show:!1}},tooltips:!0,tooltip_formatter:function(label,x,y){return dateFilter(x,{skipProcessing:!0})+": "+lang("{0}/s",[y]).toString()}}}}),setTimeOption:inject.mark(function(systemResourceUsage){return function(timeOption){this.currentTimeOption=timeOption,systemResourceUsage.saveOptionForWidget("session-rate",timeOption,"TIME"),this._refresh()}}),setIpVersionOption:inject.mark(function(systemResourceUsage){return function(option){this.ipVersion=option,systemResourceUsage.saveOptionForWidget("session-rate",option,"IP_VERSION"),this._refresh()}})},function(providers){providers.$compile.component("fSessionRateWidget",{templateUrl:__webpack_require__(1756),controller:SessionRateWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1756:function(module,exports){var path="/migadmin/ng/system/dashboard/f-session-rate-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{::\'dashboard_widget_type::session-rate\' | lang}}\n    </widget-title>\n    <extra-controls ng-if="!$ctrl.loading">\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.ipVersionOptionsMenu"\n            ng-if="$ctrl.ipVersionOptions.length">\n            {{ $ctrl.ipVersion.name | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.ipVersionOptionsMenu">\n            <div f-menu-item-button ng-repeat="version in $ctrl.ipVersionOptions"\n                 selected="$ctrl.ipVersion.option == version.option"\n                 ng-click="$ctrl.setIpVersionOption(version)">\n                <span>{{:: version.name | lang }}</span>\n            </div>\n        </div>\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu">\n            {{ \'time_period::\' + $ctrl.currentTimeOption.name | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.timeOptionsMenu">\n            <div f-menu-item-button ng-repeat="timeOption in $ctrl.timeOptions"\n                 selected="$ctrl.currentTimeOption === timeOption"\n                 ng-click="$ctrl.setTimeOption(timeOption)">\n                <span>{{ \'time_period::\' + timeOption.name | lang }}</span>\n            </div>\n        </div>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div f-chart="$ctrl.lineChartConfig" class="full-graph with-current-stat"></div>\n        <div class="current-stat">\n            <div class="current-stat-item">\n                <span class="light-text">{{:: \'Current session rate\' | lang }}</span>\n                <span class="current-stat-value">{{ \'{0}/s\' | lang:[$ctrl.currentSessionRate] }}</span>\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n')}]),module.exports=path},1757:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(32),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,formatters){function SessionsWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.resource="session",this.loading=!0}return SessionsWidget.prototype={COLOR:Chart.prototype.COLORS.RED,BASE_COLOR:Chart.prototype.COLORS.GREY,NPU_COLOR:Chart.prototype.COLORS.BLUE,NTURBO_COLOR:Chart.prototype.COLORS.LIME,$onInit:inject.mark(function($scope,systemResourceUsage,csfTopology){return async function(){await csfTopology.buildIfNecessary(),this.ipVersionOptions=systemResourceUsage.getIpVersionOptions(),this.ipVersion=systemResourceUsage.getIpVersionOptionForWidget("sessions"),this.timeOptions=systemResourceUsage.getTimeOptions(),this.currentTimeOption=systemResourceUsage.getTimeOptionForWidget("sessions"),this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.dashboardCsf||systemResourceUsage.registerWatch($scope.$id,this.fortigate),$scope.$watch(()=>systemResourceUsage.getResource(this.resource,this.fortigate),sessions=>{sessions&&sessions.length&&(this._refresh(),this.loading=!1)}),$scope.$watch("$ctrl.widgetModel.getRelativeWidth()",(curr,prev)=>{curr!==prev&&this._plot(),this.largeLegend=Math.round(curr)<=1}),$scope.$on("$destroy",function(){systemResourceUsage.unRegisterWatch($scope.$id)}),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,newVal=>{newVal&&(systemResourceUsage.registerWatch($scope.$id,newVal),this.loading=!0,this.fortigate=newVal)})}}),_refresh:inject.mark(function(systemResourceUsage){return function(){const ipVersion=this.ipVersion;this.currentSessions=systemResourceUsage.getResourceData("session","current",ipVersion,this.fortigate),this.npuSessions=systemResourceUsage.getResourceData("npu_session","current",ipVersion,this.fortigate),this.nturboSessions=systemResourceUsage.getResourceData("nturbo_session","current",ipVersion,this.fortigate),null!=this.npuSessions&&(this.currentNpuUsage=formatters.percentage(this.npuSessions-this.nturboSessions||0,this.currentSessions),null!=this.nturboSessions&&(this.currentNturboUsage=formatters.percentage(this.nturboSessions,this.currentSessions))),this._plot()}}),_plot:inject.mark(function($filter,lang,systemResourceUsage){const dateFilter=$filter("fDateTime");return function(){const timePeriod=this.currentTimeOption.option,ipVersion=this.ipVersion;var sessionHistory=systemResourceUsage.getResourceData("session",timePeriod,ipVersion,this.fortigate),npuSessionHistory=systemResourceUsage.getResourceData("npu_session",timePeriod,ipVersion,this.fortigate),nturboSessionHistory=systemResourceUsage.getResourceData("nturbo_session",timePeriod,ipVersion,this.fortigate),sessionValues=sessionHistory.values,npuSessionValues=npuSessionHistory?npuSessionHistory.values:null,data=[];if(npuSessionHistory){if(sessionValues=sessionValues.map(function(value,index){return[value[0],value[1]-npuSessionValues[index][1]]}),nturboSessionHistory){var nturboSessionValues=nturboSessionHistory.values;npuSessionValues=npuSessionValues.map(function(value,index){return[value[0],value[1]-nturboSessionValues[index][1]]}),data.push({data:nturboSessionValues,color:this.NTURBO_COLOR,label:lang("nTurbo").toString()})}data.push({data:npuSessionValues,color:this.NPU_COLOR,label:lang("SPU").toString()})}data.push({data:sessionValues,color:npuSessionHistory?this.BASE_COLOR:this.color,label:lang("Software").toString()}),this.lineChartConfig={data:data,options:{xaxis:systemResourceUsage.plotFormatters.xAxisConfig(this.widgetModel,sessionHistory.start,sessionHistory.end,"1-min"!==this.currentTimeOption.option),yaxis:{min:0,tickDecimals:0},series:{lines:{fill:!0},stack:!0},legend:{show:!1}},tooltips:!0,tooltip_formatter:function(label,x,y){return dateFilter(x,{skipProcessing:!0})+": "+y+" "+lang("Sessions")+" ("+label+")"}}}}),setTimeOption:inject.mark(function(systemResourceUsage){return function(timeOption){this.currentTimeOption=timeOption,systemResourceUsage.saveOptionForWidget("sessions",timeOption,"TIME"),this._refresh()}}),setIpVersionOption:inject.mark(function(systemResourceUsage){return function(option){this.ipVersion=option,systemResourceUsage.saveOptionForWidget("sessions",option,"IP_VERSION"),this._refresh()}})},function(providers){providers.$compile.component("fSessionsWidget",{templateUrl:__webpack_require__(1758),controller:SessionsWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1758:function(module,exports){var path="/migadmin/ng/system/dashboard/f-sessions-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)"\n    loading="$ctrl.loading">\n    <widget-title>\n        {{:: \'sessions\' | lang }}\n    </widget-title>\n    <extra-controls ng-if="!$ctrl.loading">\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.ipVersionOptionsMenu"\n            ng-if="$ctrl.ipVersionOptions.length">\n            {{ $ctrl.ipVersion.name | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.ipVersionOptionsMenu">\n            <div f-menu-item-button ng-repeat="version in $ctrl.ipVersionOptions"\n                 selected="$ctrl.ipVersion.option == version.option"\n                 ng-click="$ctrl.setIpVersionOption(version)">\n                <span>{{:: version.name | lang }}</span>\n            </div>\n        </div>\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu">\n            {{ \'time_period::\' + $ctrl.currentTimeOption.name | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.timeOptionsMenu">\n            <div f-menu-item-button ng-repeat="timeOption in $ctrl.timeOptions"\n                 selected="$ctrl.currentTimeOption === timeOption"\n                 ng-click="$ctrl.setTimeOption(timeOption)">\n                <span>{{ \'time_period::\' + timeOption.name | lang }}</span>\n            </div>\n        </div>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div f-chart="$ctrl.lineChartConfig" class="full-graph with-current-stat"\n        ng-class="{ \'large-legend\': $ctrl.largeLegend && $ctrl.lineChartConfig.data.length >= 3 }"></div>\n        <div class="current-stat"\n            ng-class="{ \'large-legend\': $ctrl.largeLegend && $ctrl.lineChartConfig.data.length >= 3 }">\n            <div class="current-stat-item">\n                <span class="light-text">{{:: \'Current sessions\' | lang }}</span>\n                <span class="current-stat-value">{{ $ctrl.currentSessions }}</span>\n            </div>\n            <div class="current-stat-item" ng-if="$ctrl.npuSessions != null">\n                <div class="chart-legend-item">\n                    <div class="chart-legend-color" ng-style="::{\'background-color\': $ctrl.NPU_COLOR}"></div>\n                </div>\n                <span class="light-text">{{:: \'SPU\' | lang }}</span>\n                <span class="current-stat-value">{{ $ctrl.currentNpuUsage }}</span>\n            </div>\n            <div class="current-stat-item" ng-if="$ctrl.nturboSessions != null">\n                <div class="chart-legend-item">\n                    <div class="chart-legend-color" ng-style="::{\'background-color\': $ctrl.NTURBO_COLOR}"></div>\n                </div>\n                <span class="light-text">{{:: \'nTurbo\' | lang }}</span>\n                <span class="current-stat-value">{{ $ctrl.currentNturboUsage }}</span>\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n')}]),module.exports=path},1759:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function SystemAdminsWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.loading=!0}return SystemAdminsWidget.prototype.$onInit=inject.mark(function(csfTopology){return async function(){await csfTopology.buildIfNecessary(),this.modelData=this.widgetModel.getModelData(),this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.dashboardCsf=this.dashboard.csfEnabled,this._load(),this._setupWatch()}}),SystemAdminsWidget.prototype._load=inject.mark(function($http){return function(){this.loading=!0,$http.get("/api/v2/monitor/system/current-admins",{csfProxy:this.fortigate}).then(response=>{const results=response.data.results;this.admins=results.reduce(function(previous,current){return null!=previous[current.admin]?previous[current.admin].sessions+=1:previous[current.admin]={name:current.admin,profile:current.profile,sessions:1,methods:{}},previous[current.admin].methods[current.method]?previous[current.admin].methods[current.method]+=1:previous[current.admin].methods[current.method]=1,previous},{}),this.protocols=results.reduce(function(protocols,adminSession){var method=adminSession.method;protocols[method]&&protocols[method].sessions?protocols[method].sessions+=1:protocols[method]={method:method,sessions:1,users:{}};var adminCount=protocols[method].users[adminSession.admin]||0;return protocols[method].users[adminSession.admin]=adminCount+1,protocols},{}),this.protocols.fexp||(this.protocols.fexp={method:"fexp",sessions:0,users:{}}),this.displayKeys=Object.keys(this.admins),this.loading=!1})}}),SystemAdminsWidget.prototype.toggleMenu=inject.mark(function(){return function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})}}),SystemAdminsWidget.prototype._setupWatch=inject.mark(function($scope,csfTopology){return function(){$scope.$watch("$ctrl.widgetModel.getRelativeHeight()",function(height){this.fullDimension=height>=1}.bind(this)),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,(newValue,oldValue)=>{newValue&&newValue!==oldValue&&(this.fortigate=newValue,this._load())})}}),SystemAdminsWidget.prototype.showAdminsList=inject.mark(function(slide,lang,$scope){return function(){const titleParts=[lang("Active Administrator Sessions").toString()];this.fortigate&&titleParts.push(`(${this.fortigate.getLabel()})`);const scope=Object.assign($scope.$new(),{fortigate:this.fortigate});slide.open("currentAdminsList",{template:'<f-current-admins fortigate="::fortigate"></f-current-admins>',parentScope:scope,options:{title:titleParts.join(" "),fullHeight:!0}}).finally(()=>scope.$destroy())}}),function(providers,loaderProvider){return providers.$compile.component("fSystemAdminsWidget",{templateUrl:__webpack_require__(1760),controller:SystemAdminsWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}}),loaderProvider.initModules([__webpack_require__(201)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1760:function(module,exports){var path="/migadmin/ng/system/dashboard/f-system-admins-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{::\'dashboard_widget_type::admins\' | lang}}\n    </widget-title>\n    <extra-controls>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div ng-click="$ctrl.toggleMenu($ctrl.popUpMenu, $event)" class="menu-toggle-area clickable">\n            <div class="flex-row-centered flex-wrap">\n                <div class="admin-circles-count-container" ng-repeat="protocol in $ctrl.protocols">\n                    <div class="flex-centered text-with-circle">\n                        <span f-tip-target ng-class="{ \'tooltip-hint\' : protocol.sessions != 0 }">\n                            <span>{{:: protocol.sessions }}</span>\n                            <div f-tip enabled="protocol.sessions != 0">\n                                <table class="table key-value-pair">\n                                    <tbody>\n                                        <tr ng-repeat="(key, value) in protocol.users">\n                                            <td>{{:: key }}</td>\n                                            <td>{{:: value }}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                    <div class="flex-row-centered">\n                        {{:: "AdminConnection::method." + protocol.method | lang }}\n                    </div>\n                </div>\n            </div>\n            <div class="flex-row-centered flex-wrap">\n                <table class="table slightly-condensed">\n                    <tbody>\n                        <tr ng-repeat="key in $ctrl.displayKeys">\n                            <td>\n                                <span class="tooltip-hint" f-tip-target>\n                                    {{:: $ctrl.admins[key].name }}\n                                    <div f-tip>\n                                        <table class="table key-value-pair">\n                                            <tbody>\n                                                <tr ng-repeat="(key, value) in $ctrl.admins[key].methods">\n                                                    <td>{{:: "AdminConnection::method." + key  | lang }}</td>\n                                                    <td>{{:: value }}</td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </span>\n                            </td>\n                            <td class="light-text truncate">{{:: $ctrl.admins[key].profile }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu">\n    <div f-menu-item-button click="$ctrl.showAdminsList()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Show active administrator sessions\' | lang}}</span>\n    </div>\n    <div class="menu-item">\n        <a class="button-style" href="https://itunes.apple.com/app/fortiexplorer/id1157004084"\n            target="_blank" rel="noopener noreferrer">\n            <f-icon class="fa-external-link"></f-icon>\n            <span>{{::\'Get FortiExplorer\' | lang}}</span>\n        </a>\n    </div>\n</div>\n')}]),module.exports=path},1761:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,inject){var TRANSLATIONS={I:"International",J:"Japan",K:"Korea",T:"Taiwan",U:"Ukraine"};function SystemInformationWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.wanLocation=null,this.wanCountryISOCode=null,this.loading=!0}return SystemInformationWidget.prototype.$onInit=function(){this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.watch()},SystemInformationWidget.prototype.init=function(){this.wanIPLoading=!0,this.newerFirmware=null,this.state=null,this.uptimeLoading=!0,this.tick=0,this._checkForNewerFirmware(),this._startInterval()},SystemInformationWidget.prototype.watch=inject.mark(function($q,$scope,notificationRequests,lang,csfTopology){const callback=license=>{var wanIP=license.fortiguard&&license.fortiguard.fortigate_wan_ip;wanIP?wanIP===this.wanIP?this.wanIPLoading=!1:(this.wanIP=wanIP,this._getWANLocation(wanIP).finally(()=>{this.wanIPLoading=!1})):wanIP||(this.wanIP=lang("status_unknown"),this.wanIPLoading=!1)},watch=()=>{this._deregisterListeners(),$q.when(notificationRequests.watch({scope:$scope,requestType:"license",callback:callback,fortigate:this.fortigate,immediate:!0})).then(listener=>{this._broadcastListener=listener})},updateFortigate=fortigate=>{this.fortigate=fortigate,this.state=this.fortigate.state},setupForFortigate=fortigate=>{this.loading=!0,this.init(),updateFortigate(fortigate),watch(),this.loading=!1};return async function(){await csfTopology.buildIfNecessary();const fortigate=this.dashboard.getChosenFortigate(this.modelData);setupForFortigate(fortigate),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,(newValue,oldValue)=>{newValue&&newValue!==oldValue&&setupForFortigate(newValue)})}}),SystemInformationWidget.prototype.getHardwareVersion=inject.mark(function(lang,state){return function(){var regionCode=state.region_code&&state.region_code.trim(),hardwareVersion="";return hardwareVersion+=state.model_name+" "+state.model_number,regionCode&&(hardwareVersion+=" "+lang(TRANSLATIONS[regionCode]||"Region-{0}",[regionCode]).toString()),hardwareVersion}}),SystemInformationWidget.prototype._getWANLocation=inject.mark(function(widgetShared){return function(wanIP){return widgetShared.getIPLocation(wanIP).then(function(location){this.wanCountryISOCode=location.countryISOCode,this.wanLocation=location.location}.bind(this))}}),SystemInformationWidget.prototype.getLastRebootTimeString=inject.mark(function($filter){var dateFilter=$filter("fDateTime");return function(){return this.state&&dateFilter(this.state.utc_last_reboot)}}),SystemInformationWidget.prototype._startInterval=inject.mark(function($scope,$interval,state){let intervalPromise;return function(){intervalPromise&&$interval.cancel(intervalPromise);var update=function(){var fortigateNow=state.getFortiGateTimeUTC();this.state&&(this.uptime=fortigateNow-this.state.utc_last_reboot,this.uptimeLoading&&(this.uptimeLoading=!1)),this.tick++}.bind(this);update(),intervalPromise=$interval(update,1e3),$scope.$on("$destroy",function(){$interval.cancel(intervalPromise)})}}),SystemInformationWidget.prototype._checkForNewerFirmware=inject.mark(function(state){return function(){var version;state.newer_firmware_available&&(version=state.newer_firmware_version,this.newerFirmware="v"+[version.major,version.minor,version.patch].join("."))}}),SystemInformationWidget.prototype.toggleMenu=inject.mark(function(){return function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})}}),SystemInformationWidget.prototype.showSystemSettings=inject.mark(function($location){return function(){$location.path("/system/settings")}}),SystemInformationWidget.prototype.showSystemFirmware=inject.mark(function($location){return function(){$location.path("/system/firmware")}}),SystemInformationWidget.prototype.isCurrentFortigate=function(){return!this.fortigate||this.fortigate.isCurrent},SystemInformationWidget.prototype._deregisterListeners=function(){this._broadcastListener&&this._broadcastListener()},function(providers,loaderProvider){return providers.$compile.component("fSystemInformationWidget",{templateUrl:__webpack_require__(1762),controller:SystemInformationWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}}),loaderProvider.initModules([__webpack_require__(323)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1762:function(module,exports){var path="/migadmin/ng/system/dashboard/f-system-information-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{::\'dashboard_widget_type::sysinfo\' | lang}}\n    </widget-title>\n    <extra-controls>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div class="menu-toggle-area clickable" ng-click="$ctrl.toggleMenu($ctrl.popUpMenu, $event)">\n            <table class="table key-value">\n                <tbody>\n                    <tr ng-if="$ctrl.state.region_code">\n                        <td>{{::\'hardware\' | lang}}</td>\n                        <td>{{$ctrl.getHardwareVersion()}}</td>\n                    </tr>\n                    <tr>\n                        <td>{{::\'hostname\' | lang}}</td>\n                        <td>{{$ctrl.state.hostname}}</td>\n                    </tr>\n                    <tr>\n                        <td>{{::\'sn\' | lang}}</td>\n                        <td>{{$ctrl.state.serial}}</td>\n                    </tr>\n                    <tr>\n                        <td>{{::\'firmware\' | lang}}</td>\n                        <td>\n                            {{$ctrl.state.getFirmwareLabel({withBuildLabel: true})}}\n                        </td>\n                    </tr>\n                    <tr ng-if="::$ctrl.state.vdom_mode">\n                        <td>{{::\'vdoms\' | lang}}</td>\n                        <td>\n                            <f-icon class="fa-enabled"></f-icon>\n                            <span ng-if="::$ctrl.state.vdom_mode === $ctrl.state.VDOM_MODE.SPLIT">\n                                (<span f-lang="SystemSettings::vdom-mode::split-vdom"></span>)\n                            </span>\n                        </td>\n                    </tr>\n                    <tr ng-if="::!$ctrl.state.vdom_mode">\n                        <td>{{::\'mode\' | lang}}</td>\n                        <td>\n                            <span>{{$ctrl.state.getOperationMode() | lang}}</span>\n                            <span ng-if="$ctrl.state.isNgfwPolicyMode()">({{::\'NGFW\'}})</span>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.isCurrentFortigate()">\n                        <td>{{::\'sys_time\' | lang}}</td>\n                        <td>\n                            <f-system-time tick="$ctrl.tick"></f-system-time>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>{{::\'field_uptime\' | lang}}</td>\n                        <td f-tip-target>\n                            <f-icon class="fa-loading" ng-if="$ctrl.uptimeLoading"></f-icon>\n                            <div ng-if="!$ctrl.uptimeLoading">\n                                <span class="tooltip-hint">{{$ctrl.uptime | elapsedTime: \'short\'}}</span>\n                                <div f-tip>\n                                    <div>\n                                        {{"Up since {0}" | lang: [$ctrl.getLastRebootTimeString()]}}\n                                    </div>\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>{{::\'WAN IP\' | lang}}</td>\n                        <td f-tip-target>\n                            <f-icon class="fa-loading" ng-if="$ctrl.wanIPLoading"></f-icon>\n                            <span ng-if="!$ctrl.wanIPLoading"\n                                 ng-class="{\n                                    \'tooltip-hint\': $ctrl.wanLocation\n                                 }">\n                                <span ng-if="$ctrl.wanCountryISOCode"\n                                    class="country_flag country_{{$ctrl.wanCountryISOCode}}">\n                                </span>\n                                <span>{{$ctrl.wanIP}}</span>\n                                <div f-tip ng-if="$ctrl.wanLocation">\n                                    <div>\n                                        <table class="table key-value slightly-condensed">\n                                            <tbody>\n                                                <tr>\n                                                    <td>{{::\'location\' | lang}}</td>\n                                                    <td>{{$ctrl.wanLocation}}</td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            </span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </widget-content>\n    <widget-absolute ng-if="$ctrl.isCurrentFortigate()">\n        <span class="severity-message severity-low large clickable pinned-message"\n            ng-if="$ctrl.newerFirmware" ng-click="$ctrl.toggleMenu($ctrl.firmwareMenu, $event)">\n            <f-icon class="fa-severity-low"></f-icon>\n            <span>{{ \'{0} available\' | lang: [$ctrl.newerFirmware]}}</span>\n        </span>\n    </widget-absolute>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu" ng-if="$ctrl.isCurrentFortigate()">\n    <div f-menu-item-button click="$ctrl.showSystemSettings()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Configure settings in System > Settings\' | lang}}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.showSystemFirmware()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Update firmware in System > Firmware\' | lang}}</span>\n    </div>\n</div>\n\n<div f-pop-up-menu="$ctrl.firmwareMenu" ng-if="$ctrl.isCurrentFortigate()">\n    <div f-menu-item-button click="$ctrl.showSystemFirmware()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'View in System > Firmware\' | lang}}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.newerFirmware = null">\n        <f-icon class="fa-times"></f-icon>\n        <span>{{::\'Dismiss\' | lang}}</span>\n    </div>\n</div>\n')}]),module.exports=path},1763:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(32),__webpack_require__(34),__webpack_require__(41),__webpack_require__(36),__webpack_require__(42),__webpack_require__(30),__webpack_require__(8),__webpack_require__(26),__webpack_require__(27),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,fFormatters,fDate,fSlide,fSelect,fLocation,fLog,ftnt_shared,inject,notify){const{Omniselect:Omniselect}=ftnt_shared;function TrafficHistoryWidget($scope,injector,state){injector.injectMarked(this,{$scope:$scope}),this.modelData=this.widgetModel.getModelData(),this.interface=this.modelData.interface,this.isGlobalVDOM=state.isGlobalVDOM(),this.loading=!0,this.monitoringEnabled=!0,$scope.$watch("$ctrl.widgetModel.getRelativeWidth()",function(width){this.relativeWidth=width}.bind(this)),$scope.$on("fChartSizeChangeStart",function(){this.chartResizing=!0}.bind(this)),$scope.$on("fChartSizeChangeEnd",function(){this.chartResizing=!1}.bind(this)),this.mouseMoveListener=(event=>{this.mouseX=event.pageX,this.mouseY=event.pageY})}return TrafficHistoryWidget.prototype.TIME_PERIODS=["hour","day","week"],TrafficHistoryWidget.prototype.INBOUND_COLOR=Chart.prototype.COLORS.GREEN,TrafficHistoryWidget.prototype.OUTBOUND_COLOR=Chart.prototype.COLORS.TEAL,TrafficHistoryWidget.prototype.TIME_PERIOD_CONFIG=inject.mark(function(state){return function(){const SAMPLE_NUM="low"===state.model_level?300:600,calculateInterval=function(duration){return 1e3*(Math.ceil(duration/SAMPLE_NUM)+4)};return{hour:{duration:3600,updateInterval:calculateInterval(3600)},day:{duration:86400,updateInterval:calculateInterval(86400)},week:{duration:604800,updateInterval:calculateInterval(604800)}}}()}),TrafficHistoryWidget.prototype.$onInit=inject.mark(function(csfTopology){return async()=>{await csfTopology.buildIfNecessary(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),await this.setupBandwidthWidget(),this.setupFortigateWatch(),this.setupPeriodWatch()}}),TrafficHistoryWidget.prototype.$onDestroy=function(){document.body.removeEventListener("mousemove",this.mouseMoveListener),this.stopDataPolling()},TrafficHistoryWidget.prototype.stopDataPolling=function(){return this.dataPollWatch&&this.dataPollWatch(),this.currentCacheKey&&this.dashboard.unsubscribeToPolledCache(this.currentCacheKey)},TrafficHistoryWidget.prototype.startDataPolling=inject.mark(function($scope){return()=>{const timeConfig=this.TIME_PERIOD_CONFIG[this.timePeriod];this.currentCacheKey=this.getUniqueCacheKey(),this.dashboard.subscribeToPolledCache(this.currentCacheKey,()=>this.fetchData(),timeConfig.updateInterval);const cachedData=this.dashboard.getPolledCacheInfo(this.currentCacheKey);this.dataPollWatch=$scope.$watch(()=>cachedData.data,newData=>{newData&&this.updateData(newData)})}}),TrafficHistoryWidget.prototype.fetchData=inject.mark(function($http){return()=>$http.get("/api/v2/monitor/system/traffic-history",{params:{interface:this.modelData.interface,time_period:this.timePeriod},csfProxy:this.fortigate}).then(r=>r.data.results,()=>(fLog.warn(`Cannot fetch ${this.modelData.interface}'s traffic history`),[]))}),TrafficHistoryWidget.prototype.setupBandwidthWidget=inject.mark(function($routeParams,persistentStorage){return async()=>{this.loading=!0,this.monitoringEnabled=!0,this.intfSourceID=this.getCurrentInterfaceSourceID(),this.timePeriod=persistentStorage.get(this.getTimeOptionStorageKey($routeParams.id))||"hour",document.body.removeEventListener("mousemove",this.mouseMoveListener),this.stopDataPolling();try{await this.checkInterfaceValidity(),this.monitoringEnabled=await this.isBandwidthMonitoringEnabled(),this.monitoringEnabled&&(document.body.addEventListener("mousemove",this.mouseMoveListener),this.startDataPolling())}catch(e){fLog.warn(`Interface ${this.interface} not found`)}finally{this.loading=!1}}}),TrafficHistoryWidget.prototype.isBandwidthMonitoringEnabled=inject.mark(function(CMDB,lang){return async()=>{const intfCmdb=new CMDB("system","interface",{csfProxy:this.fortigate});try{const intf=await intfCmdb.get(this.interface).$promise;if(!intf)return this.disabled=!0,!1;"enable"!==intf["monitor-bandwidth"]&&await intfCmdb.edit(this.interface,{"monitor-bandwidth":"enable"}).$promise}catch(e){const msg="Failed to enable bandwidth monitoring for {INTERFACE}. Maximum number of monitored interfaces reached.";return notify.post(lang(msg,[this.interface]),notify.LEVEL.ERROR),fLog.warn(`Failed to enable bandwidth monitoring for ${this.interface}`),!1}return!0}}),TrafficHistoryWidget.prototype.updateData=inject.mark(function(lang){const adjustBasedOnTZDevice=fDate.adjustBasedOnTZDevice,debounceClick=ftnt_shared.util.debounce(500,()=>{this._selectingTimePeriod=!1});return trafficData=>{if(0===Object.keys(trafficData).length)return;const timeConfig=this.TIME_PERIOD_CONFIG[this.timePeriod],end=adjustBasedOnTZDevice(new Date,{fromBrowser:!0}).getTime(),start=end-1e3*timeConfig.duration;let inbound,outbound;if(!this._selectingTimePeriod){inbound={label:lang("Inbound").toString(),data:trafficData.rx.map(function(entry){return[adjustBasedOnTZDevice(entry.utc_ms),entry.bps]}),color:this.INBOUND_COLOR,lines:{show:!0,fill:!0,steps:!1}},outbound={label:lang("Outbound").toString(),data:trafficData.tx.map(function(entry){return[adjustBasedOnTZDevice(entry.utc_ms),entry.bps]}),color:this.OUTBOUND_COLOR,lines:{show:!0,fill:!0,steps:!1}};const inboundLimit={label:"Inbound Limit {0}",data:trafficData.rx.map(entry=>[adjustBasedOnTZDevice(entry.utc_ms),1e3*this.inLimit]),color:this.INBOUND_COLOR,dashes:{show:!0},points:{show:!0,radius:0},stack:!1},outboundLimit={label:"Outbound Limit {0}",data:trafficData.tx.map(entry=>[adjustBasedOnTZDevice(entry.utc_ms),1e3*this.outLimit]),color:this.OUTBOUND_COLOR,dashes:{show:!0},points:{show:!0,radius:0},stack:!1};this.combinedChartConfig={options:{legend:{show:!1},crosshair:{mode:"x"},series:{stack:!0},xaxis:{mode:"time",timezone:"browser",min:start,max:end},yaxis:{tickFormatter:function(value){return fFormatters.metric_bits_per_second(value,1)},min:0,tickDecimals:0},grid:{}},tooltips:!0,tooltip_formatter:function(label,x,y){if(label.includes("Limit"))return lang(label,[fFormatters.metric_bits_per_second(y)]).toString();return`${fDate.formatDateTime(x,{skipProcessing:!0})}: ${fFormatters.metric_bits_per_second(y)}`},events:{plotselected:function(event,ranges){var msg;this.selectedTimePeriodStart=ranges.xaxis.from,this.selectedTimePeriodEnd=ranges.xaxis.to,this.selectedTimePeriodEnd-this.selectedTimePeriodStart>=6e4?this.timeSelectionMenu.toggle({top:this.mouseY,left:this.mouseX}).finally(function(){this._selectingTimePeriod=!1}.bind(this)):(this._selectingTimePeriod=!1,msg=lang("traffic_history_min_time_selection_warning",[60]).toString(),fSlide.alert(msg))}.bind(this),plotselecting:function(){this._selectingTimePeriod=!0,debounceClick()}.bind(this)}},this.isSelectionDisabled||(this.combinedChartConfig.options=angular.extend(this.combinedChartConfig.options,{selection:{mode:"x"}})),this.inboundChartConfig=angular.extend({},this.combinedChartConfig),this.outboundChartConfig=angular.extend({},this.combinedChartConfig),this.combinedChartConfig.data=[inbound,outbound,inboundLimit,outboundLimit],this.inboundChartConfig.data=[inbound,inboundLimit],this.outboundChartConfig.data=[outbound,outboundLimit],this.lastRx=trafficData.last_rx,this.lastTx=trafficData.last_tx,this.loading=!1}}}),TrafficHistoryWidget.prototype.fortiViewDrilldown=inject.mark(function($q,$location,state){return function(destination){const toUTCSeconds=function(time){return(time/1e3).toFixed(0)};let vdom=state.current_vdom;const transition=()=>{let fn,key;destination?(fn=fLocation.drilldownFortiviewDestinationInterface,key="destinationInterface"):(fn=fLocation.drilldownFortiviewSourceInterface,key="sourceInterface"),fn({vdom:vdom,[key]:this.interface,"fortiview-timeframe":"custom","start-timestamp":toUTCSeconds(this.selectedTimePeriodStart),"end-timestamp":toUTCSeconds(this.selectedTimePeriodEnd),returnPath:$location.url(),fortigate:this.fortigate.serial})};this.isGlobalVDOM||transition()}}),TrafficHistoryWidget.prototype.setupPeriodWatch=inject.mark(function($scope,$timeout,$routeParams,persistentStorage,fortiviewData){return function(){$scope.$watch(()=>this.timePeriod,(newValue,oldValue)=>{fortiviewData.getTimeframeOptions().then(options=>{this.isSelectionDisabled=!options.includes(newValue),persistentStorage.put(this.getTimeOptionStorageKey($routeParams.id),newValue),newValue&&newValue!==oldValue&&this.setupBandwidthWidget()})})}}),TrafficHistoryWidget.prototype.setupFortigateWatch=inject.mark(function($scope,csfTopology){return()=>{$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,(newValue,oldValue)=>{newValue&&newValue!==oldValue&&(this.fortigate=newValue,this.setupBandwidthWidget())})}}),TrafficHistoryWidget.prototype.checkInterfaceValidity=inject.mark($q=>(async function(){let source=this.getCurrentInterfaceSourceID();const intf=(await Omniselect.getSourceData(source)).getEntry(this.interface);return intf?(this.inLimit=intf.in_bandwidth_limit,this.outLimit=intf.out_bandwidth_limit,this.disabled=!1,$q.resolve()):(this.loading=!1,this.disabled=!0,$q.reject())})),TrafficHistoryWidget.prototype.getUniqueCacheKey=function(){const parts=["InterfaceBandwidthWidget"];return this.fortigate&&parts.push(this.fortigate.serial),parts.push(this.interface,this.timePeriod),parts.join("::")},TrafficHistoryWidget.prototype.getTimeOptionStorageKey=function(dashboardId){const parts=["InterfaceBandwidthWidgetTime"];return this.fortigate&&parts.push(this.fortigate.serial),parts.push(dashboardId,this.modelData.id),parts.join("::")},TrafficHistoryWidget.prototype.getCurrentInterfaceSourceID=inject.mark(function(state){return()=>{const intfSourceID=state.isGlobalVDOM()?fSelect.makeGlobalSourceID("firewallInterfaces"):"firewallInterfaces";return this.fortigate&&this.fortigate.getOmniselectProxySourceID(intfSourceID)||intfSourceID}}),TrafficHistoryWidget.prototype.fallbackFormatter=(id=>id),function(providers){providers.$compile.component("fTrafficHistoryWidget",{templateUrl:__webpack_require__(1764),controller:TrafficHistoryWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1764:function(module,exports){var path="/migadmin/ng/system/dashboard/f-traffic-history-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel" loading="$ctrl.loading"\n    ng-class="{high: $ctrl.disabled || !$ctrl.monitoringEnabled}"\n    has-settings="::true" on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{::\'Bandwidth\' | lang}} -&nbsp;\n        <f-omniselect-entry id="::$ctrl.interface" source="$ctrl.intfSourceID"\n            fallback-formatter="$ctrl.fallbackFormatter(id)">\n        </f-omniselect-entry>\n    </widget-title>\n    <widget-content>\n        <div ng-if="$ctrl.monitoringEnabled && !$ctrl.disabled">\n            <div f-chart="$ctrl.combinedChartConfig" resizing="$ctrl.chartResizing" class="full-graph"\n                ng-class="{\'selection-disabled\': $ctrl.isSelectionDisabled}"\n                ng-if="!$ctrl.disabled && $ctrl.relativeWidth < 3">\n            </div>\n            <div f-chart="$ctrl.inboundChartConfig" resizing="$ctrl.chartResizing" class="left-graph"\n                ng-class="{\'selection-disabled\': $ctrl.isSelectionDisabled}"\n                ng-if="!$ctrl.disabled && $ctrl.relativeWidth >= 3">\n            </div>\n            <div f-chart="$ctrl.outboundChartConfig" resizing="$ctrl.chartResizing" class="right-graph"\n                ng-class="{\'selection-disabled\': $ctrl.isSelectionDisabled}"\n                ng-if="!$ctrl.disabled && $ctrl.relativeWidth >= 3">\n            </div>\n\n            <div class="current-bandwidth" ng-if="!$ctrl.disabled">\n                <div class="chart-legend-item-container">\n                    <div class="chart-legend-item">\n                        <div class="chart-legend-color" ng-style="::{\'background-color\': $ctrl.INBOUND_COLOR}"></div>\n                    </div>\n                    <span class="light-text">{{::\'Inbound\' | lang}}</span>\n                    <span class="bandwidth-item-value">\n                        {{$ctrl.lastRx | bitsPerSecond}}\n                    </span>\n                </div>\n                <div class="chart-legend-item-container">\n                    <div class="chart-legend-item">\n                        <div class="chart-legend-color" ng-style="::{\'background-color\': $ctrl.OUTBOUND_COLOR}"></div>\n                    </div>\n                    <span class="light-text">{{::\'Outbound\' | lang}}</span>\n                    <span class="bandwidth-item-value">\n                        {{$ctrl.lastTx | bitsPerSecond}}\n                    </span>\n                </div>\n            </div>\n        </div>\n        <div ng-if="!$ctrl.monitoringEnabled || $ctrl.disabled" class="absolute-fill flex-centered">\n            <f-icon class="fa-warning"></f-icon>\n            <span ng-if="$ctrl.disabled">{{::\'Invalid interface\' | lang}}</span>\n            <span ng-if="!$ctrl.disabled && !$ctrl.monitoringEnabled">\n                {{:: \'Bandwidth monitoring is disabled for this interface\' | lang }}\n            </span>\n        </div>\n    </widget-content>\n    <extra-controls>\n        <button ng-if="!$ctrl.disabled && $ctrl.monitoringEnabled" type="button" class="bare" f-pop-up-menu-toggle="$ctrl.periodMenu">\n            {{\'time_period::\' + $ctrl.timePeriod | lang}}\n        </button>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.periodMenu">\n    <div f-menu-item-button ng-repeat="period in ::$ctrl.TIME_PERIODS"\n        click="$ctrl.timePeriod = period"\n        selected="$ctrl.timePeriod === period">\n        {{::\'time_period::\' + period | lang}}\n    </div>\n</div>\n\n<div f-pop-up-menu="$ctrl.timeSelectionMenu">\n    <div class="heading">\n        {{ $ctrl.selectedTimePeriodStart | fDateTime }} -\n        {{ $ctrl.selectedTimePeriodEnd | fDateTime }}\n    </div>\n    <div f-menu-item-submenu="$ctrl.timeSelectionSubMenu" enabled="::!$ctrl.isGlobalVDOM">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'View in FortiView\' | lang}}</span>\n    </div>\n    <div f-pop-up-menu="$ctrl.timeSelectionSubMenu">\n        <div f-menu-item-button click="$ctrl.fortiViewDrilldown()">\n            <f-icon class="fa-long-arrow-right"></f-icon>\n            <span>{{::\'Source interface {0}\' | lang: [$ctrl.interface]}}</span>\n        </div>\n        <div f-menu-item-button click="$ctrl.fortiViewDrilldown(true)">\n            <f-icon class="fa-long-arrow-left"></f-icon>\n            <span>{{::\'Destination interface {0}\' | lang: [$ctrl.interface]}}</span>\n        </div>\n    </div>\n</div>\n')}]),module.exports=path},1765:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(2),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,fweb,inject){var SENSOR_TYPES_VOLTAGE="voltage",SENSOR_TYPES_POWER="power",UPPER_KEY="upper_",LOWER_KEY="lower_",THRESHOLD_WARNING="critical",THRESHOLD_ERROR="non_recoverable",STATUS={NORMAL:"normal",WARNING:"warning",ERROR:"error"},SEVERITY_NORMAL="",SEVERITY_WARNING="severity-high",SEVERITY_ERROR="severity-critical",ICON={NORMAL:"fa-enabled",WARNING:"fa-severity-high",ERROR:"fa-severity-critical"};function SensorInformationWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this._init()}return SensorInformationWidget.prototype._init=inject.mark(function($scope,$timeout){return function(){this.STATUS=STATUS,this.ICON=ICON,this.timeoutPromise=null,this.loading=!0,this._load(),$scope.$on("$destroy",function(){$timeout.cancel(this.timeoutPromise)}.bind(this))}}),SensorInformationWidget.prototype._load=inject.mark(function(notificationRequests,$timeout,widgetShared){return function(){notificationRequests.sensorInfo().then(function(sensors){angular.extend(this,this._parseSensors(sensors)),this.loading=!1}.bind(this)).finally(function(){this.timeoutPromise=$timeout(this._load.bind(this),widgetShared.REFRESH_INTERVAL.LONG)}.bind(this))}}),SensorInformationWidget.prototype._genSensorStatusExtra=function(sensor,allSensors){switch(sensor.status){case STATUS.WARNING:sensor.severityLevel=SEVERITY_WARNING,sensor.icon=ICON.WARNING,allSensors.severityLevel===SEVERITY_NORMAL&&(allSensors.severityLevel=sensor.severityLevel,allSensors.icon=sensor.icon),allSensors.count[STATUS.WARNING]++;break;case STATUS.ERROR:sensor.severityLevel=SEVERITY_ERROR,sensor.icon=ICON.ERROR,allSensors.severityLevel=sensor.severityLevel,allSensors.icon=sensor.icon,allSensors.count[STATUS.ERROR]++;break;default:sensor.severityLevel=SEVERITY_NORMAL,sensor.icon=ICON.NORMAL,allSensors.count[STATUS.NORMAL]++}},SensorInformationWidget.prototype._genSensorStatus=function(sensor,allSensors){sensor.status=STATUS.NORMAL,sensor.cause="",sensor.thresholds&&Object.keys(sensor.thresholds).length&&[UPPER_KEY,LOWER_KEY].forEach(function(key){key===UPPER_KEY?sensor.thresholds.hasOwnProperty(key+THRESHOLD_ERROR)&&sensor.value>sensor.thresholds[key+THRESHOLD_ERROR]?(sensor.status=STATUS.ERROR,sensor.cause=key+THRESHOLD_ERROR,allSensors.status=sensor.status):sensor.thresholds.hasOwnProperty(key+THRESHOLD_WARNING)&&sensor.value>sensor.thresholds[key+THRESHOLD_WARNING]&&(sensor.status=STATUS.WARNING,sensor.cause=key+THRESHOLD_WARNING,allSensors.status===STATUS.NORMAL&&(allSensors.status=sensor.status)):sensor.thresholds.hasOwnProperty(key+THRESHOLD_ERROR)&&sensor.value<sensor.thresholds[key+THRESHOLD_ERROR]?(sensor.status=STATUS.ERROR,sensor.cause=key+THRESHOLD_ERROR,allSensors.status=sensor.status):sensor.thresholds.hasOwnProperty(key+THRESHOLD_WARNING)&&sensor.value<sensor.thresholds[key+THRESHOLD_WARNING]&&(sensor.status=STATUS.WARNING,sensor.cause=key+THRESHOLD_WARNING,allSensors.status===STATUS.NORMAL&&(allSensors.status=sensor.status))}),sensor.type===SENSOR_TYPES_POWER&&sensor.alarm&&(sensor.status=STATUS.ERROR,sensor.cause="ac_lost",allSensors.status=sensor.status),this._genSensorStatusExtra(sensor,allSensors)},SensorInformationWidget.prototype._sensorTypeToListType=function(type){return type===SENSOR_TYPES_POWER||type===SENSOR_TYPES_VOLTAGE?"powerSupply":type},SensorInformationWidget.prototype._parseSensors=function(sensors){var data={};return["temperature","powerSupply","fan"].forEach(function(key){data[key]={values:[],status:STATUS.NORMAL,severityLevel:SEVERITY_NORMAL,icon:ICON.NORMAL,count:{}},data[key].count[STATUS.NORMAL]=0,data[key].count[STATUS.WARNING]=0,data[key].count[STATUS.ERROR]=0}),sensors.reduce(function(previous,current){var listType=this._sensorTypeToListType(current.type);return(current.type!==SENSOR_TYPES_VOLTAGE||current.id.indexOf("vin")>=0||current.id.indexOf("vout")>=0)&&(this._genSensorStatus(current,previous[listType]),previous[listType].values.push(current)),previous}.bind(this),data)},SensorInformationWidget.prototype.toggleMenu=function(event,menuKey){this.popUpMenu[menuKey].toggle({top:event.clientY,left:event.clientX})},SensorInformationWidget.prototype.showList=inject.mark(function(slide,lang){return function(sensorType){var modalData={entries:this[sensorType].values,sensorType:sensorType};slide.open("SENSOR_INFORMATION_WIDGET_LIST",{template:"<f-sensor-information-widget-list></f-sensor-information-widget-list>",data:modalData,options:{title:lang("Sensor List").toString()+" - "+lang("Sensor::type."+sensorType).toString(),fullHeight:!0}})}}),function(providers,loaderProvider){return providers.$compile.component("fSensorInformationWidget",{templateUrl:__webpack_require__(1766),controller:SensorInformationWidget,bindings:{widgetModel:"<"}}),loaderProvider.initModules([__webpack_require__(1767),__webpack_require__(1769)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1766:function(module,exports){var path="/migadmin/ng/system/dashboard/f-sensor-information-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel" loading="$ctrl.loading">\n    <widget-title>\n        {{:: \'dashboard_widget_type::sensor-info\' | lang }}\n    </widget-title>\n    <widget-content>\n        <table class="table key-value">\n            <tbody>\n                <tr ng-if="$ctrl.temperature.values.length"\n                    ng-click="$ctrl.toggleMenu($event, \'temperature\')"\n                    class="menu-toggle-area clickable">\n                    <td>{{:: \'Sensor::type.temperature\' | lang }}</td>\n                    <td>\n                        <f-sensor-information-widget-tooltip sensors="$ctrl.temperature">\n                        </f-sensor-information-widget-tooltip>\n                    </td>\n                </tr>\n                <tr ng-if="$ctrl.powerSupply.values.length"\n                    ng-click="$ctrl.toggleMenu($event, \'powerSupply\')"\n                    class="menu-toggle-area clickable">\n                    <td>{{:: \'Sensor::type.powerSupply\' | lang }}</td>\n                    <td>\n                        <f-sensor-information-widget-tooltip sensors="$ctrl.powerSupply">\n                        </f-sensor-information-widget-tooltip>\n                    </td>\n                </tr>\n                <tr ng-if="$ctrl.fan.values.length"\n                    ng-click="$ctrl.toggleMenu($event, \'fan\')"\n                    class="menu-toggle-area clickable">\n                    <td>{{:: \'Sensor::type.fan\' | lang }}</td>\n                    <td>\n                        <f-sensor-information-widget-tooltip sensors="$ctrl.fan">\n                        </f-sensor-information-widget-tooltip>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </widget-content>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu.temperature">\n    <div f-menu-item-button click="$ctrl.showList(\'temperature\')">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{:: \'Show sensor details\' | lang }}</span>\n    </div>\n</div>\n\n<div f-pop-up-menu="$ctrl.popUpMenu.powerSupply">\n    <div f-menu-item-button click="$ctrl.showList(\'powerSupply\')">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{:: \'Show sensor details\' | lang }}</span>\n    </div>\n</div>\n\n<div f-pop-up-menu="$ctrl.popUpMenu.fan">\n    <div f-menu-item-button click="$ctrl.showList(\'fan\')">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{:: \'Show sensor details\' | lang }}</span>\n    </div>\n</div>\n')}]),module.exports=path},1767:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){function SensorInformationWidgetTooltip(){this.STATUS_BASE_LANG_KEY="Sensor::status.",this.STATUS={NORMAL:"normal",WARNING:"warning",ERROR:"error"},this.ICON={NORMAL:"fa-enabled",WARNING:"fa-severity-high",ERROR:"fa-severity-critical"}}return function(providers){providers.$compile.component("fSensorInformationWidgetTooltip",{templateUrl:__webpack_require__(1768),controller:SensorInformationWidgetTooltip,bindings:{sensors:"<"}})}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1768:function(module,exports){var path="/migadmin/ng/system/dashboard/f-sensor-information-widget-tooltip.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="severity-message {{ $ctrl.sensors.severityLevel }}" f-tip-target>\n    <f-icon class="{{ $ctrl.sensors.icon }}"></f-icon>\n    <span class="tooltip-hint">\n        {{ $ctrl.STATUS_BASE_LANG_KEY + $ctrl.sensors.status | lang }}\n    </span>\n    <div f-tip>\n        <div ng-show="$ctrl.sensors.count[$ctrl.STATUS.NORMAL] ===\n                      $ctrl.sensors.values.length">\n            <f-icon class="{{ $ctrl.sensors.icon }}"></f-icon>\n            <span>{{:: \'all_working_properly\' | lang }}</span>\n        </div>\n        <table class="table key-value"\n               ng-show="$ctrl.sensors.count[$ctrl.STATUS.NORMAL] !==\n                        $ctrl.sensors.values.length">\n            <tbody>\n                <tr ng-show="$ctrl.sensors.count[$ctrl.STATUS.WARNING]">\n                    <td>\n                        <f-icon class="{{:: $ctrl.ICON.WARNING }}"></f-icon>\n                        <span>{{:: $ctrl.STATUS_BASE_LANG_KEY + \'warning\' | lang }}</span>\n                    </td>\n                    <td>{{ $ctrl.sensors.count[$ctrl.STATUS.WARNING] }} / {{ $ctrl.sensors.values.length }}</td>\n                </tr>\n                <tr ng-show="$ctrl.sensors.count[$ctrl.STATUS.ERROR]">\n                    <td>\n                        <f-icon class="{{:: $ctrl.ICON.ERROR }}"></f-icon>\n                        <span>{{:: $ctrl.STATUS_BASE_LANG_KEY + \'error\' | lang }}</span>\n                    </td>\n                    <td>{{ $ctrl.sensors.count[$ctrl.STATUS.ERROR] }} / {{ $ctrl.sensors.values.length }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>')}]),module.exports=path},1769:function(module,exports,__webpack_require__){"use strict";const inject=__webpack_require__(26),dom=__webpack_require__(31),CAUSE_LANG_KEY="Sensor::cause.",STATUS_BASE_LANG_KEY="Sensor::status.",STATUS={NORMAL:"normal",WARNING:"warning",ERROR:"error"},SENSOR_TYPES={VOLTAGE:"voltage",TEMPERATURE:"temperature",FAN:"fan",POWER:"power"},celciusToFahrenheit=celcius=>Math.round(1.8*celcius+32);class SensorInformationWidgetList extends inject.Collectable{$onInit($INJECTABLE$,slide,$scope){return()=>{const current=slide.get("SENSOR_INFORMATION_WIDGET_LIST");this._setupMutableSettings(),current.data.sensorType===SENSOR_TYPES.TEMPERATURE?(this.needMenu=!0,this.temperatureUnits=["C","F"],this.temperatureUnit="C",this.cachedEntries={},$scope.$watch("$ctrl.temperatureUnit",unit=>{unit&&(this.cachedEntries[unit]?this.entries=this.cachedEntries[unit]:this.entries=this.cachedEntries[unit]="C"===unit?current.data.entries:JSON.parse(JSON.stringify(current.data.entries)).map(function(entry){return entry.value=celciusToFahrenheit(entry.value),entry}))})):this.entries=current.data.entries}}_setupMutableSettings($INJECTABLE$,lang){return()=>{const sensorListOptions={columns:[{id:"name",langKey:"Name"},{id:"status",langKey:"Status",cellValueFunction:entry=>lang(entry.status!==STATUS.NORMAL?CAUSE_LANG_KEY+entry.cause:STATUS_BASE_LANG_KEY+entry.status),cellFormatter:(entry,row,value)=>dom.elem("div",null,{children:[dom.elem("f-icon",{className:entry.icon}),dom.elem("span",{textContent:value})]})},{id:"value",cellValueFunction:entry=>{let unit="";return entry.type===SENSOR_TYPES.TEMPERATURE?unit=`°${this.temperatureUnit}`:entry.type===SENSOR_TYPES.VOLTAGE?unit="V":entry.type===SENSOR_TYPES.FAN&&(unit="RPM"),entry.type!==SENSOR_TYPES.POWER?`${entry.value} ${unit}`:""}}]};this.settings=sensorListOptions}}}module.exports=(providers=>{providers.$compile.component("fSensorInformationWidgetList",{controller:SensorInformationWidgetList,templateUrl:__webpack_require__(1770)})})},1770:function(module,exports){var path="/migadmin/ng/system/dashboard/f-sensor-information-widget-list.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="mutable-field">\n    <f-mutable\n        source="$ctrl.entries"\n        settings="$ctrl.settings"\n        context-menu="::true">\n        <div class="center-menu-items no-separator" ng-if="$ctrl.needMenu">\n        </div>\n        <div class="right-menu-items" ng-if="$ctrl.needMenu">\n            <f-radio-group>\n                <input type="radio"\n                    ng-repeat="unit in ::$ctrl.temperatureUnits"\n                    ng-model="$ctrl.temperatureUnit"\n                    radio-label="°{{:: unit }}"\n                    value="{{ unit }}">\n            </f-radio-group>\n        </div>\n    </f-mutable>\n</div>')}]),module.exports=path},1771:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(0),__webpack_require__(34)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,BUILD,fDate){const HA_URI="/api/v2/monitor/system/",HA_MODES=BUILD.SYMBOLS;function SystemHaWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.loading=!0}return SystemHaWidget.prototype.$onInit=inject.mark(function(csfTopology){return async()=>{await csfTopology.buildIfNecessary(),this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this._init(),this._setupWatches()}}),SystemHaWidget.prototype.$onDestroy=inject.mark(function($timeout,$interval){return()=>{this._stopDataPolling(),$interval.cancel(this.tickPromise)}}),SystemHaWidget.prototype.getRelativeDateStateChanged=function(){if(this.ha.history.history[0]){const now=new Date,date=new Date(this.ha.history.history[0].time*fDate.S_TO_MS),fgtTimestamp=fDate.browserUTCToFortiGateUTC(now);return fDate.formatDateFromNow(date,fgtTimestamp)}},SystemHaWidget.prototype._isHaEnabled=inject.mark(function(state){const HA_ENABLED=[HA_MODES.HA_AA,HA_MODES.HA_AP];return()=>{const fgtState=this.fortigate&&this.fortigate.state||state;return fgtState.hasOwnProperty("ha_mode")&&HA_ENABLED.includes(fgtState.ha_mode)}}),SystemHaWidget.prototype.isCurrentFortigate=function(){return!this.fortigate||this.fortigate.isCurrent},SystemHaWidget.prototype._init=inject.mark(function($interval){return function(){this.loading=!0,this.haEnabled=this._isHaEnabled(),this._startDataPolling(),this.tickPromise=$interval(()=>{if(this.ha&&this.ha.history){var fortiGateUTC=fDate.browserUTCToFortiGateUTC(Date.now());fortiGateUTC=Math.round(fortiGateUTC/1e3),this.ha.uptime=fortiGateUTC-this.ha.history.start_time,this.ha.history.last_change>0&&(this.ha.lastChange=Math.round(Date.now()/1e3)-this.ha.history.last_change)}},1e3)}}),SystemHaWidget.prototype._setupWatches=inject.mark(function($scope,csfTopology){return()=>{$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,(newValue,oldValue)=>{newValue&&newValue!==oldValue&&(this.fortigate=newValue,this.haEnabled=this._isHaEnabled(),this._startDataPolling())})}}),SystemHaWidget.prototype._fetch=inject.mark(function($q,$http,CMDB,SystemHaModel){return function(){if(!this.haEnabled)return this.loading=!1,$q.resolve();const haCmdb=new CMDB("system","ha",{model:SystemHaModel,datasource:!0,csfProxy:this.fortigate}),resources={statistics:$http.get("/api/v2/monitor/system/ha-statistics",{transformResponse:monitorResult,csfProxy:this.fortigate}),checksums:$http.get("/api/v2/monitor/system/ha-checksums",{headers:{"If-None-Match":null},transformResponse:monitorResult,csfProxy:this.fortigate}),peers:$http.get("/api/v2/monitor/system/ha-peer",{transformResponse:monitorResult,csfProxy:this.fortigate}),history:$http.get(`${HA_URI}ha-history`,{transformResponse:monitorResult,csfProxy:this.fortigate}),cmdb:haCmdb.get().$promise};return $q.all(resources);function monitorResult(responseJSON){return JSON.parse(responseJSON).results}}}),SystemHaWidget.prototype._generateUniqueCacheKey=function(){const uniqueKeyParts=["ha-status"];return this.fortigate&&uniqueKeyParts.push(this.fortigate.serial),uniqueKeyParts.join("::")},SystemHaWidget.prototype._startDataPolling=inject.mark(function(widgetShared,$scope){return()=>{this._stopDataPolling(),this._currentCacheKey=this._generateUniqueCacheKey(),this.haEnabled=this._isHaEnabled(),this.dashboard.subscribeToPolledCache(this._currentCacheKey,()=>this._fetch(),widgetShared.REFRESH_INTERVAL.NORMAL);const cachedData=this.dashboard.getPolledCacheInfo(this._currentCacheKey);this._dataPollWatch=$scope.$watch(()=>cachedData.data,(newData,oldData)=>{newData&&newData!==oldData&&this._processData(newData)})}}),SystemHaWidget.prototype._stopDataPolling=function(){this.dashboard.unsubscribeToPolledCache(this._currentCacheKey),this._dataPollWatch&&this._dataPollWatch()},SystemHaWidget.prototype._processData=function(data){this.ha=this._transform(data),this.loading=!1},SystemHaWidget.prototype._transform=inject.mark(function(state){return function(data){var master,masterChecksum,hostname,checksumUnsynced,transformedNode,ha={},haSerialNameMapping=this._transformStats(data.statistics.data),peerIndex=data.peers.data.reduce(function(result,peer){return result[snVcKey(peer)]=peer,result},{});ha.mode=state.ha_mode===HA_MODES.HA_AA?"ha_aa":"ha_ap",ha.group=data.cmdb["group-name"],ha.cluster={master:{},slaves:[]},master=data.checksums.data.find(function(node){return node.is_manage_master}),masterChecksum=master&&master.checksum&&master.checksum.all,data.checksums.data.forEach(function(node){hostname=haSerialNameMapping[node.serial_no]?haSerialNameMapping[node.serial_no].name:"",checksumUnsynced=masterChecksum!==node.checksum.all,transformedNode={serial:node.serial_no,hostname:hostname,checksum:node.checksum.all,checksumUnsynced:checksumUnsynced,icon:checksumUnsynced?"fa-severity-critical":"fa-enabled",severityLevel:checksumUnsynced?"severity-critical":"",secondaryVCluster:peerIndex[snVcKey(Object.assign({vcluster_id:1},node))],vclusters:data.cmdb.$vclusters},node.is_manage_master?ha.cluster.master=transformedNode:ha.cluster.slaves.push(transformedNode)}),ha.history=data.history.data;var utc=Math.round((new Date).getTime()/1e3);return ha.uptime=utc-ha.history.start_time,ha.lastChange=utc-ha.history.last_change,ha;function snVcKey(peer){return JSON.stringify({sn:peer.serial_no,vc:peer.vcluster_id})}}}),SystemHaWidget.prototype._transformStats=function(haStats){return haStats.reduce(function(transformed,node){return transformed[node.serial_no]={name:node.hostname},transformed},{})},SystemHaWidget.prototype.toggleMenu=function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})},SystemHaWidget.prototype.toHaSetting=inject.mark(function($location){return function(){$location.path("/system/ha/monitor")}}),SystemHaWidget.prototype.showHaHistory=inject.mark(function(slide,lang){return function(){const titleParts=[lang("HA Historical Events").toString()];this.fortigate&&titleParts.push(`(${this.fortigate.getLabel()})`),slide.open("ha-history-list",{template:"<f-ha-history></f-ha-history>",data:this.ha.history,options:{title:titleParts.join(" "),closeOnEscape:!0,fullHeight:!0}})}}),function(providers,loaderProvider){return providers.$compile.component("fSystemHaWidget",{templateUrl:__webpack_require__(1772),controller:SystemHaWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}}),loaderProvider.initModules([__webpack_require__(1773),__webpack_require__(151)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1772:function(module,exports){var path="/migadmin/ng/system/dashboard/f-system-ha-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{:: \'dashboard_widget_type::ha-status\' | lang }}\n    </widget-title>\n    <extra-controls>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div class="menu-toggle-area clickable" ng-click="$ctrl.toggleMenu($ctrl.popUpMenu, $event)">\n            <table class="table key-value">\n                <tbody ng-if="$ctrl.haEnabled">\n                    <tr>\n                        <td>{{:: \'mode\' | lang }}</td>\n                        <td>{{ $ctrl.ha.mode | lang }}</td>\n                    </tr>\n                    <tr>\n                        <td>{{:: \'group\' | lang }}</td>\n                        <td>{{ $ctrl.ha.group }}</td>\n                    </tr>\n                    <tr ng-repeat="vc in $ctrl.ha.cluster.master.vclusters" ng-if="$ctrl.ha.cluster.master.secondaryVCluster">\n                        <td>\n                            {{:: \'Virtual cluster {ID}\' | lang:[$index + 1] }}\n                        </td>\n                        <td>\n                            <div ng-repeat="vd in vc.vdoms">\n                                <f-object-formatted mkey="{{::vd.name}}" datasource="availableVdoms"></f-object-formatted>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>{{:: \'ha_master\' | lang }}</td>\n                        <td>\n                            <f-system-ha-widget-tooltip cluster-node="$ctrl.ha.cluster.master">\n                            </f-system-ha-widget-tooltip>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.ha.cluster.slaves.length" ng-repeat="node in $ctrl.ha.cluster.slaves">\n                        <td>\n                            {{:: \'ha_slave\' | lang }}\n                        </td>\n                        <td>\n                            <f-system-ha-widget-tooltip\n                                cluster-node="node">\n                            </f-system-ha-widget-tooltip>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>{{:: \'field_uptime\' | lang }}</td>\n                        <td>{{ $ctrl.ha.uptime * 1000 | elapsedTime: \'short\' }}</td>\n                    </tr>\n                    <tr>\n                        <td>{{:: \'State Changed\' | lang }}</td>\n                        <td f-tip-target>\n                            <span>{{ $ctrl.ha.lastChange * 1000 | elapsedTime: \'short\' }}</span>\n                            <div f-tip ng-if="$ctrl.ha.history.history[0]">\n                                {{ $ctrl.getRelativeDateStateChanged() }} {{ $ctrl.ha.history.history[0].event }}\n                            </div></td>\n                    </tr>\n                </tbody>\n                <tbody ng-if="!$ctrl.haEnabled">\n                    <tr>\n                        <td>{{:: \'ha_mode\' | lang }}</td>\n                        <td>{{:: \'ha_standalone\' | lang }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu">\n    <div f-menu-item-button click="$ctrl.toHaSetting()" ng-if="$ctrl.isCurrentFortigate()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{:: \'Configure settings in System > HA\' | lang }}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.showHaHistory()" ng-if="$ctrl.ha.history.history[0]">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{:: \'Show HA historical events\' | lang }}</span>\n    </div>\n</div>\n')}]),module.exports=path},1773:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return function(providers){providers.$compile.component("fSystemHaWidgetTooltip",{templateUrl:__webpack_require__(1774),controller:function(){},bindings:{widgetModel:"<",node:"<clusterNode"}})}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1774:function(module,exports){var path="/migadmin/ng/system/dashboard/f-system-ha-widget-tooltip.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,"<div class=\"tooltip-hint\" f-tip-target\n        ng-class=\"$ctrl.node.severityLevel && ['severity-message', $ctrl.node.severityLevel, 'flush-left']\">\n    <f-icon class=\"{{ $ctrl.node.icon }}\"></f-icon>\n    <span>{{ $ctrl.node.hostname }}</span>\n    <div f-tip>\n        <table class=\"table key-value\">\n            <tbody>\n                <tr>\n                    <td>{{:: 'Status' | lang }}</td>\n                    <td>\n                        <f-icon class=\"{{ $ctrl.node.icon }}\"></f-icon>\n                        <span ng-show=\"$ctrl.node.checksumUnsynced\">\n                            {{:: 'Not Synchronized' | lang }}\n                        </span>\n                        <span ng-show=\"!$ctrl.node.checksumUnsynced\">\n                            {{:: 'Synchronized' | lang }}\n                        </span>\n                    </td>\n                </tr>\n                <tr>\n                    <td>{{:: 'serial' | lang }}</td>\n                    <td>{{ $ctrl.node.serial }}</td>\n                </tr>\n                <tr>\n                    <td>{{:: 'checksum' | lang }}</td>\n                    <td>{{ $ctrl.node.checksum }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n")}]),module.exports=path},1779:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){const VIEW_TYPES={STATIC_DYNAMIC:"staticdynamic",POLICY:"policy"},ROUTER_VIEW_OPTION="router-view-type",VIEW_TYPE_PREFIX="routingMonitorViewType::",UNIQUE_DASHBOARD_CACHE_KEY="routing-monitor",values=obj=>Object.keys(obj).map(function(key){return obj[key]});class RoutingMonitor extends inject.Collectable{constructor(StaticDynamicRoutingMonitor,PolicyRoutingMonitor,lang,$q){super(),this._mainTitle=lang("dashboard_widget_type::routing").toString(),this.title=this._mainTitle,this.VIEW_SERVICES={[VIEW_TYPES.STATIC_DYNAMIC]:new StaticDynamicRoutingMonitor,[VIEW_TYPES.POLICY]:new PolicyRoutingMonitor},this.muTable={},this.viewSettings={},this.supportsCharts=!1,this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),this.updateTitle(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.viewSettings[ROUTER_VIEW_OPTION]=this.selectedView,values(this.VIEW_SERVICES).forEach(service=>service.init(this.viewSettings.fortigate)),this.loadingPromise.resolve(),await this.setupSettings(),this.loadSource()}}get VIEW_TYPES(){return VIEW_TYPES}get selectedView(){return this.viewSettings[ROUTER_VIEW_OPTION]||this.modelData[ROUTER_VIEW_OPTION]||VIEW_TYPES.STATIC_DYNAMIC}set selectedView(value){this.viewSettings[ROUTER_VIEW_OPTION]=value,this.setupSettings()}purgeStates(){values(this.VIEW_SERVICES).forEach(service=>{service.purgeState(this.viewSettings.fortigate),service.init(this.viewSettings.fortigate)})}setupSettings($INJECTABLE$,lang){return async()=>{const service=this.VIEW_SERVICES[this.selectedView],settings=service.getSettings(),fixedSource=await service.checkFixedSource();this.supportsCharts=fixedSource,Object.assign(this.muTable,{settings:settings,chartColumns:this.supportsCharts&&service.chartColumns}),this.chartTotalLabels=this.muTable.chartColumns.map(()=>lang("routes").toString())}}async loadSource({invalidateCache:invalidateCache}={}){const service=this.VIEW_SERVICES[this.selectedView],fixedSource=await service.checkFixedSource(),key=`${this._UNIQUE_DB_CACHE_KEY}_${fixedSource?"fixed":"stream"}`,source=await this.dashboard.getData(key,()=>service.getSource(fixedSource),{invalidateCache:invalidateCache});this.muTable.source=source}changeViewType(option){this.selectedView=option}updateTitle($INJECTABLE$,lang){return()=>{if(this.dashboardWidget&&!this.dashboardWidget.isZoomed){const viewLang=lang(`${VIEW_TYPE_PREFIX}${this.selectedView}`);this.title=`${viewLang} ${this._mainTitle}`}else this.title=this._mainTitle}}get chartsOnly(){return this.supportsCharts&&this.dashboardWidget&&!this.dashboardWidget.isZoomed}get _UNIQUE_DB_CACHE_KEY(){const fgtSerial=this.viewSettings.fortigate.serial;return`${UNIQUE_DASHBOARD_CACHE_KEY}.${this.selectedView}::${fgtSerial}`}}return function(providers,loader){return providers.$compile.component("fRoutingMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1780),controller:RoutingMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(1781),__webpack_require__(1789),__webpack_require__(534),__webpack_require__(535)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1780:function(module,exports){var path="/migadmin/ng/system/dashboard/f-routing-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    chart-columns="$ctrl.muTable.chartColumns"\n    charts-only="$ctrl.chartsOnly"\n    chart-total-labels="::$ctrl.chartTotalLabels"\n    dashboard-widget="$ctrl.dashboardWidget"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.loadSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    fortigate-change-pre-function="$ctrl.purgeStates()"\n    zoom-callback="$ctrl.updateTitle()"\n    loading-promise="::$ctrl.loadingPromise">\n    <mutable-widget-controls>\n        <f-radio-group ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.dashboardWidget.loading">\n            <input ng-repeat="option in ::$ctrl.VIEW_TYPES"\n                type="radio"\n                value="{{:: option }}"\n                ng-model="$ctrl.selectedView"\n                radio-label="{{:: \'routingMonitorViewType::\' + option | lang}}">\n        </f-radio-group>\n    </mutable-widget-controls>\n    <f-routing-monitor-menu\n        class="menu-bar-component"\n        menu="menu"\n        view-types="$ctrl.VIEW_TYPES"\n        view-services="$ctrl.VIEW_SERVICES"\n        fortigate="$ctrl.viewSettings.fortigate"\n        selected-view="$ctrl.selectedView"\n        change-view-type="$ctrl.changeViewType(viewType)">\n    </f-routing-monitor-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1781:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(41),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,slide,Notify)=>{const SDWAN_SERVICE_EDIT_URI="/ng/network/virtualwan/service/edit";const fRoutingMonitorMenu={controller:class extends inject.Collectable{constructor(state){super(),this.readOnly=state.readOnlyForPage}get createAddressEnabled(){if(!this.menu)return!1;const entry=this.menu.lastSelectedEntry,entries=this.menu.entries;return entries&&1===entries.length&&"kernel"!==entry.type&&"0.0.0.0/0"!==entry.ip_mask&&"::/0"!==entry.ip_mask&&"Null"!==entry.interface}get createAddressVisible(){return!!this.viewTypes&&!this.readOnly&&this.fortigate&&this.fortigate.isCurrent&&this.selectedView===this.viewTypes.STATIC_DYNAMIC}editableRoute($INJECTABLE$,state){return()=>{if(!this.menu)return!1;const entries=this.menu.entries;return!(!entries||1!==entries.length||this.selectedView!==this.viewTypes.POLICY&&!state.getListUrl("router",this.menu.lastSelectedEntry.type))}}canEditRoute($INJECTABLE$,state){return()=>{const route=this.menu.lastSelectedEntry;let editTable={path:"router",name:route&&route.type};return this.selectedView===this.viewTypes.POLICY&&route&&(route.is_vwl_route?(editTable.path="system",editTable.name="sdwan"):route.is_static_route?editTable.name="static":editTable.name=6===route.ip_verseion?"policy6":"policy"),state.adminHasWritePermissionForTable(editTable.path,editTable.name)}}editRoute($INJECTABLE$,$location,state,structure){return()=>{let url;const route=this.menu.lastSelectedEntry;url=this.selectedView===this.viewTypes.POLICY?route.is_vwl_route?`${SDWAN_SERVICE_EDIT_URI}/${route.vwl_rule.id}`:route.is_static_route?state.getListUrl("router","static"):6===route.ip_version?state.getListUrl("router","policy6"):state.getListUrl("router","policy"):state.getListUrl("router",route.type),$location.path(structure.ngURI(url))}}routeLookup($INJECTABLE$,routeLookup){return()=>{routeLookup.open({policy:this.viewServices.policy.checkFixedSource(),staticDynamic:this.viewServices.staticdynamic.checkFixedSource()},this.fortigate).then(data=>{let locateCondition,viewType="normal"===data.source?this.viewTypes.STATIC_DYNAMIC:this.viewTypes.POLICY;locateCondition=viewType===this.viewTypes.STATIC_DYNAMIC?entry=>entry.ip_mask===data.network&&entry.interface===data.interface&&entry.gateway===data.gateway:data.is_vwl_route?entry=>entry.is_vwl_route&&entry.vwl_rule.id===data.id&&entry.ip_version===data.ip_version:data.is_static_route?entry=>entry.is_static_route&&entry.static_route_id===data.id&&entry.ip_version===data.ip_version:entry=>entry.id===data.id&&entry.ip_version===data.ip_version,this.selectedView===viewType?this.menu.muTableInstance.locate(locateCondition):(this.menu.muTableInstance.locateNextRender(locateCondition),this.changeViewType({viewType:viewType}))})}}createAddress($INJECTABLE$,$httpParamSerializer,structure,lang){return()=>{const route=this.menu.lastSelectedEntry,params={addr:route.ip_mask};4===route.ip_version?(params.addr_cat="addr",params.intf=route.interface):params.addr_cat="addr_ipv6";const query=$httpParamSerializer(params);structure.openRouteAsSlide(`/ng/firewall/address/edit?${query}`).then(()=>{Notify.post(lang("Address created."),Notify.LEVEL.SUCCESS)})}}},templateUrl:__webpack_require__(1782),bindings:{menu:"<",viewTypes:"<",viewServices:"<",selectedView:"=",fortigate:"<",changeViewType:"&"}};return function(providers,loader){return providers.$compile.component("fRoutingMonitorMenu",fRoutingMonitorMenu),loader.initModules([__webpack_require__(534),__webpack_require__(535)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1782:function(module,exports){var path="/migadmin/ng/system/dashboard/routing-monitor/f-routing-monitor-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    <div f-menu-item-button click="$ctrl.routeLookup()" ng-if="$ctrl.menu.menuBar">\n        <f-icon class="fa-search"></f-icon>\n        <span f-lang="Route Lookup"></span>\n    </div>\n    <div f-menu-item-edit\n        ng-if="$ctrl.fortigate.isCurrent"\n        enabled="$ctrl.editableRoute()"\n        view-only="!$ctrl.canEditRoute()"\n        action="$ctrl.editRoute()">\n    </div>\n    <div f-menu-item-button\n        ng-if="$ctrl.createAddressVisible"\n        enabled="$ctrl.createAddressEnabled"\n        click="$ctrl.createAddress()">\n        <f-icon class="fa-plus-circle"></f-icon>\n        <span f-lang="Create Address"></span>\n    </div>\n</div>\n<div class="center-menu-items" ng-if="$ctrl.menu.menuBar">\n    <f-mutable-search\n        ng-if="$ctrl.menu.muTableInstance.getSettings().fixedSource">\n    </f-mutable-search>\n</div>\n')}]),module.exports=path},1783:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(27),__webpack_require__(28)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,notify,fPatterns){const LOOKUP_API_STATIC_DYNAMIC="/api/v2/monitor/router/lookup",LOOKUP_API_POLICY="/api/v2/monitor/router/lookup-policy",ROUTE_TABLE={NORMAL:"normal",POLICY:"policy"};function RouteLookup($scope,injector,state){injector.injectMarked(this,{$scope:$scope}),this.protocolOptions=[{label:"tcp",value:6},{label:"udp",value:17},{label:"sctp",value:132},{label:"Specify",value:1}],this.ipv6Enabled=state.featureEnabled("gui-ipv6"),this.inputPatterns={fqdn_pattern:[fPatterns.commonRegExp.FQDN,fPatterns.commonRegExp.IP_HOST,fPatterns.commonRegExp.IP6_HOST]},this.validationMessages={fqdn_pattern:"Invalid FQDN or IP address"},this.sourceCheck={[ROUTE_TABLE.NORMAL]:this.routeSourceCheck.staticDynamic,[ROUTE_TABLE.POLICY]:this.routeSourceCheck.policy},this._setupIntfOmniselect(),this._loadDefaults()}return RouteLookup.prototype._loadDefaults=function(){this.lookup={ipv6:!1,destination:"",destinationPort:"",source:"",interface:""},this.lookup.protocol=this.protocolOptions[0]},RouteLookup.prototype._setupIntfOmniselect=function(){this.dsource=this.fortigate.getOmniselectProxySourceID("firewallInterfaces"),this.interfaceOmniselect={sources:this.dsource,singleSelect:!0,preProcessSelected:!0,filterFunction:function(entry){return entry.valid_in_policy&&!entry.is_virtual_wire_pair_member&&"any"!==entry.name&&!entry.is_sdwan_zone&&!entry.is_zone}}},RouteLookup.prototype.specifyProtocol=function(){return"Specify"===this.lookup.protocol.label},RouteLookup.prototype.submit=inject.mark(function($scope,$http){const lookup=({params:params,url:url})=>$http.get(this.fortigate.createCSFURI(url),{params:params}).then(response=>response.data.results),postError=error=>{this.loading=!1,this.lookupResult={success:!1,queryAddress:this.lookup.destination},notify.post(error,notify.LEVEL.ERROR)},showResult=({result:result,source:source})=>result.success?(result.source=source,result.ip_version=this.lookup.ipv6?6:4,this.sourceCheck[source].then(fixedSource=>{fixedSource?this.slideController.slide.done(result):this.lookupResult=result}),!0):(source===ROUTE_TABLE.NORMAL&&(this.lookupResult={success:!1,queryAddress:this.lookup.destination}),!1);return async()=>{if(this.form.$invalid)return void $scope.$broadcast("validation-msg_show");const requiredParams={ipv6:this.lookup.ipv6,destination:this.lookup.destination},optionalParams={destination_port:this.lookup.destinationPort?this.lookup.destinationPort:0,source:this.lookup.source,protocol_number:this.lookup.protocol.value,interface_name:this.lookup.interface.q_origin_key||this.lookup.interface};let policyResp;this.loading=!0;try{policyResp=await(()=>{const paramsPolicy=Object.assign({},requiredParams,optionalParams);return lookup({url:LOOKUP_API_POLICY,params:paramsPolicy})})()}catch(e){}finally{if(policyResp&&!showResult({result:policyResp,source:ROUTE_TABLE.POLICY})||!policyResp)try{const normalResp=await(()=>lookup({url:LOOKUP_API_STATIC_DYNAMIC,params:requiredParams}))();showResult({result:normalResp,source:ROUTE_TABLE.NORMAL})}catch(e){postError(e)}this.loading=!1}}}),RouteLookup.prototype.close=function(){this.slideController.slide.close()},function(providers,loaderProvider){return providers.$compile.component("fRouteLookup",{controller:RouteLookup,templateUrl:__webpack_require__(1784),bindings:{routeSourceCheck:"<",fortigate:"<"},require:{slideController:"^fSlideContainer"}}),loaderProvider.initModules([__webpack_require__(1785)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1784:function(module,exports){var path="/migadmin/ng/system/dashboard/routing-monitor/services/route_lookup/f-route-lookup.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dialog submit="$ctrl.submit()" form="$ctrl.form" hide-title="::true">\n    <dialog-content>\n        <section>\n            <f-field>\n                <field-label>\n                    {{ ::\'FortiGate\' | lang }}\n                </field-label>\n                <field-value>\n                        <f-omniselect-entry entry="::{\n                            q_origin_key: $ctrl.fortigate.serial,\n                            datasource: \'csfFortiGates\'}"></f-omniselect-entry>\n                </field-value>\n            </f-field>\n            <f-field ng-if="$ctrl.ipv6Enabled">\n                <field-label>{{ ::\'IPv6\' | lang }}</field-label>\n                <field-value>\n                    <input type="checkbox" class="toggle-switch" id="ipv6" ng-model="$ctrl.lookup.ipv6">\n                    <label for="ipv6"></label>\n                </field-value>\n            </f-field>\n            <f-field label-for="lookup_dst" error-messages="$ctrl.validationMessages">\n                <field-label>{{ ::\'Destination\' | lang }}</field-label>\n                <field-value>\n                    <input id="dst" ng-model="$ctrl.lookup.destination" required="required"\n                    f-patterns="$ctrl.inputPatterns"\n                    placeholder="{{ ::\'IP or FQDN\' | lang }}">\n                    <div class="validation-container"></div>\n                </field-value>\n            </f-field>\n            <f-field label-for="lookup_dstPort">\n                <field-label>{{ ::\'Destination Port\' | lang }}</field-label>\n                <field-value>\n                    <input id="lookup_dstPort" ng-model="$ctrl.lookup.destinationPort" type="number" min="1" max="65535" placeholder="1-65535">\n                </field-value>\n            </f-field>\n            <f-field label-for="lookup_src" error-messages="$ctrl.validationMessages">\n                <field-label>{{ ::\'source\' | lang }}</field-label>\n                <field-value>\n                    <input id="lookup_src" ng-model="$ctrl.lookup.source"\n                    f-patterns="$ctrl.inputPatterns"\n                    placeholder="{{ ::\'IP or FQDN\' | lang }}">\n                    <div class="validation-container"></div>\n                </field-value>\n            </f-field>\n            <f-field label-for="lookup_protocol">\n                <field-label>{{ ::\'protocol\' | lang }}</field-label>\n                <field-value>\n                    <select id="lookup_protocol" ng-options="protocol.label|lang for protocol in $ctrl.protocolOptions"\n                    ng-model="$ctrl.lookup.protocol"></select>\n                </field-value>\n            </f-field>\n            <f-field label-for="lookup_protocol_number" ng-show="$ctrl.specifyProtocol()">\n                <field-label>{{ ::\'Protocol Number\' | lang }}</field-label>\n                <field-value>\n                    <input id="lookup_protocol_number" type="number" ng-model="$ctrl.lookup.protocol.value" min="1" max="255">\n                </field-value>\n            </f-field>\n            <f-field label-for="interface">\n                <field-label>{{ ::\'sintf\' | lang }}</field-label>\n                <field-value>\n                    <div id="interface" f-omniselect="$ctrl.interfaceOmniselect" ng-model="$ctrl.lookup.interface"></div>\n                </field-value>\n            </f-field>\n        </section>\n        <f-route-lookup-result route-info="$ctrl.lookupResult"\n            fortigate="$ctrl.fortigate"></f-route-lookup-result>\n    </dialog-content>\n    <dialog-footer>\n        <button type="button" class="primary"\n            ng-click="$ctrl.submit()"\n            ng-disabled="$ctrl.loading">\n            <f-icon class="fa-loading" ng-show="$ctrl.loading"></f-icon>\n            <span f-lang="Search"></span>\n        </button>\n        <button type="button"\n            ng-click="$ctrl.close()" f-lang="close"></button>\n    </dialog-footer>\n</f-dialog>\n')}]),module.exports=path},1785:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){const PROUTE_MONITOR_API="/api/v2/monitor/router/policy",ROUTE_SOURCE={STATIC_DYNAMIC:"normal",POLICY:"policy"},MATCH_FOUND_MSG={[ROUTE_SOURCE.STATIC_DYNAMIC]:"Matches Static/Dynamic Route",[ROUTE_SOURCE.POLICY]:"Matches {IPVERSION} {ORIGIN} {ID}"},ADDR_CONFIG_TYPE={SOURCE:"srcaddr",DEST:"dstaddr"},PROTOCOL_VALUE_MAP={0:"any",6:"tcp",17:"udp",132:"sctp"},PROP_TYPES={STRING:"string",OMNI:"omniselect",ADDR_COLLECTION:"address_collection",OMNI_ARRAY:"omniselect_array"};class RouteLookupResult extends inject.Collectable{constructor(){super()}$onInit($INJECTABLE$,$scope){return()=>{$scope.$watch("$ctrl.routeInfo",newRouteInfo=>{newRouteInfo&&this._setupRouteInfo()})}}get PROP_TYPES(){return PROP_TYPES}_setupRouteInfo($INJECTABLE$,lang){return async()=>{this.success=this.routeInfo.success,this.routeInfo.source===ROUTE_SOURCE.STATIC_DYNAMIC?(this.route=this.routeInfo,this.routeProperties=this._setupStaticDynamicRouteInfoProps()):await this._formatPolicyRouteInfo();const params=[];this.route.source===ROUTE_SOURCE.POLICY&&(params.push(4===this.route.ip_version?"IPv4":"IPv6"),this.route.is_vwl_route?params.push(lang("vwlid").toString()):this.route.is_static_route?params.push(lang("Static Route").toString()):params.push(lang("Policy Route").toString()),params.push(this.route.id)),this.message=lang(MATCH_FOUND_MSG[this.routeInfo.source],params)}}_setupStaticDynamicRouteInfoProps(){const interfaceDS=this.fortigate.getOmniselectProxySourceID("firewallInterfaces");return[{key:"gateway",langKey:"gateway",type:PROP_TYPES.STRING},{key:"network",langKey:"Network",type:PROP_TYPES.STRING},{key:"interface",langKey:"Interface",type:PROP_TYPES.OMNI,datasource:interfaceDS}]}_setupPolicyRouteInfoProps(){const interfaceDS=this.fortigate.getOmniselectProxySourceID("firewallInterfaces");return[{key:"gateway",langKey:"gateway",type:PROP_TYPES.STRING},{key:ADDR_CONFIG_TYPE.SOURCE,langKey:"Source",type:PROP_TYPES.ADDR_COLLECTION},{key:"inInterfaces",langKey:"in-interface",type:PROP_TYPES.OMNI_ARRAY,datasource:interfaceDS},{key:ADDR_CONFIG_TYPE.DEST,langKey:"Destination",type:PROP_TYPES.ADDR_COLLECTION},{key:"outInterfaces",langKey:"out-interface",type:PROP_TYPES.OMNI_ARRAY,datasource:interfaceDS},{key:"protocol",langKey:"Protocol",type:PROP_TYPES.STRING}]}_formatPolicyRouteInfo($INJECTABLE$,$http,lang){const requestPolicyRouteInfoFor=entry=>{let locateCondition,url=this.fortigate.createCSFURI(`${PROUTE_MONITOR_API}${6===this.routeInfo.ip_version?"6":""}`);return locateCondition=entry.is_vwl_route?data=>data.is_vwl_route&&data.vwl_rule.id===entry.id:entry.is_static_route?data=>data.is_static_route&&data.static_route_id===entry.id:data=>data.id===entry.id,$http.get(url,{csfProxy:!0}).then(response=>response.data.results.find(locateCondition))},formatAddressConfig=function(type,ip_version,entry){return{type:type,ip_version:ip_version,is_vwl_route:entry.is_vwl_route,is_static_route:entry.is_static_route}},formatAddressEntry=function(type,entry){return{id:entry.id,vwl_rule:entry.vwl_rule,ip_address:type===ADDR_CONFIG_TYPE.SOURCE?entry.srcaddr:entry.dstaddr,wildcard:type===ADDR_CONFIG_TYPE.SOURCE?entry.src_wildcard:entry.dst_wildcard,static_route_id:entry.static_route_id}};return()=>{const result=Object.assign({},this.routeInfo);return requestPolicyRouteInfoFor(result).then(response=>{response&&(result.protocol=PROTOCOL_VALUE_MAP[response.protocol]?lang(PROTOCOL_VALUE_MAP[response.protocol]):response.protocol,"object"==typeof response.gateway?result.gateway=Object.keys(response.gateway).map(key=>response.gateway[key])[0]:result.gateway=response.gateway,6===result.ip_version?(result.outInterfaces=response.dstintf,result.inInterfaces=response.srcintf):(result.outInterfaces=response.dst_interfaces,result.inInterfaces=response.src_interfaces),result[ADDR_CONFIG_TYPE.SOURCE]={entry:formatAddressEntry(ADDR_CONFIG_TYPE.SOURCE,response),config:formatAddressConfig(ADDR_CONFIG_TYPE.SOURCE,result.ip_version,response)},result[ADDR_CONFIG_TYPE.DEST]={entry:formatAddressEntry(ADDR_CONFIG_TYPE.DEST,response),config:formatAddressConfig(ADDR_CONFIG_TYPE.DEST,result.ip_version,response)},this.route=result,this.routeProperties=this._setupPolicyRouteInfoProps())})}}}return(providers,loaderProvider)=>(providers.$compile.component("fRouteLookupResult",{controller:RouteLookupResult,bindings:{routeInfo:"<",fortigate:"<"},templateUrl:__webpack_require__(1786)}),loaderProvider.initModules([__webpack_require__(1787)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1786:function(module,exports){var path="/migadmin/ng/system/dashboard/routing-monitor/services/route_lookup/f-route-lookup-result.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<section ng-if="$ctrl.routeInfo">\n    <div class="section-title">\n        <h2>{{ ::\'result\' | lang }}</h2>\n    </div>\n    <div ng-if="$ctrl.success">\n        <div class="success-message">\n            <f-icon class="fa-success"></f-icon>\n            <div class="message-content">\n                {{ $ctrl.message }}\n            </div>\n        </div>\n        <section>\n            <f-field ng-repeat="prop in $ctrl.routeProperties">\n                <field-label>\n                    {{ ::prop.langKey | lang }}\n                </field-label>\n                <field-value ng-if="prop.type === $ctrl.PROP_TYPES.OMNI">\n                    <span>\n                        <f-omniselect-entry entry="{\n                            q_origin_key: $ctrl.route[prop.key],\n                            datasource: prop.datasource\n                        }"></f-omniselect-entry>\n                    </span>\n                </field-value>\n                <field-value ng-if="prop.type === $ctrl.PROP_TYPES.STRING">\n                    <span> {{ $ctrl.route[prop.key] }} </span>\n                </field-value>\n                <field-value ng-if="prop.type === $ctrl.PROP_TYPES.OMNI_ARRAY">\n                    <span>\n                        <f-omniselect-entry ng-repeat="entry in $ctrl.route[prop.key]" \n                            entry="{q_origin_key: entry,datasource: prop.datasource}">\n                        </f-omniselect-entry>\n                    </span>\n                </field-value>\n                <field-value ng-if="prop.type === $ctrl.PROP_TYPES.ADDR_COLLECTION">\n                    <span>\n                        <f-policy-route-addresses address-data="$ctrl.route[prop.key]">\n                        </f-policy-route-addresses>\n                    </span>\n                </field-value>\n            </f-field>\n        </section>\n    </div>\n    <div ng-if="!$ctrl.success">\n        <div class="info-message">\n            <f-icon class="fa-info-circle"></f-icon>\n            <div class="message-content">\n                {{ \'pol_lookup_no_route\' | lang:[$ctrl.routeInfo.queryAddress] }}\n            </div>\n        </div>\n    </div>\n</section>\n\n')}]),module.exports=path},1787:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26),__webpack_require__(8),__webpack_require__(36)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,inject,ftnt_shared,fSelect){const CONFIG_TYPE={SOURCE:"srcaddr",DEST:"dstaddr"},SD_WAN_ADDR_SOURCE={[CONFIG_TYPE.SOURCE]:["groups","src","users"],[CONFIG_TYPE.DEST]:["application","dst","internet-service-ctrl-group","internet-service-custom","internet-service-custom-group","internet-service-group","internet-service-id"]},STATIC_ROUTE_DSTADDR_SOURCE=["internet-service","internet-service-custom"],DS={STATIC:"router.static",POLICY:"router.policy",VWL:"sdWanService",POLICY6:"router.policy6"};class PolicyRouteAddresses extends inject.Collectable{constructor(state,csfTopology){super(),this.csfPath=csfTopology.selectedFortigate.path,this.IPV6_ENABLED=state.featureEnabled("gui-ipv6"),this.omniselectMap={}}$onInit(){this.entry=this.addressData.entry,this.config=this.addressData.config;const datasources=[];this.config.is_vwl_route&&datasources.push(DS.VWL),this.config.is_static_route&&datasources.push(DS.STATIC),this.config.is_vwl_route||this.config.is_static_route||(datasources.push(DS.POLICY),this.IPV6_ENABLED&&datasources.push(DS.POLICY6)),this._getOmniselectMap(datasources).then(()=>{let temp=this._formatAddressesOmniselectEntries();this.omniselectAddressEntries=Array.isArray(temp)?temp.filter(entry=>entry):[temp]})}isAddressObject(addr){return"object"==typeof addr}_getOmniselectMap($INJECTABLE$,$q){return datasources=>{const promises={};return datasources.forEach(source=>{const sourceID=fSelect.makeCSFProxySourceID(source,this.csfPath);promises[source]=ftnt_shared.Omniselect.getSourceData(sourceID)}),$q.all(promises).then(res=>(this.destroyed||Object.keys(res).forEach(key=>{this.omniselectMap[key]=res[key].mapping}),this.omniselectMap))}}_formatAddressesOmniselectEntries($INJECTABLE$,state){const csfDatasource=entry=>(entry&&entry.datasource&&(entry.datasource=fSelect.makeCSFProxySourceID(entry.datasource,this.csfPath)),entry),sdWanServiceValues=(sources,id)=>{const service=this.omniselectMap.sdWanService[id];return[].concat.apply([],sources.map(source=>service[source]))};return()=>{if(6===this.config.ip_version)return this.entry.ip_address;if(this.config.is_vwl_route&&this.entry.vwl_rule){let apps=[];if(this.config.type===CONFIG_TYPE.DEST){const serviceId=this.entry.vwl_rule.id,service=this.omniselectMap.sdWanService[serviceId];state.featureEnabled("gui-application-control")&&(apps=(service["internet-service-ctrl"]||[]).map(app=>{const datasource=fSelect.makeCSFProxySourceID("application.name",this.csfPath);return angular.extend(app,{datasource:datasource})}))}const sources=sdWanServiceValues(SD_WAN_ADDR_SOURCE[this.config.type],this.entry.vwl_rule.id).map(csfDatasource);return[...apps,...sources]}if(this.config.is_static_route){if(this.config.type===CONFIG_TYPE.SOURCE){return{q_origin_key:"all",datasource:fSelect.makeCSFProxySourceID("firewall.address",this.csfPath)}}{const id=this.entry.static_route_id,staticRoute=this.omniselectMap[DS.STATIC][id];return[].concat.apply([],STATIC_ROUTE_DSTADDR_SOURCE.map(key=>staticRoute[key]))}}const policy=this.omniselectMap[DS.POLICY][this.entry.id];if(this.entry.wildcard){let result=[...this.entry.wildcard];return policy[this.config.type]&&(result=[...result,...policy[this.config.type]]),result.map(csfDatasource)}return policy[this.config.type].map(csfDatasource)}}}return providers=>providers.$compile.component("fPolicyRouteAddresses",{controller:PolicyRouteAddresses,bindings:{addressData:"<"},templateUrl:__webpack_require__(1788)})}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1788:function(module,exports){var path="/migadmin/ng/system/dashboard/routing-monitor/services/route_lookup/f-policy-route-addresses.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div ng-repeat="addressEntry in $ctrl.omniselectAddressEntries">\n    <span ng-if="!$ctrl.isAddressObject(addressEntry)"> {{ addressEntry }} </span>\n    <f-omniselect-entry ng-if="$ctrl.isAddressObject(addressEntry)" entry="addressEntry">\n    </f-omniselect-entry>\n</div>\n')}]),module.exports=path},1789:function(module,exports,__webpack_require__){"use strict";const fDom=__webpack_require__(31),fDateTime=__webpack_require__(34),ftnt_shared=__webpack_require__(8),POLICY_ROUTE_COUNT_API="/api/v2/monitor/router/policy?count_only=true",POLICY6_ROUTE_COUNT_API="/api/v2/monitor/router/policy6?count_only=true",POLICY_ROUTE_API="/api/v2/monitor/router/policy",POLICY6_ROUTE_API="/api/v2/monitor/router/policy6",LAZY_LOADING_FALLBACK_LIMIT=5e4;function PolicyRoutingMonitorFactory(injector){return class extends injector.Collectable{init(fortigate){this.destroyed=!1,this.omniselectMap={},this.fortigate=fortigate,this.IPV6_ENABLED=fortigate.state.featureEnabled("gui-ipv6")}getSource($INJECTABLE$,$q,RoutingMonitorSource,FixedRoutingMonitorSource){return async fixedSource=>{this.state=this.fortigate.state;const options={route4Api:this.fortigate.createCSFURI(POLICY_ROUTE_API),route6Api:this.fortigate.createCSFURI(POLICY6_ROUTE_API),fetchCountFn:this._getCounts};return await this._getOmniselectMap(),fixedSource?new FixedRoutingMonitorSource(options):new RoutingMonitorSource(options)}}_getOmniselectMap($INJECTABLE$,$q){return()=>{const promises={};if(ftnt_shared.Omniselect.invalidateCache(),["router.policy","router.static","sdWanService"].forEach(source=>{const sourceID=this.fortigate.getOmniselectProxySourceID(source);promises[source]=ftnt_shared.Omniselect.getSourceData(sourceID)}),this.IPV6_ENABLED){const sourceID=this.fortigate.getOmniselectProxySourceID("router.policy6");promises["router.policy6"]=ftnt_shared.Omniselect.getSourceData(sourceID)}return $q.all(promises).then(res=>(this.destroyed||Object.keys(res).forEach(key=>{this.omniselectMap[key]=res[key].mapping}),this.omniselectMap))}}_getCounts($INJECTABLE$,$http,$q){return()=>{const promises={policy:$http.get(this.fortigate.createCSFURI(POLICY_ROUTE_COUNT_API))};if(this.IPV6_ENABLED){const uri=this.fortigate.createCSFURI(POLICY6_ROUTE_COUNT_API);promises.policy6=$http.get(uri)}return $q.all(promises).then(res=>({route4:res.policy.data.results.count,route6:this.IPV6_ENABLED?res.policy6.data.results.count:0}))}}getSettings($INJECTABLE$,lang){return()=>{const SD_WAN_SRCADDR_SOURCE=["groups","src","users"],SD_WAN_DSTADDR_SOURCE=["application","dst","internet-service-app-ctrl-group","internet-service-custom","internet-service-custom-group","internet-service-group","internet-service-name"],STATIC_ROUTE_DSTADDR_SOURCE=["internet-service","internet-service-custom"],sdWanServiceValues=(sources,id)=>{const service=this.omniselectMap.sdWanService[id];return[].concat.apply([],sources.map(source=>service[source]))},csfDatasource=entry=>entry&&entry.datasource?Object.assign({},entry,{datasource:this.fortigate.getOmniselectProxySourceID(entry.datasource)}):entry;return{id:"policyRouteMonitorList",defaultSectionColumn:this.IPV6_ENABLED&&"ip_version",defaultColumns:["srcintf","srcaddr","dstintf","dstaddr","gateway","protocol","action","ip_version","hit_count"],columns:[{id:"ip_version",langKey:"Type",hidden:!this.IPV6_ENABLED,cellValueFunction:(entry,column)=>4===entry[column.id]?lang("IPv4"):lang("IPv6")},{id:"srcintf",type:"omniselect",langKey:"from",cellValueFunction:(entry,column)=>(entry[column.id]||entry.src_interfaces||[]).map(name=>({q_origin_key:name,datasource:this.fortigate.getOmniselectProxySourceID("firewallInterfaces")}))},{id:"srcaddr",type:"omniselect",langKey:"Source",omniselectAllowFallback:!0,cellValueFunction:(entry,column)=>{if(6===entry.ip_version)return entry[column.id];if(entry.is_vwl_route&&entry.vwl_rule)return sdWanServiceValues(SD_WAN_SRCADDR_SOURCE,entry.vwl_rule.id).map(csfDatasource);if(entry.is_static_route)return{q_origin_key:"all",datasource:this.fortigate.getOmniselectProxySourceID("firewall.address")};const policy=this.omniselectMap["router.policy"][entry.id];return entry.src_wildcard?[entry.src_wildcard,...policy[column.id]].map(csfDatasource):policy[column.id].map(csfDatasource)}},{id:"dstintf",type:"omniselect",langKey:"to",cellValueFunction:(entry,column)=>(entry[column.id]||entry.dst_interfaces).map(name=>({q_origin_key:name,datasource:this.fortigate.getOmniselectProxySourceID("firewallInterfaces")}))},{id:"dstaddr",type:"omniselect",langKey:"Destination",omniselectAllowFallback:!0,cellValueFunction:(entry,column)=>{if(6===entry.ip_version)return entry[column.id];if(entry.is_vwl_route&&entry.vwl_rule){const serviceId=entry.vwl_rule.id,service=this.omniselectMap.sdWanService[serviceId];let apps=[];this.state.featureEnabled("gui-application-control")&&(apps=(service["internet-service-app-ctrl"]||[]).map(app=>{const datasource=this.fortigate.getOmniselectProxySourceID("application.name");return Object.assign({},app,{datasource:datasource,q_origin_key:app.q_origin_key.toString()})}));const sources=sdWanServiceValues(SD_WAN_DSTADDR_SOURCE,serviceId).map(csfDatasource);return[...apps,...sources]}if(entry.is_static_route){const id=entry.static_route_id,staticRoute=this.omniselectMap["router.static"][id];return[].concat.apply([],STATIC_ROUTE_DSTADDR_SOURCE.map(key=>staticRoute[key]))}const policy=this.omniselectMap["router.policy"][entry.id];return entry.dst_wildcard?[entry.dst_wildcard,...policy[column.id]].map(csfDatasource):policy[column.id].map(csfDatasource)}},{id:"gateway",type:"ip-collection",cellValueFunction:(entry,column)=>{const gateways=entry[column.id]||{};return Object.keys(gateways).map(intf=>gateways[intf])},collectionEntryFormatter:function(entry){const gateways=this.entry.gateway||{},gatewayIntfs=Object.keys(gateways),showPrefix=gatewayIntfs.length>1;let result=entry;return gatewayIntfs.some(intf=>{if(gateways[intf]===entry)return result=showPrefix?`${intf}: ${gateways[intf]}`:entry,!0}),result}},{id:"protocol",type:"standard",cellValueFunction:(entry,column)=>entry.protocol_name?lang(entry.protocol_name):entry[column.id]||lang("any")},{id:"action",type:"standard",cellValueFunction:(entry,column)=>{const action=6===entry.ip_version?"route":entry[column.id];return lang(action)},cellFormatter:(entry,column,value)=>{const icon="route"===(6===entry.ip_version?"route":entry[column.id])?"fa-enabled":"fa-blocked";return fDom.elem("span",null,{children:[fDom.elem("f-icon",{className:icon}),fDom.elem("span",{textContent:value})]})}},{id:"dst_ports",type:"collection",langKey:"Destination Ports",cellValueFunction:(entry,column)=>{let ports;return(ports=4===entry.ip_version?entry[column.id]||[]:entry.port?[entry.port]:[]).map(port=>`${port.from} - ${port.to}`)}},{id:"src_port",type:"standard",langKey:"Source Ports",cellValueFunction:(entry,column)=>{const port=entry[column.id];return port&&`${port.from} - ${port.to}`}},{id:"source",type:"standard",langKey:"Route Source",cellValueFunction:entry=>entry.is_vwl_route?lang("SD-WAN"):entry.is_static_route?lang("Static Route"):lang("User")},{id:"hit_count",type:"number",numberCompareBar:!0},{id:"last_used",type:"date",dateType:"fromNow",cellValueFunction:entry=>{if(entry.last_used)return fDateTime.fortiGateUTCToBrowserUTC(entry.last_used*fDateTime.S_TO_MS)}}],onRowRendered:function(row,entry){entry.enabled||row.classList.add("disabled")}}}}get chartColumns(){return["srcintf","action"]}purgeState(){this.destroyed=!0,Object.keys(this).forEach(key=>"destroyed"!==key&&delete this[key])}checkFixedSource(){return this._getCounts().then(res=>res.route4+res.route6<=LAZY_LOADING_FALLBACK_LIMIT)}}}module.exports=((providers,loaderProvider)=>(providers.$provide.factory("PolicyRoutingMonitor",PolicyRoutingMonitorFactory),loaderProvider.initModules([__webpack_require__(536),__webpack_require__(537)])))},1792:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(0),__webpack_require__(32)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,BUILD,formatters){var PAGE_URLS={VM_LICENSE:"/ng/system/vm/license"},STATUSES=BUILD.SYMBOLS,PLATFORM=BUILD.PLATFORM;function VmInformationWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.PLATFORM=PLATFORM}return VmInformationWidget.prototype.$onInit=inject.mark(function(state){return function(){this.loading=!0,this.isSVM=state.is_vmx_manager,this.hasSystemWritePermission=state.adminHasWritePermission(state.ACCESS_GROUP.SYSTEM),this.run()}}),VmInformationWidget.prototype.getSeverityStatusClass=function(){var severityClass="";if(!PLATFORM.HAVE_NOVMLICENSE&&this.vmInfo)switch(this.vmInfo.status){case STATUSES.LICENSE_STATUS_VM_EXPIRED:case STATUSES.LICENSE_STATUS_VM_EVAL_EXPIRED:case STATUSES.LICENSE_STATUS_VM_INVALID:severityClass="critical";break;case STATUSES.LICENSE_STATUS_VM_EVAL:case STATUSES.LICENSE_STATUS_VM_EXPIRES_SOON:case STATUSES.LICENSE_STATUS_VM_VALIDATION_OVERDUE:severityClass="high";break;default:severityClass=""}return severityClass},VmInformationWidget.prototype.run=inject.mark(function($scope,notificationRequests,$http){return function(){this.loading=!0,$http.get("/api/v2/monitor/system/vm-information").then(res=>{this.vmInfo=res.data.results}).then(()=>{if(PLATFORM.HAVE_NOVMLICENSE)this.processInfo(),this.loading=!1;else{const callback=licenses=>{licenses.vm&&Object.assign(this.vmInfo,licenses.vm),this.processInfo(),this.loading=!1};notificationRequests.watch({scope:$scope,requestType:"license",callback:callback,immediate:!0})}})}}),VmInformationWidget.prototype.processInfo=function(){var USAGE={cpu:null,mem:function(value){return formatters.binary_bytes(value,0)},vmx_instance:null};this.usage={},Object.keys(USAGE).forEach(function(key){var label,used=this.vmInfo[key+"_used"],max=this.vmInfo[key+"_max"],percentage=0,formatter=USAGE[key]||function(value){return value};null!=used&&(label=formatter(used),max&&(label+=" / "+formatter(max),percentage=used/max*100),this.usage[key]={subTitle:label,max:max,percentage:percentage})}.bind(this)),this.autoscaleStatus=this.vmInfo.autoscale_enabled?"enabled":"disabled",this.autoscaleRole=this.vmInfo.is_autoscale_master?"Master":"Slave",this.autoscaleSetSize=this.vmInfo.autoscale_set_size},VmInformationWidget.prototype.toggleMenu=function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})},VmInformationWidget.prototype.redirectTo=inject.mark(function($location,structure,state){return function(destination,vdom){var uri=structure.ngURI(PAGE_URLS[destination]);PAGE_URLS[destination].vdom&&state.vdom_mode?$location.path(uri).search("vdom",vdom||state.management_vdom):$location.path(uri)}}),function(providers,loaderProvider){return providers.$compile.component("fVmInformationWidget",{templateUrl:__webpack_require__(1793),controller:VmInformationWidget,bindings:{widgetModel:"<"}}),loaderProvider.initModules([__webpack_require__(532),__webpack_require__(533)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1793:function(module,exports){var path="/migadmin/ng/system/dashboard/f-vm-information-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel" loading="$ctrl.loading"\n    ng-class="$ctrl.getSeverityStatusClass()">\n    <widget-title>\n        {{::\'Virtual Machine\' | lang}}\n    </widget-title>\n    <widget-content ng-if="!$ctrl.loading">\n        <div class="menu-toggle-area clickable"\n            ng-if="!$ctrl.PLATFORM.HAVE_NOVMLICENSE"\n            ng-click="$ctrl.toggleMenu($ctrl.popUpMenu, $event)">\n            <div class="license-container" f-equal-width>\n                <f-license-license-item license="$ctrl.vmInfo"\n                    item-title="::$ctrl.vmInfo.closed_network ? \'{MODEL} License for Closed Network\' : \'{MODEL} License\'"\n                    item-title-params="[$ctrl.vmInfo.license_platform_name]"\n                    show-expiry="::true"\n                    skip-modifing-expiry-date="::true">\n                </f-license-license-item>\n            </div>\n            <div class="service-container">\n                <f-license-service-item license="$ctrl.usage.cpu"\n                    item-title="::\'License::vm_usage.cpu\'"\n                    use-progress-bar="::true">\n                </f-license-service-item>\n                <f-license-service-item license="$ctrl.usage.mem"\n                    item-title="::\'License::vm_usage.mem\'"\n                    use-progress-bar="::true">\n                </f-license-service-item>\n                <f-license-service-item license="$ctrl.usage.vmx_instance"\n                    item-title="::\'License::vm_usage.vmx_instance\'"\n                    ng-if="::$ctrl.isSVM" use-progress-bar="::true">\n                </f-license-service-item>\n            </div>\n        </div>\n        <div ng-if="$ctrl.PLATFORM.HAVE_NOVMLICENSE">\n            <table class="table key-value">\n                <tbody>\n                    <tr>\n                        <td>\n                            {{::\'License::vm_usage.cpu\' | lang}}\n                        </td>\n                        <td>\n                            {{::$ctrl.usage.cpu.subTitle}}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            {{::\'License::vm_usage.mem\' | lang}}\n                        </td>\n                        <td>\n                            {{::$ctrl.usage.mem.subTitle}}\n                        </td>\n                    </tr>\n                    <tr ng-if="::$ctrl.isSVM">\n                        <td>\n                            {{::\'License::vm_usage.vmx_instance\' | lang}}\n                        </td>\n                        <td>\n                            {{::$ctrl.usage.vmx_instance.subTitle}}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <div class="vm-autoscale" ng-if="$ctrl.PLATFORM.HAVE_AUTO_SCALE">\n            <div class="separator-line"></div>\n            <table class="table key-value">\n                <tbody>\n                    <tr>\n                        <td>\n                            {{::\'Auto Scaling\' | lang}}\n                        </td>\n                        <td>\n                            <f-icon class="fa-{{::$ctrl.autoscaleStatus}}">\n                            </f-icon>\n                            <span>\n                                {{::$ctrl.autoscaleStatus | lang}}\n                            </span>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.vmInfo.autoscale_enabled">\n                        <td>\n                            {{::\'Role\' | lang}}\n                        </td>\n                        <td>\n                            {{::$ctrl.autoscaleRole | lang}}\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.vmInfo.autoscale_enabled && $ctrl.vmInfo.is_autoscale_master">\n                        <td>\n                            {{::\'Group Size\' | lang}}\n                        </td>\n                        <td>\n                            {{::$ctrl.autoscaleSetSize}}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu">\n    <div f-menu-item-button click="$ctrl.redirectTo(\'VM_LICENSE\')"\n        enabled="::$ctrl.hasSystemWritePermission">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{:: \'FortiGate VM License\' | lang }}</span>\n    </div>\n</div>\n\n')}]),module.exports=path},1794:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(34)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,dateTime){var OPTION_STORAGE_PREFIX={TIME:"dashboard_time_option_",IP_VERSION:"dashboard_ip_version_option_"},getOptionStorageKey=function(dashboardId,widgetKey,optionType){return OPTION_STORAGE_PREFIX[optionType]+"dashboard-"+dashboardId+"_"+widgetKey};function SystemResourceUsage(injector){injector.injectMarked(this,{that:this}),this._watchingWidgets={},this._watchingFortigates={},this._fortigateWidgetsCount={},this.resources={},this._timeoutPromise=null,this._running=!1}return SystemResourceUsage.prototype={HOUR_IN_MS:1e3*Math.pow(60,2),TIME_PERIOD_IN_SEC:{"1-min":60,"10-min":600,"30-min":1800,"1-hour":6e3,"12-hour":72e3,"24-hour":144e3},TIME_OPTIONS:[{option:"1-min",name:"minute"},{option:"10-min",name:"10 minutes"},{option:"30-min",name:"30 minutes"},{option:"1-hour",name:"hour"},{option:"12-hour",name:"12 hours"},{option:"24-hour",name:"day"}],IP_VERSION_OPTIONS:[{option:"ipv4",name:"IPv4"},{option:"ipv6",name:"IPv6"},{option:"both",name:"IPv4 + IPv6"}],_poll:inject.mark(function($http,$timeout,state,widgetShared){return async function(){const params={};state.vdom_mode&&""!==state.current_vdom||(params.scope="global"),this._running=!0,$timeout.cancel(this._timeoutPromise),await Object.keys(this._watchingFortigates).map(serial=>{const url=this._watchingFortigates[serial].createCSFURI("/api/v2/monitor/system/resource/usage");return $http.get(url,{params:params}).then(response=>{this.resources[serial]=(resources=>{const adjustFn=dateTime.adjustBasedOnTZDevice;for(let type in resources)resources[type].forEach(element=>{for(let intervalID in element.historical){let interval=element.historical[intervalID];interval.end=adjustFn(interval.end),interval.start=adjustFn(interval.start),interval.values=interval.values.map(value=>[adjustFn(value[0]),value[1]])}});return resources})(response.data.results)})}),this._running&&(this._timeoutPromise=$timeout(this._poll.bind(this),widgetShared.REFRESH_INTERVAL.SHORT))}}),registerWatch:inject.mark(function(csfTopology){return async function(id,fortigate){await csfTopology.buildIfNecessary(),fortigate=fortigate||csfTopology.thisFortigate,this._watchingWidgets[id]&&this.unRegisterWatch(id),this._watchingWidgets[id]=fortigate.serial,this._watchingFortigates[fortigate.serial]=fortigate,this._fortigateWidgetsCount[fortigate.serial]?this._fortigateWidgetsCount[fortigate.serial]+=1:this._fortigateWidgetsCount[fortigate.serial]=1,this._running||this._poll()}}),unRegisterWatch:inject.mark(function($timeout){return function(id){const fgtSerial=this._watchingWidgets[id];fgtSerial&&(delete this._watchingWidgets[id],this._fortigateWidgetsCount[fgtSerial]--,this._fortigateWidgetsCount[fgtSerial]<=0&&(delete this._watchingFortigates[fgtSerial],delete this._fortigateWidgetsCount[fgtSerial]),Object.keys(this._watchingWidgets).length||(this._running=!1,$timeout.cancel(this._timeoutPromise)))}}),getTimeOptions:inject.mark(function(that){return function(){return that.TIME_OPTIONS}}),getTimeOptionForWidget:inject.mark(function(that,persistentStorage,$routeParams){return function(widgetKey){return persistentStorage.get(getOptionStorageKey($routeParams.id,widgetKey,"TIME"))||that.TIME_OPTIONS[0]}}),saveOptionForWidget:inject.mark(function(persistentStorage,$routeParams){return function(widgetKey,option,optionType){persistentStorage.put(getOptionStorageKey($routeParams.id,widgetKey,optionType),option)}}),getIpVersionOptions:inject.mark(function(that,state){return function(){return state.featureEnabled("gui-ipv6")?that.IP_VERSION_OPTIONS:[]}}),getIpVersionOptionForWidget:inject.mark(function(that,persistentStorage,$routeParams,state){return function(widgetKey){return state.featureEnabled("gui-ipv6")?persistentStorage.get(getOptionStorageKey($routeParams.id,widgetKey,"IP_VERSION"))||that.IP_VERSION_OPTIONS[2]:that.IP_VERSION_OPTIONS[0]}}),plotFormatters:{xAxisConfig:function(widgetModel,dataStart,dataEnd,defaultSettings){var config={mode:"time",timezone:"browser",min:dataStart-100,max:dataEnd+100};return widgetModel.getWidth()<2&&!defaultSettings&&(config.ticks=2),config}},getResource:inject.mark(function(csfTopology){return function(resource,fortigate){const fgt=fortigate||csfTopology.thisFortigate;return fgt&&this.resources[fgt.serial]&&this.resources[fgt.serial][resource]}}),getResourceData:function(type,timePeriod,ipVersion,fortigate){const resource4=this.getResource(type,fortigate),current="current"===timePeriod;let resource6,values,ipv6Values;return resource4?ipVersion&&"ipv4"!==ipVersion.option?(resource6=this.getResource(`${type}6`,fortigate),"ipv6"===ipVersion.option?current?resource6[0].current:resource6[0].historical[timePeriod]:current?resource4[0].current+resource6[0].current:(ipv6Values=resource6[0].historical[timePeriod].values,{values:values=resource4[0].historical[timePeriod].values.map(function(value,index){var ipv6Value=ipv6Values[index]&&ipv6Values[index][1]||0;return[value[0],value[1]+ipv6Value]}),start:resource4[0].historical[timePeriod].start,end:resource4[0].historical[timePeriod].end})):current?resource4[0].current:resource4[0].historical[timePeriod]:null}},function(providers){providers.$provide.service("systemResourceUsage",SystemResourceUsage)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1795:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(ftnt_shared,inject){const VULNERABILITY_LEVELS=["critical","high","medium","low","info"];function VulnerabilitySummaryData(injector){injector.injectMarked(this,{that:this})}return VulnerabilitySummaryData.prototype.getHostScanSummary=inject.mark(($q,$http,csfTopology)=>(function(){var result={deviceSources:{},severity:{},vulncat:{}};return VULNERABILITY_LEVELS.forEach(function(level){result.severity[level]=0}),result.vulnerable=result.secured=result.unscanned=0,csfTopology.buildIfNecessary().then(()=>{let detectedDevicesPromises=csfTopology.fortigates.map(fortigate=>$http.get(fortigate.createCSFURI("/api/v2/monitor/user/detected-device"),{params:{with_endpoint:1}}).then(response=>{let devices=response.data.results;return result.deviceSources[fortigate.serial]=devices,devices.forEach(device=>{if(device.is_online){var endpoint=device.is_forticlient_endpoint;endpoint&&!device.vuln_count?result.secured++:endpoint&&device.vuln_count?(result.vulnerable++,VULNERABILITY_LEVELS.forEach(function(level){result.severity[level]+=device["vuln_count_"+level]})):result.unscanned++}}),devices}));return $q.all(detectedDevicesPromises).then(()=>result)})})),function(providers){providers.$provide.service("vulnerabilitySummaryData",VulnerabilitySummaryData)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1796:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function WidgetShared(injector){injector.injectMarked(this)}return WidgetShared.prototype.REFRESH_INTERVAL={SHORT:3e3,NORMAL:15e3,LONG:3e4},WidgetShared.prototype.RELATIVE_WIDTH_LIMIT={SMALL:1.5},WidgetShared.prototype.getIPLocation=inject.mark(function($http){function extractName(object){var name;return object&&object.names&&object.names.en&&(name=object.names.en),name}return function(queryIP){return $http.post("/api/v2/monitor/geoip/geoip-query",{ip_addresses:[queryIP]}).then(function(response){var items=[],entry=response.data.results[queryIP];return entry&&entry.location&&(items.push(entry.location.city),entry.location.subdivisions&&(items=items.concat(entry.location.subdivisions)),items.push(entry.location.country)),{countryISOCode:entry&&entry.location.country&&entry.location.country.iso_code,location:items.map(extractName).filter(function(value){return value}).join(", ")}})}}),function(providers){providers.$provide.service("widgetShared",WidgetShared)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1809:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(31),__webpack_require__(32),__webpack_require__(34),__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,dom,fFormatters,fDatetime,ftnt_shared)=>{const{Tooltip:Tooltip,colors:colors}=ftnt_shared,SEVERITY_LEVELS={LOW:"low",MEDIUM:"medium",HIGH:"high"};function lowLabelFn(unit){return`( <${this.range[1]}${unit} )`}function mediumLabelFn(unit){return`( ${this.range[0]}${unit} - ${this.range[1]}${unit} )`}function highLabelFn(unit){return`( >${this.range[0]}${unit} )`}const PACKET_LOSS_MAP={[SEVERITY_LEVELS.LOW]:{range:[0,10],get label(){return lowLabelFn.call(this,"%")}},[SEVERITY_LEVELS.MEDIUM]:{range:[10,40],get label(){return mediumLabelFn.call(this,"%")}},[SEVERITY_LEVELS.HIGH]:{range:[40,100],get label(){return highLabelFn.call(this,"%")}}},JITTER_MAP={[SEVERITY_LEVELS.LOW]:{range:[0,30],get label(){return lowLabelFn.call(this,"ms")}},[SEVERITY_LEVELS.MEDIUM]:{range:[30,60],get label(){return mediumLabelFn.call(this,"ms")}},[SEVERITY_LEVELS.HIGH]:{range:[60,Number.MAX_SAFE_INTEGER],get label(){return highLabelFn.call(this,"ms")}}},LATENCY_MAP={[SEVERITY_LEVELS.LOW]:{range:[0,150],get label(){return lowLabelFn.call(this,"ms")}},[SEVERITY_LEVELS.MEDIUM]:{range:[150,500],get label(){return mediumLabelFn.call(this,"ms")}},[SEVERITY_LEVELS.HIGH]:{range:[500,Number.MAX_SAFE_INTEGER],get label(){return highLabelFn.call(this,"ms")}}},getLevelFromRangeMap=(map,value)=>Object.keys(map).find(level=>value>=map[level].range[0]&&value<=map[level].range[1]);class VirtualWanMonitor extends inject.Collectable{constructor(lang,$q){super(),this.title=lang("dashboard_widget_type::virtual-wan").toString(),this.chartColumns=["packet_loss_level","latency_level","jitter_level"],this.muTable={},this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.muTable.settings=this.getSettings(),await this.loadSource()}}async loadSource({invalidateCache:invalidateCache}={}){this.muTable.source=await this.getSource({invalidateCache:invalidateCache})}getSource($INJECTABLE$,VirtualWanMonitorSource){return async({invalidateCache:invalidateCache}={})=>{const key=`VirtualwanMonitor::${this.viewSettings.fortigate.serial}`;return await this.dashboard.getData(key,()=>new VirtualWanMonitorSource(this.viewSettings.fortigate),{invalidateCache:invalidateCache})}}getSettings($INJECTABLE$,state,lang){const ms=(entry,col)=>{const name=col.id;return entry.packet_sent?`${entry[name].toFixed(2)} ms`:""},msLevel=(entry,column,map)=>{if(entry.packet_sent){const value=entry[column],severity=getLevelFromRangeMap(map,value),rangeLabel=map[severity].label;return`${lang(severity)} ${rangeLabel}`}},createTooltip=(cell,content)=>{let tooltip=new Tooltip;return content=content||dom.elem("div",null),tooltip.setContent(content),tooltip.showOnElementHover(cell),cell.classList.add("tooltip-hint"),tooltip};return()=>{const operationMode=state.getOperationMode();let columns=[{id:"parent",langKey:"Parent"},{id:"intf",sorting:!1,cellValueFunction:entry=>entry.intf?entry.intf:`${lang("any")} (${entry.name})`},{id:"status",sorting:!1,cellFormatter:entry=>{const status={error:"unknown",disable:"status-down-disabled"}[entry.status]||`status-${entry.status}`;return dom.elem("f-icon",{className:`fa-${status}`})},onCellRendered:(cell,entry,col)=>{let tooltip=createTooltip(cell);tooltip.onShow(function(){tooltip.setContent((()=>{let content=lang(`link${entry[col.id]}`);if(entry.state_changed){const diff=Date.now()-entry.state_changed*fDatetime.S_TO_MS;content+=`: ${fDatetime.elapsedTime(diff)}`}return dom.elem("span",{textContent:content})})())})}},{id:"tx_bandwidth",langKey:"upload",sorting:!1,type:"number",numberType:"metricBitsPerSecond",numberCompareBar:"dualGood"},{id:"rx_bandwidth",langKey:"download",sorting:!1,type:"number",numberType:"metricBitsPerSecond",numberCompareBar:"good"},{id:"session",langKey:"sessions",sorting:!1,type:"number",numberCompareBar:!0},{id:"latency",langKey:"Latency",sorting:!1,cellValueFunction:ms},{id:"latency_level",langKey:"Latency",hidden:!0,cellValueFunction:entry=>msLevel(entry,"latency",LATENCY_MAP)},{id:"jitter",langKey:"Jitter",sorting:!1,cellValueFunction:ms},{id:"jitter_level",langKey:"Jitter",hidden:!0,cellValueFunction:entry=>msLevel(entry,"jitter",JITTER_MAP)},{id:"packet_loss",langKey:"Packet Loss",sorting:!1,numberType:"custom",cellValueFunction:entry=>entry.packet_sent?fFormatters.percentage(entry.packet_loss,100,2):"",onCellRendered:(cell,entry)=>{if("sd-wan"!==entry.intf){const sentText=`${lang("sentpkt")}: ${entry.packet_sent}`,receivedText=`${lang("rcvdpkt")}: ${entry.packet_received}`,htmlContent=dom.elem("div",null,{children:[dom.elem("div",{textContent:sentText}),dom.elem("div",{textContent:receivedText})]});createTooltip(cell,htmlContent)}}},{id:"packet_loss_level",langKey:"Packet Loss",hidden:!0,cellValueFunction:entry=>msLevel(entry,"packet_loss",PACKET_LOSS_MAP)}];if(operationMode!==state.OPERATION_MODE.NAT){const nat={intf:!0,parent:!0};columns=columns.filter(col=>!nat[col.id])}const defaultColumns=["intf","status","session","tx_bandwidth","rx_bandwidth"].filter(defaultCol=>columns.some(col=>col.id===defaultCol));return{columns:columns,defaultColumns:defaultColumns,defaultSectionColumn:"parent"}}}get chartsOnly(){return this.dashboardWidget&&!this.dashboardWidget.isZoomed}getChartColor($INJECTABLE$,lang,state){const theme=state.theme,palette=colors&&colors[theme],getSevColor=sev=>palette["severity-labels"][sev].background,customColorCharts=["packet_loss_level","latency_level","jitter_level"],chartColorMap={[SEVERITY_LEVELS.LOW]:getSevColor("none"),[SEVERITY_LEVELS.MEDIUM]:getSevColor("medium"),[SEVERITY_LEVELS.HIGH]:getSevColor("critical")};return(value,column)=>{if(customColorCharts.includes(column.id)){const sev=Object.values(SEVERITY_LEVELS).find(severity=>value.startsWith(lang(severity)));return chartColorMap[sev]}}}}return function(providers,loader){return providers.$compile.component("fVirtualWanMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1810),controller:VirtualWanMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(1811)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1810:function(module,exports){var path="/migadmin/ng/system/dashboard/f-virtual-wan-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="$ctrl.chartColumns"\n    chart-colors="$ctrl.getChartColor(value, column)"\n    dashboard-widget="$ctrl.dashboardWidget"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.loadSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n</f-mutable-widget>\n')}]),module.exports=path},1816:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(31),__webpack_require__(38),__webpack_require__(32),__webpack_require__(8),__webpack_require__(27),__webpack_require__(34)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,dom,icon,formatters,ftnt_shared,notify,fDateTime)=>{class IpsecVpnMonitor extends inject.Collectable{constructor(lang,$q){super(),this.title=lang("dashboard_widget_type::ipsec-vpn").toString(),this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology,$scope){return async()=>{this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.settings=this.getSettings(),await this.loadSource();let unbind=$scope.$watch("$ctrl.muTable",()=>{this.muTable&&(this.locate(),unbind())});this.loadingPromise.resolve()}}async loadSource({invalidateCache:invalidateCache}={}){this.source=await this.getSource(invalidateCache)}getSource($INJECTABLE$,IPSecVPNMonitorSource){return async invalidateCache=>{const key=`IpsecVpn::${this.viewSettings.fortigate.serial}`;return await this.dashboard.getData(key,()=>new IPSecVPNMonitorSource(this.viewSettings.fortigate),{invalidateCache:invalidateCache})}}locate(){const findParam=this.modelData.locate;let findObject;findParam&&this.muTable&&"object"==typeof(findObject=JSON.parse(findParam))&&this.muTable.locate(findObject)}getSettings($INJECTABLE$,lang,csfTopology){return()=>{const getPhase2Values=(entry,attribute)=>[].concat.apply([],entry.proxyid.map(proxyid=>proxyid[attribute])),getProxyValues=(phase2Values,attribute)=>[].concat.apply([],phase2Values.map(value=>value[attribute])),getProxyPorts=proxys=>{return[...new Set(getProxyValues(proxys,"port"))].map(port=>port||lang("All"))},getProxyProtocols=proxys=>{return[...new Set(proxys.map(proxy=>proxy.protocol_name.toUpperCase()||proxy.protocol))].map(protocol=>protocol||lang("All"))};return{defaultSectionColumn:"type",parentChildRows:!0,rowHierarchyIDFunction:entry=>"ipsec-aggregate"===entry.q_name?entry.name:`${entry.name}-tunnel`,parentRowHierarchyIDFunction:entry=>entry.$aggregate&&entry.$aggregate.name,id:"ipsecVpnMonitorList",columns:[{id:"name",fixed:!0,type:"omniselect",cellValueFunction:entry=>{const fortigate=csfTopology.fortigateMapping[entry.fortigate],datasource="ipsec-aggreagte"!==entry.q_name?"availableIPsecTunnels":`${entry.q_path}.$entry.q_name}`;return{q_origin_key:entry.name,datasource:fortigate.getOmniselectProxySourceID(datasource)}}},{id:"type",trustCellFormatterForHTML:!0,sortComparator:function(entryA,entryB){return("ipsec-aggregate"===entryA.q_name?2:1)-("ipsec-aggregate"===entryB.q_name?2:1)},cellValueFunction:entry=>"custom"===entry["wizard-type"]?lang("Custom"):entry["wizard-type"]&&lang(entry["wizard-type"])||lang("IPsec Aggregate"),cellFormatter:entry=>"ipsec-aggregate"===entry.q_name?formatters.ipsec_tunnel_type():formatters.ipsec_tunnel_type(entry["wizard-type"])},{id:"rgwy",langKey:"field_rgwy"},{id:"rport",langKey:"field_rport"},{id:"username",langKey:"Peer ID",trustCellFormatterForHTML:!0,cellFormatter:entry=>formatters.ipsec_tunnel_user(entry.username)},{id:"xauth_user",langKey:"xauthuser",trustCellFormatterForHTML:!0,cellFormatter:entry=>formatters.ipsec_tunnel_user(entry.xauth_user)},{id:"expire",langKey:"field_expire",type:"collection",cellValueFunction:(entry,column)=>getPhase2Values(entry,column.id)},{id:"proxy_src",langKey:"field_lid",type:"collection",cellValueFunction:(entry,column)=>{const proxySrc=getPhase2Values(entry,column.id);return getProxyValues(proxySrc,"subnet")}},{id:"proxy_dst",langKey:"field_rid",type:"collection",cellValueFunction:(entry,column)=>{const proxyDst=getPhase2Values(entry,column.id);return getProxyValues(proxyDst,"subnet")}},{id:"$status",langKey:"field_status",trustCellFormatterForHTML:!0,cellValueFunction:(entry,column)=>entry[column.id],cellFormatter:(entry,column,value)=>icon.formatIcon(icon.ICON_TYPE.UP_DOWN,value)},{id:"incoming_bytes",langKey:"field_incoming",type:"number",numberCompareBar:!0,numberType:"metricBytes"},{id:"outgoing_bytes",langKey:"field_outgoing",type:"number",numberCompareBar:!0,numberType:"metricBytes"},{id:"$p1name",langKey:"phase1",type:"omniselect",cellValueFunction:entry=>"ipsec-aggregate"===entry.q_name?"":entry},{id:"proxy_dst_port",langKey:"Proxy Destination Ports",type:"collection",cellValueFunction:entry=>{const proxyDst=getPhase2Values(entry,"proxy_dst");return getProxyPorts(proxyDst)}},{id:"proxy_src_port",langKey:"Proxy Source Ports",type:"collection",cellValueFunction:entry=>{const proxySrc=getPhase2Values(entry,"proxy_src");return getProxyPorts(proxySrc)}},{id:"phase2_protocol_name",langKey:"Phase 2 Protocols",type:"collection",cellValueFunction:entry=>{const proxys=[...getPhase2Values(entry,"proxy_src"),...getPhase2Values(entry,"proxy_dst")];return getProxyProtocols(proxys)}},{id:"p2name",langKey:"Phase 2 Selectors",type:"collection",cellValueFunction:entry=>entry.proxyid,collectionEntryFormatter:entry=>{return dom.elem("span",{className:"phase2-status tooltip-hint",mkey:entry.p2name},{children:[dom.elem("f-icon",{className:`fa-status-${entry.status}`}),dom.elem("span",{textContent:entry.p2name})]})},collectionEntryOnRender:function(element,entry){const p2TooltipItems=p2Entry=>{const proxyDst=p2Entry.proxy_dst||[],proxySrc=p2Entry.proxy_src||[],items={phase2_name:p2Entry.p2name,Status:lang(`linkstatus::${p2Entry.status}`),field_rid:getProxyValues(proxyDst,"subnet").join(", "),field_lid:getProxyValues(proxySrc,"subnet").join(", "),"Phase 2 Protocols":getProxyProtocols([...proxyDst,...proxySrc]).join(", "),"Proxy Destination Ports":getProxyPorts(proxyDst).join(", "),"Proxy Source Ports":getProxyPorts(proxySrc).join(", ")};return"up"===p2Entry.status&&(items.field_expire=p2Entry.expire),Object.keys(items).map(itemName=>((nameLangKey,value)=>{const name=lang(nameLangKey);return dom.elem("tr",null,{children:[dom.elem("td",{textContent:name}),dom.elem("td",{textContent:value})]})})(itemName,items[itemName]))};ftnt_shared.Tooltip.addToElement(element,(p2Entry=>dom.elem("table",{className:"table slightly-condensed key-value"},{children:[dom.elem("tbody",null,{children:p2TooltipItems(p2Entry)})]}))(entry))}},{id:"creation_time",langKey:"Created",type:"date",dateType:"fromNow",cellValueFunction:(entry,column)=>{if(entry[column.id]){let date=entry[column.id];return fDateTime.fortiGateUTCToBrowserUTC(date)}}},"comments"],defaultSortColumn:"name",defaultColumns:["name","rgwy","username","incoming_bytes","outgoing_bytes","$p1name","p2name"]}}}}return function(providers,loader){return providers.$compile.component("fIpsecVpnMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1817),controller:IpsecVpnMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(1818),__webpack_require__(1820)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1817:function(module,exports){var path="/migadmin/ng/system/dashboard/f-ipsec-vpn-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.source"\n    settings="$ctrl.settings"\n    instance="$ctrl.muTable"\n    dashboard-widget="$ctrl.dashboardWidget"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.loadSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <f-ipsec-vpn-monitor-menu f-read-only-manager class="menu-bar-component"\n        list-ctrl="$ctrl"\n        menu="menu">\n    </f-ipsec-vpn-monitor-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1821:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(27),__webpack_require__(34),__webpack_require__(31)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,Notify,fDatetime,dom)=>{class SslVpnMonitor extends inject.Collectable{constructor(lang,$q){super(),this.muTable={},this.title=lang("dashboard_widget_type::ssl-vpn").toString(),this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology,state){return async()=>{this.modelData=this.widgetModel.getModelData(),this.readOnly=state.readOnlyForPage,await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.setupSettings(),await this.setupSource()}}setupSource($INJECTABLE$,$scope,$http){return async({invalidateCache:invalidateCache}={})=>{const key=`SslVpn::${this.viewSettings.fortigate.serial}`,response=await this.dashboard.getData(key,()=>$http.get("/api/v2/monitor/vpn/ssl",{csfProxy:this.viewSettings.fortigate}),{invalidateCache:invalidateCache}),validEntries=response.data.results.reduce((entries,entry)=>(""!==entry.type&&(entry.fortigate=response.data.serial,entries.push(entry)),entries),[]);this.muTable.source=validEntries}}subsessionFormatter($INJECTABLE$,lang){return subsession=>{const data={};switch(subsession.mode){case"Tunnel":data.icon="ftnt-vpn-tunnel",subsession.aip?data.label=lang("Tunnel: {0}",[subsession.aip]).toString():data.label=lang("tunnel").toString();break;case"Port Forward":data.icon="ftnt-interface",data.label=lang("sslvpnportfwd").toString();break;case"Web":data.icon="fa-globe",data.label=`${subsession.type}: ${subsession.desthost}`;break;default:data.icon="fa-unknwon",data.label=lang("st_unknown").toString()}return data}}endSession($INJECTABLE$,slide,lang,$http,$q,csfTopology){return(sessions,fgtSerial)=>{slide.confirm(lang("Are you sure you want to end the connection(s)?")).then(()=>{const fortigate=fgtSerial&&csfTopology.fortigateMapping[fgtSerial]||this.viewSettings.fortigate,promises=sessions.map(session=>{const url=fortigate.createCSFURI("/api/v2/monitor/vpn/ssl/delete");return $http.post(url,null,{params:{index:session.index,type:session.parent_index>=0?"subsession":"websession"}})});$q.all(promises).then(()=>{this.setupSource({invalidateCache:!0}),Notify.post(lang("Session(s) removed successfully"),"success")})})}}setupSettings(){this.muTable.settings={columns:[{id:"user_name",langKey:"Username"},{id:"remote_host",langKey:"Remote Host"},{id:"last_login_time",langKey:"login_time",cellFormatter:function(entry){return fDatetime.formatDateTime(entry.last_login_timestamp*fDatetime.S_TO_MS)}},{id:"subsessions",langKey:"Active Connections",cellFormatter:entry=>{const children=[];return entry.subsessions.forEach(subsession=>{const data=this.subsessionFormatter(subsession),icon=dom.elem("f-icon",{className:data.icon}),button=dom.elem("button",null,{children:[icon,dom.elem("span",{textContent:data.label})]});this.readOnly||(button.addEventListener("mouseenter",()=>{const fIcon=button.getElementsByTagName("f-icon");fIcon.length&&fIcon[0].setAttribute("class","fa-times")}),button.addEventListener("mouseleave",()=>{const fIcon=button.getElementsByTagName("f-icon");fIcon.length&&fIcon[0].setAttribute("class",data.icon)}),button.addEventListener("click",()=>{this.endSession([subsession],entry.fortigate)})),children.push(button)}),dom.elem("div",{className:"flex-wrap"},{children:children})}}],sotring:!0,defaultSortColumn:["user_name","remote_host","last_login_time"],defaultSortDirection:"desc",defaultColumns:["user_name","last_login_time","remote_host","subsessions"]}}}return function(providers,loader){return providers.$compile.component("fSslVpnMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1822),controller:SslVpnMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1822:function(module,exports){var path="/migadmin/ng/system/dashboard/f-ssl-vpn-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    dashboard-widget="$ctrl.dashboardWidget"\n    dashboard="$ctrl.dashboard"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.setupSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <div class="left-menu-items">\n        <div f-menu-item-button click="$ctrl.endSession(menu.entries)"\n            ng-if="!$ctrl.readOnly" ng-show="menu.popUpMenu" enabled="menu.entries.length > 0">\n            <f-icon class="fa-times"></f-icon>\n            <span>{{::\'End Session\' | lang}}</span>\n        </div>\n    </div>\n</f-mutable-widget>\n')}]),module.exports=path},1823:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(31),__webpack_require__(38),__webpack_require__(32),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,dom,icon,fFormatters,notify)=>{const LOAD_BALANCE_MONITOR_URL="/api/v2/monitor/firewall/load-balance",VIP_CMDB_URL="/api/v2/cmdb/firewall/vip",VS_CLASSES={IPV6:"ipv6",NAT64:"nat64",NAT46:"nat46",IPV4:"ipv4"},VIP_TABLE_SUFFIX={[VS_CLASSES.IPV4]:"",[VS_CLASSES.IPV6]:"6",[VS_CLASSES.NAT64]:"64",[VS_CLASSES.NAT46]:"46"};class LoadBalanceMonitorWidget extends inject.Collectable{constructor(lang,$q,state){super(),this.muTable={},this.title=lang("dashboard_widget_type::load-balance").toString(),this.chartColumns=["mode"],this.viewSettings={},this.loadingPromise=$q.defer(),this.includedClasses=[VS_CLASSES.IPV4],state.featureEnabled("gui-ipv6")&&(this.includedClasses.push(VS_CLASSES.IPV6),state.featureEnabled("gui-nat46-64")&&this.includedClasses.push(VS_CLASSES.NAT46,VS_CLASSES.NAT64))}$onInit($INJECTABLE$,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.setupSettings(),await this.setupSource()}}setupSource($INJECTABLE$,$http){return async()=>{const fetchData=()=>$http.get(LOAD_BALANCE_MONITOR_URL,{csfProxy:this.viewSettings.fortigate,params:{count:-1}}).then(res=>res.data.results),key=`loadBalanceMonitor::${this.viewSettings.fortigate.serial}`,source=(await this.dashboard.getData(key,()=>fetchData(),{invalidateCache:!0})).reduce((realServers,virtualServer)=>{if(!this.includedClasses.includes(virtualServer.virtual_server_type))return realServers;const totalBytesProcessed=virtualServer.list.reduce(function(acc,realServer){return acc+realServer.bytes_processed},0);return realServers.concat(virtualServer.list.map(function(realServer){const{virtual_server_name:virtual_server_name,virtual_server_ip:virtual_server_ip,virtual_server_port:virtual_server_port}=virtualServer;return realServer.totalBytesProcessed=totalBytesProcessed,realServer.virtual_server_name=virtual_server_name,realServer.virtual_server_ip_port=`${virtual_server_ip}:${virtual_server_port}`,realServer.virtual_server_type=virtualServer.virtual_server_type,realServer}))},[]);this.muTable.source=source}}setupSettings($INJECTABLE$,lang){return()=>{const iconMap={active:"fa-enabled",standby:"fa-exempt",disabled:"fa-disabled"};this.muTable.settings={columns:[{id:"real_server_ip",langKey:"rserver",cellFormatter:function(entry){return`${entry.real_server_ip}:${entry.real_server_port}`}},{id:"status",langKey:"status",trustCellFormatterForHTML:!0,cellFormatter:function(entry){const iconLabel=lang(fFormatters.sentence_case(entry.status));return icon.formatIcon(icon.ICON_TYPE.UP_DOWN,entry.status,{label:iconLabel})}},{id:"mode",langKey:"mode",cellValueFunction:(entry,col)=>lang(entry[col.id]),cellFormatter:function(entry,col,val){const iconClass=iconMap[entry[col.id]];return dom.elem("span",null,{children:[dom.elem("f-icon",{className:iconClass}),dom.elem("span",{textContent:val})]})}},{id:"monitor_events",langKey:"event"},{id:"active_sessions",langKey:"session"},{id:"RTT",langKey:"rtt",cellFormatter:entry=>lang("{COUNT} second(s)",[entry.RTT])},{id:"bytes_processed",langKey:"byte",type:"number",numberCompareBar:!0,numberType:"metricBytes"},{id:"virtual_server_ip_port",langKey:"vserver"}],defaultSectionColumn:"virtual_server_ip_port",defaultColumns:["real_server_ip","status","mode","monitor_events","active_sessions","RTT","bytes_processed"]}}}get chartsOnly(){return this.dashboardWidget&&!this.dashboardWidget.isZoomed}updateRSMode($INJECTABLE$,$http,$timeout,lang){return async(realServer,status)=>{try{const url=[`${VIP_CMDB_URL}${VIP_TABLE_SUFFIX[realServer.virtual_server_type]}`,realServer.virtual_server_name,"realservers"].join("/"),params={filter:`ip==${realServer.real_server_ip}`},CMDBRealServer=(await $http.get(url,{csfProxy:this.viewSettings.fortigate,params:params})).data.results[0];realServer.q_origin_key=CMDBRealServer.q_origin_key,await $http.put(`${url}/${realServer.q_origin_key}`,{status:status},{csfProxy:this.viewSettings.fortigate}),$timeout(()=>this.setupSource(),2e3)}catch(error){notify.post(lang("Failed to save settings").toString(),notify.LEVEL.ERROR)}}}}return function(providers,loader){return providers.$compile.component("fLoadBalanceMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1824),controller:LoadBalanceMonitorWidget,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(1825)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1824:function(module,exports){var path="/migadmin/ng/system/dashboard/f-load-balance-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="$ctrl.chartColumns"\n    dashboard-widget="$ctrl.dashboardWidget"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.setupSource()"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <f-load-balance-monitor-menu menu="menu"\n        on-graceful-update-mode="$ctrl.updateRSMode(realServer, status)">\n    </f-load-balance-monitor-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1832:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(27),__webpack_require__(34),__webpack_require__(31),__webpack_require__(36),__webpack_require__(111),__webpack_require__(93)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,notify,dateTime,dom,fwebUtilSelect,fAvatars,fQuarantine)=>{const QUARANTINE_URL="/api/v2/cmdb/user/quarantine/",QUARANTINE_CATEGORIES={QUARANTINED:{value:"QUARANTINED",langKey:"quarantined"},USER_BANNED:{value:"USER_BANNED",langKey:"Banned IP"},EMS_QUARANTINE:{value:"EMS_QUARANTINE",langKey:"FortiClient Quarantine"}},isQuarantined=function(entry){return entry.category===QUARANTINE_CATEGORIES.QUARANTINED.value},isUserBanned=function(entry){return entry.category===QUARANTINE_CATEGORIES.USER_BANNED.value},isEMSQuarantined=function(entry){return entry.category===QUARANTINE_CATEGORIES.EMS_QUARANTINE.value};class QuarantineMonitor extends inject.Collectable{constructor(lang,$q){super(),this.muTable={},this.title=lang("dashboard_widget_type::quarantine").toString(),this.chartColumns=["source","device"],this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.muTable.settings=this.getSettings(),await this.loadSource(),this.setupWatch()}}setupWatch($INJECTABLE$,$scope){return()=>{$scope.$on("QUARANTINE_EVENTS",()=>{this.loadSource({invalidateCache:!0})})}}async loadSource({invalidateCache:invalidateCache}={invalidateCache:!1}){this.muTable.source=await this.getSource({invalidateCache:invalidateCache})}getSource($INJECTABLE$,QuarantineMonitorSource){return async({invalidateCache:invalidateCache})=>{const key=`Quarantine::${this.viewSettings.fortigate.serial}`;return await this.dashboard.getData(key,()=>new QuarantineMonitorSource({fortigate:this.viewSettings.fortigate}),{invalidateCache:invalidateCache})}}getSettings($INJECTABLE$,lang,csfTopology,$filter){const getEntryDetails=function(entry){return isQuarantined(entry)?entry.mac:isUserBanned(entry)?entry.ip_address:isEMSQuarantined(entry)?entry.unauth_user:void 0},getMac=function(entry,detectedDevices){let mac=entry.mac;if(isUserBanned(entry)){const target=entry.ip_address;mac=Object.keys(detectedDevices).find(function(deviceMac){const device=detectedDevices[deviceMac];return device&&device.ipv4_address===target})}return mac};return()=>{return{defaultColumns:["details","device","source","expires","description"],defaultSectionColumn:"category",columns:[{id:"category",langKey:"category",cellFormatter:function(entry){return lang(QUARANTINE_CATEGORIES[entry.category].langKey)}},{id:"details",langKey:"details",cellFormatter:entry=>{if(isQuarantined(entry)||isUserBanned(entry))return getEntryDetails(entry);if(isEMSQuarantined(entry)){const detail=getEntryDetails(entry),mac=getMac(entry,this.muTable.source.detectedDevices);if(!mac)return detail;let device=this.muTable.source.detectedDevices[mac];return device&&device.master_mac&&device.mac!==device.master_mac&&(device=this.muTable.source.detectedDevices[device.master_mac]),function(device,csfPath){return fAvatars.userFormatFn({user:device.user_info&&device.user_info.cn&&device.user_info.cn[0],unauthuser:device.unauth_user,isFortiClientUnauthuser:device.is_forticlient_unauth_user,uid:device.forticlient_id,quarantinedOnFortiClient:device.quarantined_on_forticlient,csfPath:csfPath})}(device,csfTopology.fortigateMapping[entry.fortigate].path)}},trustCellFormatterForHTML:!0},{id:"device",type:"omniselect",langKey:"device",cellValueFunction:entry=>{const mac=getMac(entry,this.muTable.source.detectedDevices);if(!mac)return null;const csfPath=csfTopology.fortigateMapping[entry.fortigate].path;return{q_origin_key:mac,datasource:fwebUtilSelect.getCSFProxySourceID("devices",csfPath)}}},{id:"source",langKey:"source",cellFormatter:function(entry){let value;if(entry.source?value=langValue(entry.source):(isQuarantined(entry)||isEMSQuarantined(entry))&&(value=langValue("Administrative")),value)return value;function langValue(input){return lang(`quarantinemonitor::${input}`)}}},{id:"expires",langKey:"Expires",cellFormatter:function(entry){if(!entry.quarantineEnabled&&isQuarantined(entry))return lang("disabled");if(!entry.expires)return lang("never");const elapsedRelativeTime=$filter("elapsedRelativeTime"),expiryInMS=1e3*entry.expires;return elapsedRelativeTime(dateTime.browserUTCToFortiGateUTC(Date.now()),{now:expiryInMS,verbosity:2})}},{id:"description",langKey:"description"},{id:"created",type:"date",langKey:"Created on",cellValueFunction:function(entry){if(entry.created)return entry.created*dateTime.S_TO_MS}},{id:"fortigate",type:"omniselect",langKey:"FortiGate",cellValueFunction:function(entry){return{datasource:"csfFortiGates",q_origin_key:entry.fortigate}},hidden:!csfTopology.csfEnabled}],onRowRendered:function(row,entry){isQuarantined(entry)&&!entry.quarantineEnabled&&row.classList.add("disabled")}}}}canDelete(entry){return!isEMSQuarantined(entry)}delete($INJECTABLE$,$rootScope){return async entries=>{let quarantineEntries,ipBanEntries;entries&&(quarantineEntries=[],ipBanEntries=[],entries.forEach(function(entry){isQuarantined(entry)?quarantineEntries.push(entry):isUserBanned(entry)&&ipBanEntries.push(entry)})),await this._deleteQuarantined(quarantineEntries),await this._deleteUserBanned(ipBanEntries),$rootScope.$broadcast("QUARANTINE_EVENTS",{messageType:"deviceRemoveBanSuccessful"}),this.shouldReload&&this.loadTable({invalidateCache:!0})}}_deleteQuarantined($INJECTABLE$,$http,$q,slide,lang,$scope,csfTopology,state){return async quarEntries=>{if(quarEntries){if(!quarEntries.length)return $q.resolve();const id=Math.random().toString(36),childScope=Object.assign($scope.$new(),{entries:quarEntries.map(function(entry){return fQuarantine.createQuarantineRequestEntry({mac:entry.mac,fortigateSerial:entry.fortigate})}),removeMode:!0});return slide.open(id,{template:'<f-quarantine-dialog\n                            entries="entries"\n                            remove-mode="removeMode">\n                        </f-quarantine-dialog>',parentScope:childScope,options:{closeButton:!0,closeOnEscape:!0,fullHeight:!0,title:lang("Remove Quarantine").toString()}}).then(()=>{this.shouldReload=!0}).finally(function(){childScope.$destroy()})}{if(state.getOperationMode()!==state.OPERATION_MODE.NAT)return $q.resolve();const data={targets:[]},promises=("all"===this.viewSettings.fortigate.q_origin_key?csfTopology.fortigates:[this.viewSettings.fortigate]).map(function(fortigate){return $http.put(fortigate.createCSFURI(QUARANTINE_URL),data).then(()=>fortigate._populateQuarantinedUsers())});try{await $q.all(promises),notify.post(lang("Entries removed from quarantine"),notify.LEVEL.SUCCESS)}catch(error){notify.post(lang("Failed to remove quarantine: {ERROR}",[error.statusText]),notify.LEVEL.ERROR)}this.shouldReload=!0}}}_deleteUserBanned($INJECTABLE$,$http,$q,lang,csfTopology,slide){const _delete=toDelete=>{let promises,url="/api/v2/monitor/user/banned/";if(toDelete){if(!toDelete.length)return $q.resolve();url+="clear_users";const fortigates={};toDelete.forEach(function(entry){const serial=entry.fortigate;fortigates[serial]=fortigates[serial]||[],entry.ip_address&&fortigates[serial].push(entry.ip_address)}),promises=Object.keys(fortigates).map(function(serial){const fortigate=csfTopology.fortigateMapping[serial],csfUrl=fortigate.createCSFURI(url);return $http.post(csfUrl,{ip_addresses:fortigates[serial]}).then(()=>fortigate._populateBannedUsers())})}else url+="clear_all",promises=csfTopology.fortigates.map(function(fortigate){return $http.post(fortigate.createCSFURI(url)).then(()=>fortigate._populateBannedUsers())});return $q.all(promises).then(function(){notify.post(lang("Entries removed from ban."),notify.LEVEL.SUCCESS)},function(error){notify.post(lang("Failed to remove ban: {ERROR}",[error.statusText]),notify.LEVEL.ERROR)}).finally(()=>{this.shouldReload=!0})};return sources=>{if(!sources)return _delete.call(this);if(sources.length){const msg=lang("Are you sure you want to remove the IP ban(s)?").toString();return slide.confirm(msg).then(()=>_delete.call(this,sources))}}}deleteAll($INJECTABLE$,lang,slide){return()=>{const hasEMSEntries=this.muTable.source.entries.some(isEMSQuarantined);let msg=`<div>\n                    ${lang("Are you sure you want to remove all access-layer quarantines?").toString()}\n                </div>`;hasEMSEntries&&(msg=`${msg}\n                    <div>\n                        ${lang("EMS Quarantined entries must be removed via EMS server.")}\n                    </div>`),slide.confirm(msg).then(()=>this.delete())}}get chartsOnly(){return this.dashboardWidget&&!this.dashboardWidget.isZoomed}}return function(providers,loader){return providers.$compile.component("fQuarantineMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1833),controller:QuarantineMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(183),__webpack_require__(1834),__webpack_require__(1836)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1833:function(module,exports){var path="/migadmin/ng/system/dashboard/f-quarantine-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="$ctrl.chartColumns"\n    dashboard-widget="$ctrl.dashboardWidget"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.loadSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <f-quarantine-monitor-menu class="menu-bar-component"\n        menu="menu" quarantine-monitor="$ctrl">\n    </f-quarantine-monitor-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1840:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(239)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){const VAPS_CACHE_KEY="wifi-vaps",AP_CACHE_KEY="managed-ap",DB_PREFIX_KEY="dashboard_widget_type::",WIFI_BAND={BOTH:"both","24GHZ":"24ghz","5GHZ":"5ghz"};const component={controller:class extends inject.Collectable{constructor($q){super(),this.muTable={},this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,managedApView,wifiDashboardConfig,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),this.wifiBand=this.modelData["wifi-band"]||WIFI_BAND.BOTH,this.wifiBands=this.wifiBand===WIFI_BAND.BOTH?[WIFI_BAND["24GHZ"],WIFI_BAND["5GHZ"]]:[this.wifiBand],this.setupTitle(),this.mutableConfig=wifiDashboardConfig.getSettings(this.modelData.type),this.widgetInfo=this.mutableConfig.widgetInfo,await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.view=managedApView.create(this.mutableConfig.view,Object.assign(this.mutableConfig.getTableSettings({wifiBands:this.wifiBands})||{},{id:""})),this.loadingPromise.resolve(),this.setupMutable()}}setupTitle($INJECTABLE$,lang){return()=>{const titleParts=[lang(`${DB_PREFIX_KEY}${this.modelData.type}`)];this.wifiBand!==WIFI_BAND.BOTH&&titleParts.push(`(${lang(this.wifiBand)})`),this.title=titleParts.join(" ")}}setupMutable($INJECTABLE$,managedApView){return async({invalidateCache:invalidateCache}={invalidateCache:!1})=>{this.setupTitle();const vaps=await this.dashboard.getData(this._UNIQUE_VAPS_CACHE_KEY,()=>managedApView.fetchVapFor(this.viewSettings.fortigate),{invalidateCache:invalidateCache});this.view.setParams({fortigate:this.viewSettings.fortigate,vapGroup:vaps.vapGroup,vap:vaps.vap,includeLocal:!0});const source=await this.dashboard.getData(this._UNQIUE_AP_SOURCE_CACHE_KEY,()=>Promise.resolve(this.view.getSource(!0)));this.source=source,Object.assign(this.muTable,{source:source,settings:this.view.getSettings(),chartColumns:this.mutableConfig.chartSettings.columns}),this.chartTotalLabels=this.mutableConfig.chartSettings.totalLabels}}refresh(){this.setupMutable({invalidateCache:!0})}get chartsOnly(){return this.dashboardWidget&&!this.dashboardWidget.isZoomed}getChartColor($INJECTABLE$,managedApView,lang,AP_HEALTH_UTILITY){const colorMapping=managedApView.getChartColors(),levelColumns=["channel_utilization_level","client_count_level","interfering_aps_level"],sevToHealthConstant={[lang("low")]:"LOW",[lang("medium")]:"MEDIUM",[lang("high")]:"HIGH"},levelColorMapSettings={channel_utilization_level:{apHealthId:"CHANNEL_UTIL",unit:"%"},client_count_level:{apHealthId:"CLIENT_COUNT"},interfering_aps_level:{apHealthId:"INTERFERING_APS"}},colorLevelMap=levelColumns.reduce((map,column)=>(map[column]=Object.keys(colorMapping.levelColorMap).reduce((colorMap,sev)=>(colorMap[`${sev} ${AP_HEALTH_UTILITY.rangeToLabel(sevToHealthConstant[sev],levelColorMapSettings[column].apHealthId,levelColorMapSettings[column].unit)}`]=colorMapping.levelColorMap[sev],colorMap),{}),map),{}),healthColumns=["health_2G_radio","health_5G_radio","health"];return(value,column)=>"status"===column.id?colorMapping.statusColorMap[value]:healthColumns.includes(column.id)?colorMapping.healthColorMap[value]:levelColumns.includes(column.id)?colorLevelMap[column.id][value]:void 0}get _UNIQUE_VAPS_CACHE_KEY(){return`${VAPS_CACHE_KEY}::${this.viewSettings.fortigate.serial}`}get _UNQIUE_AP_SOURCE_CACHE_KEY(){const fortigate=this.viewSettings.fortigate;return`${AP_CACHE_KEY}.${this.mutableConfig.view}::${fortigate.serial}`}},templateUrl:__webpack_require__(1841),bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}};return(providers,loaderProvider)=>(providers.$compile.component("fManagedApWidget",component),loaderProvider.initModules([__webpack_require__(330),__webpack_require__(540),__webpack_require__(135)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1841:function(module,exports){var path="/migadmin/ng/system/dashboard/f-managed-ap-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    context-menu="::true"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="::$ctrl.muTable.chartColumns"\n    chart-colors="$ctrl.getChartColor(value, column)"\n    chart-total-labels="::$ctrl.chartTotalLabels"\n    widget-model="$ctrl.widgetModel"\n    dashboard-widget="$ctrl.dashboardWidget"\n    on-refresh="$ctrl.refresh()"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <mutable-widget-title-info>\n        <f-icon ng-if="$ctrl.widgetInfo" class="fa-help-info mutable-widget-title-info" f-tip>\n            <span>{{:: $ctrl.widgetInfo.main }}</span>\n            <ul ng-if="$ctrl.widgetInfo.sub && $ctrl.widgetInfo.sub.length">\n                <li ng-repeat="info in ::$ctrl.widgetInfo.sub">\n                    {{:: info }}\n                </li>\n            </ul>\n        </f-icon>\n    </mutable-widget-title-info>\n    <f-managed-ap-list-menu\n        menu="::menu"\n        class="menu-bar-component"\n        fortigate="$ctrl.viewSettings.fortigate"\n        statistics="$ctrl.source.status.apStatistics"\n        current-view="::$ctrl.mutableConfig.view"\n        refresh-table="$ctrl.refresh()"\n        in-widget="::true">\n    </f-managed-ap-list-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1847:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(8),__webpack_require__(239)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,{Omniselect:Omniselect}){const DB_PREFIX_KEY="dashboard_widget_type::",EXTRA_WIFI_CLIENT_DATA_CACHE_KEY="wifi-client-extra",WIFI_META_LANG_CACHE_KEY="wifi-client-meta-lang",WIFI_CLIENT_CACHE_KEY="wifi-client",WIFI_BAND={BOTH:"both","24GHZ":"24ghz","5GHZ":"5ghz"};const component={controller:class extends inject.Collectable{constructor($q){super(),this.muTable={},this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,dashboardConfig,csfTopology,wifiDashboardConfig,$scope){return async()=>{this.modelData=this.widgetModel.getModelData(),this.dashboardConfig=dashboardConfig.getWidgetConfig()[this.modelData.type],this.wifiBand=this.modelData["wifi-band"]||WIFI_BAND.BOTH,this.wifiBands=this.wifiBand===WIFI_BAND.BOTH?[WIFI_BAND["24GHZ"],WIFI_BAND["5GHZ"]]:[this.wifiBand],this.setupTitle(),this.mutableConfig=wifiDashboardConfig.getSettings(this.modelData.type),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.setupMutable(),$scope.$on("QUARANTINE_EVENTS",async(event,args)=>{args.fortigateSerials.includes(this.viewSettings.fortigate.serial)&&this.dashboardWidget&&this.dashboardWidget.isZoomed&&(await Omniselect.getSourceData(this.viewSettings.fortigate.getOmniselectProxySourceID("devices")),this.setupMutable())})}}setupTitle($INJECTABLE$,lang){return()=>{const titleParts=[lang(`${DB_PREFIX_KEY}${this.modelData.type}`)];this.wifiBand!==WIFI_BAND.BOTH&&titleParts.push(`(${lang(this.wifiBand)})`),this.title=titleParts.join(" ")}}setupMutable($INJECTABLE$,$q,wifiClientViewService){return async({invalidateCache:invalidateCache}={invalidateCache:!1})=>{const promises=[this.dashboard.getData(this._UNIQUE_EXTRA_DATA_CACHE_KEY,()=>wifiClientViewService.getExtraData(this.viewSettings.fortigate),{invalidateCache:invalidateCache}),this.dashboard.getData(this._UNIQUE_WIFI_CLIENT_META_LANG_CACHE_KEY,()=>wifiClientViewService.getWifiMetaLangs(this.viewSettings.fortigate)),this.dashboard.getData(this._UNIQUE_WIFI_CLIENT_CACHE_KEY,()=>Promise.resolve(wifiClientViewService.getSource()))],[wifiData,langMap,source]=await $q.all(promises);source.setParams({fortigate:this.viewSettings.fortigate});const settingsParams={fortigate:this.viewSettings.fortigate,managedAPs:wifiData.managedAPs,ssids:wifiData.ssids,SECURITY_LANG:langMap.SECURITY_LANG,SECURITY_TYPES:langMap.SECURITY_TYPES,ENCRYPT_LANG:langMap.ENCRYPT_LANG},settings=wifiClientViewService.getSettings(settingsParams),customSettings=Object.assign(this.mutableConfig.getTableSettings({wifiBands:this.wifiBands})||{},{id:""}),chartColumns=this.mutableConfig.chartSettings.columns;Object.assign(settings,customSettings),Object.assign(this.muTable,{source:source,settings:settings,chartColumns:chartColumns}),this.chartTotalLabels=this.mutableConfig.chartSettings.totalLabels}}refresh(){this.setupMutable({invalidateCache:!0})}showDetails($INJECTABLE$,$rootScope,slide){return entry=>{if(entry){const slideScope=Object.assign($rootScope.$new(!0),{entry:entry});slide.open({template:'<f-wifi-client-details client="entry"></f-wifi-client-details>',parentScope:slideScope,options:{fullHeight:!0,width:1100}}).finally(()=>{slideScope.$destroy()})}}}get chartsOnly(){return this.dashboardWidget&&!this.dashboardWidget.isZoomed}getChartColor($INJECTABLE$,wifiClientViewService){return(value,column)=>wifiClientViewService.getChartColor(value,column)}get _UNIQUE_EXTRA_DATA_CACHE_KEY(){return`${EXTRA_WIFI_CLIENT_DATA_CACHE_KEY}::${this.viewSettings.fortigate.serial}`}get _UNIQUE_WIFI_CLIENT_CACHE_KEY(){return`${WIFI_CLIENT_CACHE_KEY}::${this.viewSettings.fortigate.serial}`}get _UNIQUE_WIFI_CLIENT_META_LANG_CACHE_KEY(){return`${WIFI_META_LANG_CACHE_KEY}::${this.viewSettings.fortigate.serial}`}},templateUrl:__webpack_require__(1848),bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}};return(providers,loaderProvider)=>(providers.$compile.component("fWifiClientWidget",component),loaderProvider.initModules([__webpack_require__(457),__webpack_require__(458)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1848:function(module,exports){var path="/migadmin/ng/system/dashboard/f-wifi-client-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    context-menu="::true"\n    chart-columns="::$ctrl.muTable.chartColumns"\n    chart-colors="$ctrl.getChartColor(value, column)"\n    charts-only="$ctrl.chartsOnly"\n    chart-total-labels="::$ctrl.chartTotalLabels"\n    widget-model="$ctrl.widgetModel"\n    dashboard-widget="$ctrl.dashboardWidget"\n    on-refresh="$ctrl.refresh()"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise"\n    on-double-click="$ctrl.showDetails($entry)">\n    <f-wifi-client-monitor-menu\n        menu="::menu"\n        hide-csf-chooser="::true"\n        show-details="$ctrl.showDetails(entry)"\n        class="menu-bar-component"\n        in-widget="::true">\n    </f-wifi-client-monitor-menu>\n</f-mutable-widget>\n\n')}]),module.exports=path},1849:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26),__webpack_require__(34)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,inject,dateTime){const AP_STATUS_URL="/api/v2/monitor/wifi/ap_status",DASHBOARD_CACHE_KEY="historical-client",DASHBOARD_PREFIX="dashboard_widget_type::",WIFI_BAND={BOTH:"both","24GHZ":"24ghz","5GHZ":"5ghz"},BAND_ENTRY_MAPPING={[WIFI_BAND["24GHZ"]]:"2g",[WIFI_BAND["5GHZ"]]:"5g"},UNIQUE_TIME_CACHE_KEY="wifiClientCounts::time",POLL_RATE=15e3;class HistoricalClientWidget extends inject.Collectable{constructor(){super(),this.viewSettings={}}$onInit($INJECTABLE$,csfTopology){return async()=>{this.loading=!0,this.modelData=this.widgetModel.getModelData(),this.wifiBand=this.modelData["wifi-band"]||WIFI_BAND.BOTH,this.setupTitle(),this.dashboardCsf=this.dashboard.csfEnabled,await csfTopology.buildIfNecessary(),this.viewSettings={fortigate:this.dashboard.getChosenFortigate(this.modelData)},this.setupWidgetSettings(),this.startDataPolling(),this.setupWatch()}}$onDestroy(){this.stopDataPolling()}get _storageKey(){const fortigate=this.viewSettings.fortigate.serial,widget=this.modelData.id,dashboard=this.dashboard.dashboard.id;return`${UNIQUE_TIME_CACHE_KEY}::${fortigate}.${dashboard}.${widget}`}get _uniqueCacheKey(){const fortigate=this.viewSettings.fortigate.serial;return`${DASHBOARD_CACHE_KEY}::${fortigate}`}startDataPolling($INJECTABLE$,$scope,$timeout){return()=>{$timeout(()=>this.loading=!0),this.dashboard.subscribeToPolledCache(this._uniqueCacheKey,()=>this.fetchData(),POLL_RATE),this._currentCacheKey=this._uniqueCacheKey;const cacheInfo=this.dashboard.getPolledCacheInfo(this._currentCacheKey);this.dataPollWatch=$scope.$watch(()=>cacheInfo.data,(newData,oldData)=>{newData&&newData!==oldData&&(this.cachedData=newData,$timeout(()=>this.loading=!1))})}}get cachedData(){return this._cachedData}set cachedData(data){this._cachedData=data,this.setupChartData()}stopDataPolling(){this.dataPollWatch&&this.dataPollWatch(),this.dashboard.unsubscribeToPolledCache(this._currentCacheKey)}setupWatch($INJECTABLE$,$scope,csfTopology){return()=>{$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,newVal=>{newVal&&(this.viewSettings.fortigate=newVal)}),$scope.$watch(()=>this.viewSettings.fortigate,(newValue,oldValue)=>{newValue&&newValue!==oldValue&&(this.stopDataPolling(),this.startDataPolling())})}}setupWidgetSettings($INJECTABLE$,persistentStorage){return()=>{this.timeOption=persistentStorage.get(this._storageKey)||this.TIME_OPTIONS[0]}}setupTitle($INJECTABLE$,lang){return()=>{const titleParts=[lang(`${DASHBOARD_PREFIX}${this.modelData.type}`)];this.wifiBand!==WIFI_BAND.BOTH&&titleParts.push(`(${lang(this.wifiBand)})`),this.title=titleParts.join(" ")}}setTimeOption($INJECTABLE$,persistentStorage){return option=>{option!==this.timeOption&&(this.timeOption=option,persistentStorage.put(this._storageKey,option),this.setupChartData())}}setupChartData($INJECTABLE$,lang){const timeJump=(seconds,numDataPoints,jump)=>numDataPoints&&1e3*Math.round(seconds/numDataPoints)*jump;return()=>{const data=this.cachedData,bands=[],seconds=this.TIME_OPTIONS_IN_SECONDS[this.timeOption];let start,end;this.wifiBand===WIFI_BAND.BOTH?bands.push(WIFI_BAND["24GHZ"],WIFI_BAND["5GHZ"]):bands.push(this.wifiBand);const chartData=bands.map(band=>{start=dateTime.adjustBasedOnTZDevice(new Date,{fromBrowser:!0}),end=dateTime.adjustBasedOnTZDevice(new Date,{fromBrowser:!0});const dataEntryKey=["client","peak",BAND_ENTRY_MAPPING[band],this.TIME_MAP[this.timeOption]].join("_"),rawData=data[dataEntryKey]||[],numDataPoints=rawData.length;start.setTime(start.getTime()-((seconds,numDataPoints)=>numDataPoints&&1e3*Math.round(seconds*((numDataPoints-1)/numDataPoints)))(seconds,numDataPoints));const reversedRawData=[...rawData].reverse();return{label:lang(band).toString(),data:reversedRawData.map(function(datum,idx){return[start.getTime()+timeJump(seconds,numDataPoints,idx),datum]}),color:this.BAND_COLORS[band]}});this.chartConfig=angular.extend(this.DEFAULT_CHART_CONFIG,{data:chartData,start:start,end:end})}}fetchData($INJECTABLE$,$http){return()=>{const params={};return this.viewSettings.fortigate&&(params.csfProxy=this.viewSettings.fortigate),$http.get(AP_STATUS_URL,params).then(r=>r.data.results)}}}HistoricalClientWidget.prototype.DEFAULT_CHART_CONFIG=inject.mark(function(lang){return{data:[],options:{xaxis:{mode:"time",timezone:"browser"},yaxis:{min:0,minTickSize:1,tickDecimals:0},legend:{show:!0},series:{lines:{show:!0,fill:!0},stack:!0}},tooltips:!0,empty_chart_text:lang("No clients").toString()}}),HistoricalClientWidget.prototype.DEFAULT_TIME_SERIES_CONFIG={data:[],options:{xaxis:{mode:"time",timezone:"browser"},yaxis:{min:0,minTickSize:1,tickDecimals:0}},tooltips:!0},HistoricalClientWidget.prototype.BAND_COLORS={[WIFI_BAND["24GHZ"]]:Chart.prototype.COLORS.INDIGO,[WIFI_BAND["5GHZ"]]:Chart.prototype.COLORS.AMBER},HistoricalClientWidget.prototype.TIME_OPTIONS=["hour","day","month"],HistoricalClientWidget.prototype.TIME_MAP={hour:"1hour",day:"24hour",month:"30day"},HistoricalClientWidget.prototype.TIME_OPTIONS_IN_SECONDS={hour:Math.pow(60,2),day:24*Math.pow(60,2),month:720*Math.pow(60,2)};const component={controller:HistoricalClientWidget,templateUrl:__webpack_require__(1850),bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}};return providers=>providers.$compile.component("fHistoricalClientWidget",component)}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1850:function(module,exports){var path="/migadmin/ng/system/dashboard/f-historical-client-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>{{:: $ctrl.title }}</widget-title>\n    <extra-controls>\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu" ng-if="!$ctrl.loading">\n            {{ \'time_period::\' + $ctrl.timeOption | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.timeOptionsMenu">\n            <div f-menu-item-button ng-repeat="timeOption in ::$ctrl.TIME_OPTIONS"\n                    selected="$ctrl.timeOption === timeOption"\n                    ng-click="$ctrl.setTimeOption(timeOption)">\n                <span>{{ \'time_period::\' + timeOption | lang }}</span>\n            </div>\n        </div>\n        <f-widget-fortigate-chooser\n            fortigate-serial="$ctrl.viewSettings.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div class="full-dimension-widget" f-chart="$ctrl.chartConfig"></div>\n    </widget-content>\n</f-dashboard-widget>')}]),module.exports=path},1851:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(31)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,fDom){const DASHBOARD_CACHE_KEY="wifi-login-failures";const component={controller:class extends inject.Collectable{constructor(lang,$q){super(),this.muTable={},this.title=lang("dashboard_widget_type::wifi-login-failures").toString(),this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.muTable.settings=this.getSettings(),this.loadSource(),this.setupWatch()}}async loadSource({invalidateCache:invalidateCache}={}){this.muTable.source=await this.getSource(invalidateCache)}getSource($INJECTABLE$,WifiLoginFailuresSource){return async invalidateCache=>{const cacheKey=`${DASHBOARD_CACHE_KEY}::${this.viewSettings.fortigate.serial}`;return await this.dashboard.getData(cacheKey,()=>Promise.resolve(new WifiLoginFailuresSource(this.viewSettings.fortigate)),{invalidateCache:invalidateCache})}}getSettings($INJECTABLE$,csfTopology){return()=>({columns:[{id:"time",langKey:"Time",type:"date",dateType:"dateTime",cellValueFunction:(entry,column)=>1e3*entry[column.id]},{id:"ssid",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:(entry,column)=>{const fortigate=csfTopology.fortigateMapping[entry.fortigate];return{q_origin_key:entry[column.id],datasource:fortigate.getOmniselectProxySourceID("wireless-controller.vap")}},collectionEntryFormatter:entry=>fDom.elem("span",{textContent:entry.q_origin_key})},{id:"mac",langKey:"host_name_mac",cellValueFunction:entry=>{const result=[];return entry.hostname&&result.push(entry.hostname),entry.mac&&result.push(entry.mac),result.join(" / ")}},{id:"user"},{id:"wtp_id",langKey:"AP Name",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:(entry,column)=>{const fortigate=csfTopology.fortigateMapping[entry.fortigate];return{q_origin_key:entry[column.id],datasource:fortigate.getOmniselectProxySourceID("wireless-controller.wtp")}},collectionEntryFormatter:entry=>fDom.elem("span",{textContent:entry.q_origin_key})},{id:"wtpgrp_name",langKey:"AP Group",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:(entry,column)=>{const fortigate=csfTopology.fortigateMapping[entry.fortigate];return{q_origin_key:entry[column.id],datasource:fortigate.getOmniselectProxySourceID("wireless-controller.wtp-group")}},collectionEntryFormatter:entry=>fDom.elem("span",{textContent:entry.q_origin_key})}],defaultSortColumn:"time",defaultSortDirection:"desc"})}},templateUrl:__webpack_require__(1852),bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}};return(providers,loaderProviders)=>(providers.$compile.component("fLoginFailuresWidget",component),loaderProviders.initModules([__webpack_require__(1853)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1852:function(module,exports){var path="/migadmin/ng/system/dashboard/f-login-failures-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    context-menu="::false"\n    no-charts="::true"\n    widget-model="$ctrl.widgetModel"\n    dashboard-widget="$ctrl.dashboardWidget"\n    on-refresh="$ctrl.loadSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <div class="center-menu-items">\n        <f-mutable-search></f-mutable-search>\n    </div>\n</f-mutable-widget>\n')}]),module.exports=path},1854:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(27),__webpack_require__(31),__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,notify,fDom,ftnt_shared){const{Tooltip:Tooltip}=ftnt_shared,APS_STATES={ACCEPTED:"accepted",ROGUE:"rogue",SUPPRESSED:"suppressed",UNCLASSIFIED:"unclassified"},DASHBOARD_CACHE_KEY="rogue-ap",FILTER_OFFLINE_OPTION="filter-offline-rogue-ap",FILTER_ACCEPTED_OPTION="filter-accepted-rogue-ap";class RogueApWidget extends inject.Collectable{constructor(lang,$q){super(),this.muTable={},this.APS_STATES=APS_STATES,this.interferenceMap=new Map,this.title=lang("dashboard_widget_type::rogue-ap").toString(),this.chartColumns=["detected_by_wtp_only","ssid","manufacturer"],this.chartTotalLabels=this.chartColumns.map(()=>lang("Rogue APs").toString()),this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,$scope,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),this.viewSettings[FILTER_OFFLINE_OPTION]=this.modelData[FILTER_OFFLINE_OPTION],this.viewSettings[FILTER_ACCEPTED_OPTION]=this.modelData[FILTER_ACCEPTED_OPTION]||"enable",await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.refreshTable()}}get _UNIQUE_CACHE_KEY(){return`${DASHBOARD_CACHE_KEY}::${this.viewSettings.fortigate.serial}`}get chartsOnly(){return this.dashboardWidget&&!this.dashboardWidget.isZoomed}get showOffline(){return"disable"===this.viewSettings[FILTER_OFFLINE_OPTION]}set showOffline(enabled){this.viewSettings[FILTER_OFFLINE_OPTION]=enabled?"disable":"enable",this.refreshTable()}get showAccepted(){return"disable"===this.viewSettings[FILTER_ACCEPTED_OPTION]}set showAccepted(enabled){this.viewSettings[FILTER_ACCEPTED_OPTION]=enabled?"disable":"enable",this.refreshTable()}toggleOffline(){this.showOffline=!this.showOffline}toggleAccepted(){this.showAccepted=!this.showAccepted}getSettings($INJECTABLE$,lang){const columns=[{id:"status",langKey:"state",cellValueFunction:entry=>{let lang_key;return lang_key=entry.status===APS_STATES.ACCEPTED?"Accepted AP":entry.status===APS_STATES.ROGUE?"Rogue AP":entry.status===APS_STATES.SUPPRESSED?"Suppressed Rogue AP":"Detected AP but not yet classified",lang(lang_key)},cellFormatter:(entry,_col,value)=>{let iconClass;return iconClass=entry.status===APS_STATES.ACCEPTED?"fa-enabled":entry.status===APS_STATES.ROGUE?"ftnt-rogue-ap":entry.status===APS_STATES.SUPPRESSED?"ftnt-suppressed-rogue-ap":"fa-unknown",fDom.elem("div",null,{children:[fDom.elem("f-icon",{className:iconClass,title:value})]})},sortComparator:(_valueA,_valueB,entryA,entryB)=>entryA.status.localeCompare(entryB.status),editable:!0,editableType:"selection",editableOptions:[new ftnt_shared.MuTable.EditableOption({label:lang("Accepted AP").toString(),cellValue:lang("Accepted AP").toString(),entryValue:APS_STATES.ACCEPTED,iconClass:"fa-enabled"}),new ftnt_shared.MuTable.EditableOption({label:lang("Rogue AP").toString(),cellValue:lang("Rogue AP").toString(),entryValue:APS_STATES.ROGUE,iconClass:"ftnt-rogue-ap"}),new ftnt_shared.MuTable.EditableOption({label:lang("Suppressed Rogue AP").toString(),cellValue:lang("Suppressed Rogue AP").toString(),entryValue:APS_STATES.SUPPRESSED,iconClass:"ftnt-suppressed-rogue-ap"}),new ftnt_shared.MuTable.EditableOption({label:lang("Unclassified AP").toString(),cellValue:lang("Detected AP but not yet classified").toString(),entryValue:APS_STATES.UNCLASSIFIED,iconClass:"fa-unknown"})]},{id:"state",langKey:"status",cellValueFunction:entry=>{let value;return value=entry.is_dead?lang("ext-down"):lang("online_now"),entry.is_fake&&(value=`${value} ${lang("fake_ap")}`),value},cellFormatter:entry=>{const is_ibss=entry.capinfo&&entry.capinfo.includes("I");let title,iconClass="";entry.is_dead?(iconClass=is_ibss?"ftnt-adhoc-down":"fa-status-down",title=`${lang("last_seen")} ${entry.last_seen}`):(iconClass=is_ibss?"ftnt-adhoc-up":"fa-status-up",title=`${lang("online_now")}`);const children=[fDom.elem("f-icon",{className:iconClass,title:title})];return entry.is_fake&&children.push(fDom.elem("f-icon",{className:"fa-fake-ap",title:lang("fake_ap")})),fDom.elem("div",null,{children:children})},sortComparator:(_valueA,_valueB,entryA,entryB)=>{const rank=entry=>{let level;return level=entry.is_dead?0:2,entry.is_fake&&(level-=1),level};return rank(entryA)-rank(entryB)}},{id:"ssid",langKey:"ssid"},{id:"security_mode",langKey:"field_sec_type"},{id:"encryption",langKey:"field_encryption"},{id:"channel",type:"number",langKey:"channel"},{id:"mac",langKey:"mac_address"},{id:"manufacturer",langKey:"field_vendor"},{id:"signal_strength",langKey:"Signal Interference",cellValueFunction:entry=>entry.signal_strength?`${entry.signal_strength} ${lang("dBm")}`:lang("out_of_range"),cellFormatter:(entry,_col,value)=>{const hasInterfering=this.interferenceMap.has(entry.mac);if("number"==typeof entry.signal_strength){let macTooltipInfo=null;const children=[ftnt_shared.formatters.signalStrengthBarElement(entry.signal_strength,null,value,!0),fDom.elem("span",{textContent:value})];return hasInterfering&&(macTooltipInfo={className:"interference-tooltip",dataMac:entry.mac},children.push(fDom.elem("f-icon",{className:"fa-warning interfering-warning"}))),fDom.elem("span",macTooltipInfo,{children:children})}return fDom.elem("span",{textContent:value})},onCellRendered:element=>{const tooltipElement=element.querySelector(".interference-tooltip");if(!tooltipElement)return;const mac=tooltipElement.dataMac;let interferingAps=this.interferenceMap.get(mac);if(!interferingAps)return;const apsContent=(interferingAps=interferingAps.wtps).map((ap,index)=>{const key=0===index?`${lang("Interferes With FortiAPs")}:`:"",value=`${ap.wtp_id} ${lang("radio")} ${ap.radio}`,children=[fDom.elem("td",{textContent:key}),fDom.elem("td",{textContent:value})];return fDom.elem("tr",null,{children:children})}),content=fDom.elem("table",{className:"table slightly-condensed key-value select-tooltip-table"},{children:[fDom.elem("tbody",null,{children:apsContent})]});return Tooltip.addToElement(tooltipElement,content)},sortComparator:(_valueA,_valueB,entryA,entryB)=>{const sortValue=entry=>entry.signal_strength?entry.signal_strength:Number.MIN_SAFE_INTEGER;return sortValue(entryA)-sortValue(entryB)}},{id:"detected_by_wtp_only",langKey:"field_detected_by",type:"collection",cellValueFunction:entry=>entry.detected_by_wtp.map(wtp=>wtp.wtp_id)},{id:"detected_by_wtp",langKey:"field_detected_by",cellValueFunction:entry=>{const uniqueRadios=new Map;let uniqueAccessPoints={};entry.detected_by_wtp.forEach(function(obj){uniqueRadios.set(`${obj.wtp_id} ${obj.wtp_radio}`,obj),uniqueAccessPoints[obj.name]?uniqueAccessPoints[obj.name].push(obj.wtp_radio):uniqueAccessPoints[obj.name]=[obj.wtp_radio]});const numberOfAccessPoints=Object.keys(uniqueAccessPoints).length;if(numberOfAccessPoints>1)return`${numberOfAccessPoints} ${lang("Access Points")}`;{const firstInSet=uniqueRadios.values().next().value,radioNumber=uniqueAccessPoints[firstInSet.name].join(", ");return`${firstInSet.name} (${radioNumber})`}},cellFormatter:(_entry,_col,value)=>fDom.elem("span",{className:"tooltip-hint",textContent:value}),onCellRendered:(element,entry)=>{const uniqueRadios=new Map;entry.detected_by_wtp.forEach(obj=>{uniqueRadios.set(`${obj.wtp_id} ${obj.wtp_radio}`,obj)});const content=fDom.elem("div",{className:"ftip-detected-by"},{children:[fDom.elem("table",{className:"table"},{children:[fDom.elem("thead",null,{children:[fDom.elem("tr",null,{children:[fDom.elem("th",{className:"detected_by_ftip_header",textContent:lang("ManagedAP::wirelessMode.ac")}),fDom.elem("th",{className:"detected_by_ftip_header",textContent:lang("serial")}),fDom.elem("th",{className:"detected_by_ftip_header",textContent:lang("radio")})]})]}),fDom.elem("tbody",null,{children:Array.from(uniqueRadios.values()).map(radioentry=>fDom.elem("tr",null,{children:[fDom.elem("td",{textContent:radioentry.name}),fDom.elem("td",{textContent:radioentry.serial}),fDom.elem("td",{textContent:radioentry.wtp_radio})]}))})]})]}),tooltipElement=element.querySelector(".tooltip-hint");return Tooltip.addToElement(tooltipElement,content)},sortComparator:(_valueA,_valueB,entryA,entryB)=>{const sortValue=entry=>{const detectedList=new Set;return entry.detected_by_wtp&&entry.detected_by_wtp.forEach(function(obj){detectedList.add(obj.name)}),detectedList.size};return sortValue(entryA)-sortValue(entryB)}},{id:"on_wire",langKey:"onwire",cellValueFunction:entry=>entry.is_wired?lang("onwire"):lang("Off Wire"),cellFormatter:(entry,_col,value)=>{let iconClass;return iconClass=entry.is_wired?"fa-status-up":"fa-status-down",fDom.elem("f-icon",{title:value,className:iconClass})}},{id:"first_seen",type:"date",langKey:"field_first_seen",cellValueFunction:entry=>Date.parse(entry.first_seen)},{id:"rate",langKey:"field_rate",type:"number",numberUnit:"Mbps"},{id:"last_seen",langKey:"last_seen",type:"date",cellValueFunction:entry=>Date.parse(entry.last_seen)}],defaultColumns=["mac","ssid","status","state","signal_strength","manufacturer","detected_by_wtp","channel","on_wire"];return()=>({columns:columns,defaultColumns:defaultColumns,editable:!0,editingNeedsExternalUpdate:!0,defaultSortColumn:"state"})}refreshTable($INJECTABLE$,RogueApSource){return async({invalidateCache:invalidateCache}={invalidateCache:!0})=>{const viewOptions={showOffline:this.showOffline,showAccepted:this.showAccepted},source=await this.dashboard.getData(this._UNIQUE_CACHE_KEY,()=>Promise.resolve(new RogueApSource),{invalidateCache:invalidateCache});source.setParams({fortigate:this.viewSettings.fortigate,viewOptions:viewOptions,interferenceMap:this.interferenceMap});const settings=this.getSettings();Object.assign(this.muTable,{source:source,settings:settings})}}clear($INJECTABLE$,$http,slide,lang){return()=>{slide.confirm(lang("clear_msg")).then(async()=>{try{await $http.post("/api/v2/monitor/wifi/rogue_ap/clear_all",null,{csfProxy:this.viewSettings.fortigate}),this.refreshTable()}catch(e){this.notifyClearError()}})}}notifyChangesError($INJECTABLE$,lang){return()=>{notify.post(lang("Failed to save changes"),notify.LEVEL.ERROR)}}notifyClearError($INJECTABLE$,lang){return()=>{notify.post(lang("Failed to clear all entries"),notify.LEVEL.ERROR)}}}return function(providers,loaderProvider){return providers.$compile.component("fRogueApWidget",{templateUrl:__webpack_require__(1855),controller:RogueApWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}}),loaderProvider.initModules([__webpack_require__(1856),__webpack_require__(1858)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1855:function(module,exports){var path="/migadmin/ng/system/dashboard/f-rogue-ap-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    context-menu="::true"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="$ctrl.chartColumns"\n    chart-total-labels="::$ctrl.chartTotalLabels"\n    widget-model="$ctrl.widgetModel"\n    dashboard-widget="$ctrl.dashboardWidget"\n    on-refresh="$ctrl.refreshTable()"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <mutable-widget-controls>\n        <div ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.dashboardWidget.loading">\n            <button class="button" ng-class="{ selected: $ctrl.showOffline }" ng-click="$ctrl.toggleOffline()">\n                {{:: \'Show Offline\' | lang }}\n            </button>\n            <button class="button" ng-class="{ selected: $ctrl.showAccepted }" ng-click="$ctrl.toggleAccepted()">\n                {{:: \'show_accepted\' | lang }}\n            </button>\n        </div>\n    </mutable-widget-controls>\n    <f-rogue-ap-menu\n        class="menu-bar-component"\n        menu="::menu"\n        refresh-table="$ctrl.refreshTable()"\n        clear="$ctrl.clear()">\n    </f-rogue-ap-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1856:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){function RogueApMenu(state){this.readOnly=state.readOnlyForPage}return function(providers){return providers.$compile.component("fRogueApMenu",{templateUrl:__webpack_require__(1857),controller:RogueApMenu,bindings:{menu:"<",clear:"&"}})}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1857:function(module,exports){var path="/migadmin/ng/system/dashboard/rogue-ap/f-rogue-ap-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    <div f-menu-item-button click="$ctrl.clear()"\n    ng-if="!$ctrl.readOnly && $ctrl.menu.menuBar">\n        <f-icon class="fa-trash-o"></f-icon>\n        <span>{{::\'reset\' | lang}}</span>\n    </div>\n</div>\n<div class="center-menu-items" ng-if="$ctrl.menu.menuBar">\n    <f-mutable-search></f-mutable-search>\n</div>\n')}]),module.exports=path},1858:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((ftnt_shared,notify)=>{function RogueApSourceFactory($http,CMDB,$q,lang){const APS_STATES={ACCEPTED:"accepted",ROGUE:"rogue",SUPPRESSED:"suppressed",UNCLASSIFIED:"unclassified"};class RogueApSource extends ftnt_shared.MuTable.FixedStreamableSource{setParams({fortigate:fortigate,viewOptions:viewOptions,interferenceMap:interferenceMap}){this.selectedFortigate=fortigate,this.viewOptions=viewOptions,this.interferenceMap=interferenceMap,this.interferenceMap.clear(),this.cmdb=new CMDB("wireless-controller","ap-status",{csfProxy:this.selectedFortigate}),this.statusRogueApMapping=new Map}async _fetchEntries(){const promises=[$http.get("/api/v2/monitor/wifi/rogue_ap",{csfProxy:this.selectedFortigate}),$http.get("/api/v2/monitor/wifi/interfering_ap",{csfProxy:this.selectedFortigate}),$http.get("/api/v2/cmdb/wireless-controller/ap-status",{csfProxy:this.selectedFortigate})],filter=row=>(this.viewOptions.showAccepted||row.status!==APS_STATES.ACCEPTED)&&(this.viewOptions.showOffline||!row.is_dead),success=([rogueResp,interferingResp,statusResp])=>{if(rogueResp.status){interferingResp.data.results.forEach(entry=>{this.interferenceMap.set(entry.mac,entry)});const source=rogueResp.data.results.filter(filter);return statusResp.data.results.forEach(entry=>{this.statusRogueApMapping.set(entry.bssid,entry)}),source}};try{return this.fetchPromise||(this.fetchPromise=$q.all(promises)),success(await this.fetchPromise.finally(()=>this.fetchPromise=null))}catch(e){return notify.post(lang("Failed to load data."),notify.LEVEL.ERROR),[]}}fetchEntries(){return this._promise||(this._promise=this._fetchEntries()),this._promise.finally(()=>this._promise=null)}externallyUpdateEntry(entry){const apStatusEntry=this.statusRogueApMapping.get(entry.mac);if(!apStatusEntry){const newEntry={bssid:entry.mac,ssid:entry.ssid,status:entry.status};return this.cmdb.append(newEntry).$promise.then(({mkey:mkey})=>{this.statusRogueApMapping.set(entry.mac,Object.assign(newEntry,{q_origin_key:mkey}))})}const mkey=apStatusEntry.q_origin_key;return entry.status===APS_STATES.UNCLASSIFIED?this.cmdb.del(mkey).$promise.then(()=>{this.statusRogueApMapping.delete(entry.mac)}):this.cmdb.edit(mkey,{status:entry.status}).$promise.then(()=>{this.statusRogueApMapping.get(entry.mac).status=entry.status})}}return RogueApSource.prototype.AUTO_REFRESH=!0,RogueApSource}return providers=>{providers.$provide.factory("RogueApSource",RogueApSourceFactory)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1859:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;const{FortiGate:FortiGate}=__webpack_require__(113);__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(27),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(notify,inject){const isFortigate=obj=>obj instanceof FortiGate;const mutableWidgetComponent={controller:class extends inject.Collectable{constructor($transclude,$attrs){super(),this._$transclude=$transclude,this._hasRefreshFunction=$attrs.onRefresh}async $onInit(){this.loadingPromise&&await this.loadingPromise.promise,this.dashboardCsf=this.dashboard.csfEnabled,this.viewSettings&&(this.otherSettingsWatch=Object.keys(this.viewSettings).reduce((array,settings)=>(isFortigate(this.viewSettings[settings])||array.push(()=>this.viewSettings[settings]),array),[])),this.setupWatch()}setupWatch($INJECTABLE$,$scope,csfTopology){return()=>{$scope.$watchGroup([()=>this.dashboardWidget&&this.dashboardWidget.isZoomed,()=>this.dashboardWidget&&this.dashboardWidget.inTransition],([isZoomed,inTransition])=>{const enabled=!isZoomed&&!inTransition;this.dashboard.setAddWidgetEnableStatus(enabled)}),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,newVal=>{newVal&&(this.viewSettings.fortigate=newVal)}),this.viewSettings&&$scope.$watchGroup([()=>this.viewSettings.fortigate,...this.otherSettingsWatch],([newFortigate,...newVals],[oldFortigate,...oldVals])=>{let refresh=!1;newFortigate&&newFortigate!==oldFortigate&&(this.fortigateChangePreFunction(),refresh=!0),(refresh=newVals.some((val,idx)=>val!==oldVals[idx])||refresh)&&(this.onRefresh(),this.saveWidget())}),this.isFullScreen||$scope.$watch(()=>this.dashboardWidget&&this.dashboardWidget.isZoomed,(newValue,oldValue)=>{null!=newValue&&newValue!==oldValue&&this.zoomCallback({isZoomed:newValue})})}}get isTempDashboard(){return this.dashboard&&this.dashboard.isTemp}get isFullScreen(){return this.dashboard&&this.dashboard.isStandaloneLayout()}async saveWidget(){const update=Object.keys(this.viewSettings).reduce((map,key)=>(isFortigate(this.viewSettings[key])?map[key]=this.viewSettings[key].serial:map[key]=this.viewSettings[key],map),{});this.modelData.fortigate||delete update.fortigate,Object.assign(this.modelData,update),await this.dashboard.widgetUpdate(this.widgetModel,this.modelData.id,this.modelData)}detachToStandalone($INJECTABLE$,dashboardConfig){return()=>{const widgetConfig=dashboardConfig.getWidgetConfig()[this.modelData.type];dashboardConfig.editDashboard(null,null,{"layout-type":"standalone",csf:"disable",widget:[this.modelData],name:widgetConfig.standaloneName||this.widgetTitle},null,!0)}}},templateUrl:__webpack_require__(1860),bindings:{widgetTitle:"<",source:"<",settings:"<",instance:"=?",chartColumns:"<?",chartsOnly:"<?",chartTotalLabels:"<?",noCharts:"<?",contextMenu:"<",dashboard:"<",dashboardWidget:"=?",widgetModel:"<",modelData:"<",chartColors:"&",onRefresh:"&",viewSettings:"<",onDoubleClick:"&?",onContextMenu:"&?",fortigateChangePreFunction:"&",zoomCallback:"&",loadingPromise:"<?",allFortigates:"<?"},transclude:{mutableWidgetControls:"?mutableWidgetControls",mutableWidgetTitleInfo:"?mutableWidgetTitleInfo"}},mutablewidgetMenuTranscludeComponent={controller:class{constructor($element){this._$element=$element}$onInit(){this.mutableWidget._$transclude((cloned,scope)=>{scope.menu=this.menu,this._$element.append(cloned)})}},bindings:{menu:"<",mutableWidget:"<"}};return providers=>{providers.$compile.component("fMutableWidget",mutableWidgetComponent),providers.$compile.component("fMutableWidgetMenuTransclude",mutablewidgetMenuTranscludeComponent)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1860:function(module,exports){var path="/migadmin/ng/system/dashboard/f-mutable-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-mutable\n    widget-title="$ctrl.widgetTitle"\n    source="$ctrl.source"\n    settings="$ctrl.settings"\n    instance="$ctrl.instance"\n    chart-columns="$ctrl.chartColumns"\n    charts-only="$ctrl.chartsOnly"\n    no-charts="$ctrl.noCharts"\n    chart-colors="$ctrl.chartColors({value, column})"\n    chart-total-labels="::$ctrl.chartTotalLabels"\n    full-screen-widget="$ctrl.isFullScreen"\n    dashboard-widget="$ctrl.dashboardWidget"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)"\n    has-settings="::true"\n    widget-model="$ctrl.widgetModel"\n    context-menu="$ctrl.contextMenu"\n    on-refresh="$ctrl.onRefresh()"\n    on-double-click="$ctrl.onDoubleClick({$entry})">\n    <after-title>\n        <div ng-transclude="mutableWidgetTitleInfo"></div>\n    </after-title>\n    <extra-controls>\n        <button ng-class="{bare: !$ctrl.dashboardWidget.isZoomed}"\n            ng-if="$ctrl._hasRefreshFunction"\n            ng-click="$ctrl.onRefresh()">\n            <div><f-icon class="fa-refresh"></f-icon></div>\n        </button>\n        <button type="button" ng-class="{primary: $ctrl.isTempDashboard}" f-tip-target\n            ng-if="$ctrl.dashboardWidget.isZoomed && (!$ctrl.isFullScreen || $ctrl.dashboard.isTemp)"\n            ng-click="$ctrl.detachToStandalone()">\n            <f-icon class="fa-external-link"></f-icon>\n            <div f-tip>\n                {{::\'Save as Monitor\' | lang}}\n            </div>\n        </button>\n        <div ng-transclude="mutableWidgetControls"></div>\n        <f-widget-fortigate-chooser\n            ng-if="!$ctrl.dashboardWidget.inTransition && !$ctrl.dashboardWidget.loading"\n            fortigate="$ctrl.viewSettings.fortigate"\n            all-fortigates="$ctrl.allFortigates"\n            widget-model="::$ctrl.widgetModel"\n            full-widget="$ctrl.dashboardWidget.isZoomed || $ctrl.isFullScreen">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <f-mutable-widget-menu-transclude menu="menu" mutable-widget="::$ctrl" class="menu-bar-component">\n    </f-mutable-widget-menu-transclude>\n</f-dashboard-mutable>\n')}]),module.exports=path},1861:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){const DEFAULT_POLL_RATE=1e4;function factory($timeout){return class{constructor(){this._map=new Map}getCacheInfo(key){return this._map.get(key)}subscribe(key,dataPromiseFn,pollrate=DEFAULT_POLL_RATE){this._map.has(key)?this._map.get(key).subscriber++:(this._map.set(key,{data:null,subscriber:1,pollFunction:function(){dataPromiseFn().then(result=>{this.data=result,this.timeoutPromise=$timeout(this.pollFunction.bind(this),pollrate)})}}),this._map.get(key).pollFunction())}unsubscribe(key){if(this._map.has(key)){const cacheInfo=this._map.get(key);cacheInfo.subscriber--,cacheInfo.subscriber||($timeout.cancel(cacheInfo.timeoutPromise),this._map.delete(key))}}clearAll(){this._map.forEach(cacheInfo=>{$timeout.cancel(cacheInfo.timeoutPromise)})}}}return providers=>providers.$provide.factory("PolledDashboardCache",factory)}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1863:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){class WidgetFortigateChooser extends inject.Collectable{$onInit($INJECTABLE$,$scope,csfTopology){return async()=>{await csfTopology.buildIfNecessary(),this.widgetRelativeWidth=this.widgetModel.getRelativeWidth(),this.csfEnabled=csfTopology.csfEnabled,this.dashboardCsf=this.dashboard.csfEnabled,$scope.$watch(()=>this.widgetModel&&this.widgetModel.getRelativeWidth(),relativeWidth=>this.widgetRelativeWidth=relativeWidth)}}}WidgetFortigateChooser.prototype.SMALL_WIDTH_LIMIT=inject.mark(function(widgetShared){return widgetShared.RELATIVE_WIDTH_LIMIT.SMALL});const component={controller:WidgetFortigateChooser,templateUrl:__webpack_require__(1864),bindings:{fortigate:"=",allFortigates:"<?",fullWidget:"<?",widgetModel:"<",selectionDisabled:"<?"},require:{dashboard:"^fSystemDashboard"}};return providers=>providers.$compile.component("fWidgetFortigateChooser",component)}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1864:function(module,exports){var path="/migadmin/ng/system/dashboard/f-widget-fortigate-chooser.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<span ng-if="$ctrl.csfEnabled && !$ctrl.dashboardCsf">\n    <f-omniselect-entry\n        ng-if="!$ctrl.fullWidget || $ctrl.selectionDisabled"\n        id="$ctrl.fortigate && $ctrl.fortigate.serial || $ctrl.fortigate"\n        source="::\'csfFortiGates\'"\n        class="widget-current-selected-fortigate"\n        ng-class="{\'icon-only\': $ctrl.widgetRelativeWidth < $ctrl.SMALL_WIDTH_LIMIT}">\n    </f-omniselect-entry>\n    <f-csf-fortigate-chooser\n        ng-if="$ctrl.fullWidget && !$ctrl.selectionDisabled"\n        fortigate="$ctrl.fortigate"\n        local="::true"\n        all-fortigates="$ctrl.allFortigates">\n    </f-csf-fortigate-chooser>\n</span>\n')}]),module.exports=path},530:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26),__webpack_require__(27),__webpack_require__(30),__webpack_require__(437),__webpack_require__(438),__webpack_require__(439),__webpack_require__(440),__webpack_require__(441),__webpack_require__(442),__webpack_require__(443),__webpack_require__(444)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,inject,notify,fLog){function Dashboard($element,$scope,injector,DashboardCache,PolledDashboardCache){injector.injectMarked(this,{$scope:$scope,that:this}),this._loading=!0,this.dashboard=null,this.widgets=null,this.widgetsMap={},this._cache=new DashboardCache,this._polledCache=new PolledDashboardCache,this._cachePromiseMap={},this.isTemp=this.temporary,this._setupInitialDashboard(),this._disabledAddFunction=!1}return Dashboard.prototype.FORTIGATE_SELECTION_MODE=inject.mark(function(dashboardConfig){return dashboardConfig.FORTIGATE_SELECTION_MODE}),Dashboard.prototype.WIDGETS=inject.mark(dashboardConfig=>dashboardConfig.getWidgetConfig()),Dashboard.prototype.WIDGET_SIZE=300,Dashboard.prototype.$onDestroy=function(){this._polledCache.clearAll()},Dashboard.prototype.getData=inject.mark(function($q){return async function(key,promiseGetter,options={invalidateCache:!1}){if(!this._cache.isValid(key)||options.invalidateCache){this._cachePromiseMap[key]||(this._cachePromiseMap[key]=$q.when(promiseGetter()));const data=await this._cachePromiseMap[key].finally(()=>this._cachePromiseMap[key]=null);return data&&this._cache.set(key,data),data}return this._cache.get(key).data}}),Dashboard.prototype.getPolledCacheInfo=function(key){return this._polledCache.getCacheInfo(key)},Dashboard.prototype.subscribeToPolledCache=function(key,fetchFunction,pollRate){if(!key)throw new Error("required param key not defined");if("function"!=typeof fetchFunction)throw new Error("required param fetchFunction not defined");this._polledCache.subscribe(key,fetchFunction,pollRate)},Dashboard.prototype.unsubscribeToPolledCache=function(key){this._polledCache.unsubscribe(key)},Dashboard.prototype._setDashboard=inject.mark(dashboardConfig=>(function(dashboard){this.dashboard=dashboard,this.isPermanent="enable"===dashboard.permanent,this.widgets=this.dashboard.widget,this.widgetsMap={};for(let i=this.widgets.length-1;i>=0;i--){const widget=this.widgets[i],widgetConfig=this.WIDGETS[widget.type];widgetConfig&&dashboardConfig.isScopeValid(widgetConfig.scope)&&dashboardConfig.isWidgetPermitted(widgetConfig)?this.widgetsMap[widget.id]=widget:(fLog.warn(`Ignoring invalid widget of type "${widget.type}"`),this.widgets.splice(i,1))}})),Dashboard.prototype.onWidgetRemoved=function(widgetModel){var widgetID=widgetModel.getModelData().id,widgetToRemove=this.widgetsMap[widgetID];this.widgets.splice(this.widgets.indexOf(widgetToRemove),1),delete this.widgetsMap[widgetID],this._updateDashboard()},Dashboard.prototype.onWidgetsUpdated=function(widgetModels){widgetModels.forEach(function(widgetModel){var widgetID=widgetModel.getModelData().id,widget=this.widgetsMap[widgetID];widget["x-pos"]=widgetModel.getXPosition(),widget["y-pos"]=widgetModel.getYPosition(),widget.width=widgetModel.getWidth(),widget.height=widgetModel.getHeight()}.bind(this)),this._updateDashboard()},Dashboard.prototype.widgetUpdate=async function(widgetModel,widgetID,data,dashboard){const widget=this.widgetsMap[widgetID];if(!widget)throw new Error(`No widget for given widget ID ${widgetID}`);Object.assign(widget,data),await this._updateDashboard(dashboard)},Dashboard.prototype.editWidget=inject.mark(function($rootScope,slide,lang,dashboardCommon,fortiviewConfig){return function(widgetModel){const modelData=widgetModel.getModelData(),config=this.WIDGETS[modelData.type],widgetType=modelData.type,typeLabel="fortiview"===widgetType?fortiviewConfig.createDefaultWidgetTitle(modelData["fortiview-type"]):lang(`dashboard_widget_type::${widgetType}`),template=`<f-edit-dashboard-widget\n                widget-model="::widgetModel"' +\n                component="::'${config.customizeComponent}'"\n                dashboard-layout-type="::dashboardLayoutType"\n                fortigate-selection-mode="::fortigateSelectionMode">\n            </f-edit-dashboard-widget>`,scope=$rootScope.$new();scope.dashboardLayoutType=this.dashboard["layout-type"],scope.fortigateSelectionMode=this.fortigateSelectionMode,scope.widgetModel=widgetModel,slide.open("dashboardEditWidget",{template:template,parentScope:scope,data:{},options:{title:lang("Edit Dashboard Widget - {0}",[typeLabel]).toString(),fullHeight:!0,width:dashboardCommon.ADD_EDIT_WIDGET_SLIDE_WIDTH}}).then(data=>{const updatedWidget=data.updatedWidget,updatedDashboard=data.dashboard,widget=this.widgetsMap[updatedWidget.id];this.widgetUpdate(widgetModel,updatedWidget.id,updatedWidget,updatedDashboard).then(()=>{this.dashboardController.reinstantiateWidget(widgetModel.getID(),widget)})}).finally(function(){scope.$destroy()})}}),Dashboard.prototype._getNextWidgetID=function(){for(var nextID=1;this.widgetsMap[nextID];)nextID++;return nextID},Dashboard.prototype.addWidget=inject.mark(function(slide,lang,dashboardConfig,dashboardCommon,$rootScope,fortiviewConfig){return function(prefilledWidget){var filteredWidgetTypes={};Object.entries(dashboardConfig.WIDGET_TYPES).forEach(([key,type])=>{const widget=this.WIDGETS[type];widget&&dashboardConfig.isScopeValid(widget.scope)&&dashboardConfig.isWidgetPermitted(widget)&&(filteredWidgetTypes[key]=type)});const scope=$rootScope.$new(!0);scope.data={WIDGET_TYPES:filteredWidgetTypes,WIDGET_CATEGORIES:dashboardConfig.WIDGET_CATEGORIES,WIDGET_CATEGORY_ICONS:dashboardConfig.WIDGET_CATEGORY_ICONS,WIDGET_CONFIGURATION:this.WIDGETS,currentWidgets:this.widgets,addCallback:async(newWidget,dashboard)=>{var position;const widgetConfig=this.WIDGETS[newWidget.type];var width=this.dashboardController.convertRelativeWidgetWidthToActual(newWidget.relativeWidth||widgetConfig.defaultRelativeWidth),height=this.dashboardController.convertRelativeWidgetHeightToActual(newWidget.relativeHeight||widgetConfig.defaultRelativeHeight);newWidget.id=this._getNextWidgetID(),newWidget.width=width,newWidget.height=height,position=this.dashboardController.getFirstAvailablePosition(newWidget.width,newWidget.height),newWidget["x-pos"]=position.x,newWidget["y-pos"]=position.y,this.widgets.push(newWidget),this.widgetsMap[newWidget.id]=newWidget;const widgetType=newWidget.type,dashboardType="fortiview"===widgetType?fortiviewConfig.createDefaultWidgetTitle(newWidget["fortiview-type"]):lang(`dashboard_widget_type::${widgetType}`).toString();try{const widgetModel=this._createWidgetModel(newWidget);await this._updateDashboard(dashboard),this.dashboardController.addWidget(widgetModel),notify.post(lang("{DASHBOARD_TYPE} added successfully",[dashboardType]),notify.LEVEL.SUCCESS)}catch(e){notify.post(lang("Failed to add {DASHBOARD_TYPE}",[dashboardType]),notify.LEVEL.ERROR)}},prefilledWidget:prefilledWidget,dashboardLayoutType:this.dashboard["layout-type"],fortigateSelectionMode:this.fortigateSelectionMode,asStandalone:!1};return slide.open("dashboardAddWidget",{template:'<f-widget-selection data="::data"></f-widget-selection>',parentScope:scope,options:{title:lang("Add Dashboard Widget").toString(),fullHeight:!0,width:dashboardCommon.ADD_EDIT_WIDGET_SLIDE_WIDTH}}).finally(()=>{scope.$destroy()})}}),Dashboard.prototype._updateDashboard=inject.mark(function($http,$q,$timeout,state,$route){return async function(updatedDashboard){let timeout,reRouteRequired=!1;if(this.isTemp)return $q.resolve();updatedDashboard&&this.dashboard.csf!==updatedDashboard.csf?(this._loading=!0,reRouteRequired=!0,"disable"===updatedDashboard.csf&&this.widgets.forEach(widget=>{widget.fortigate||(widget.fortigate=state.serial)})):timeout=$timeout(()=>{this._loading=!0},500);try{await $http.put(this._DASHBOARD_URI,Object.assign(this.dashboard,updatedDashboard)),reRouteRequired?$route.reload():($timeout.cancel(timeout),this._loading=!1)}catch(e){return this._onFailureToSave(),$q.reject()}}}),Dashboard.prototype.getChosenFortigate=inject.mark(function(csfTopology){return widgetData=>"all"===widgetData.fortigate?{allFortigates:!0,q_origin_key:"all",datasource:"csfFortiGates"}:!this.csfEnabled&&csfTopology.getDevice(widgetData.fortigate)||csfTopology.selectedFortigate}),Dashboard.prototype._DASHBOARD_URI=inject.mark(function(dashboardCommon,$routeParams){return`${dashboardCommon.DASHBOARD_CMDB_URI}${$routeParams.id}`}),Dashboard.prototype._notifyFailure=inject.mark(function(lang){return function(){var msg=lang("Failed to save changes").toString();notify.post(msg,notify.LEVEL.ERROR)}}),Dashboard.prototype._onFailureToSave=inject.mark(function($route,that){return function(){this._notifyFailure(),$route.reload()}.bind(that)}),Dashboard.prototype._createWidgetModel=inject.mark(function(DashboardWidgetModel){return function(widget){const type=widget.type,configuration=this.WIDGETS[type];return new DashboardWidgetModel({id:widget.id&&widget.id.toString(),componentTag:configuration.component,xPosition:widget["x-pos"],yPosition:widget["y-pos"],width:widget.width,height:widget.height,modelData:widget})}}),Dashboard.prototype._setupInitialDashboard=inject.mark(function($location,$http,dashboardConfig,state,csfTopology,$route,$routeParams){return async function(){if(this.isTemp){const params=$location.search(),type=$routeParams.type;await csfTopology.buildIfNecessary();const tempWidget=Object.assign(dashboardConfig.getWidgetDefaultConfig(type),{type:type,fortigate:csfTopology.selectedFortigate.serial||state.serial,"x-pos":0,"y-pos":0,width:6,height:3},params);this._setDashboard({columns:10,csf:"disable","layout-type":"standalone",permanent:"disable",vdom:state.current_vdom,scope:"vdom",widget:[tempWidget]}),this.initialWidgets=this.widgets.map(widget=>this._createWidgetModel(widget)),this._loading=!1}else try{const response=await $http.get(this._DASHBOARD_URI);this._setDashboard(response.data.results[0]),dashboardConfig.isSameVDOM(this.dashboard.vdom)||$location.url("/error/404"),this.initialWidgets=this.widgets.map(widget=>this._createWidgetModel(widget)),this._loading=!1}catch(e){$location.url("/error/404")}}}),Dashboard.prototype.isStandaloneLayout=function(){return this.dashboard&&"standalone"===this.dashboard["layout-type"]},Dashboard.prototype.setAddWidgetEnableStatus=function(enabled){this._disabledAddFunction=!enabled},Object.defineProperty(Dashboard.prototype,"fortigateSelectionMode",{get:function(){return this.dashboard&&"enable"===this.dashboard.csf?this.FORTIGATE_SELECTION_MODE.DASHBOARD:this.FORTIGATE_SELECTION_MODE.WIDGET}}),Object.defineProperty(Dashboard.prototype,"csfEnabled",{get:function(){return!!this.dashboard&&"enable"===this.dashboard.csf}}),function(providers,loaderProvider){return providers.$compile.component("fSystemDashboard",{templateUrl:__webpack_require__(1720),controller:Dashboard,bindings:{temporary:"<?"}}),loaderProvider.initModules([__webpack_require__(33),__webpack_require__(1721),__webpack_require__(1723),__webpack_require__(1725),__webpack_require__(1727),__webpack_require__(1729),__webpack_require__(1731),__webpack_require__(1733),__webpack_require__(1736),__webpack_require__(1738),__webpack_require__(1740),__webpack_require__(1742),__webpack_require__(1748),__webpack_require__(1750),__webpack_require__(1752),__webpack_require__(1755),__webpack_require__(1757),__webpack_require__(1759),__webpack_require__(1761),__webpack_require__(1763),__webpack_require__(1765),__webpack_require__(1771),__webpack_require__(1775),__webpack_require__(1777),__webpack_require__(1779),__webpack_require__(436),__webpack_require__(1790),__webpack_require__(1792),__webpack_require__(1794),__webpack_require__(1795),__webpack_require__(1796),__webpack_require__(99),__webpack_require__(201),__webpack_require__(1797),__webpack_require__(1799),__webpack_require__(447),__webpack_require__(1809),__webpack_require__(1812),__webpack_require__(1816),__webpack_require__(1821),__webpack_require__(1823),__webpack_require__(1827),__webpack_require__(1832),__webpack_require__(1837),__webpack_require__(1840),__webpack_require__(1847),__webpack_require__(1849),__webpack_require__(1851),__webpack_require__(1854),__webpack_require__(1859),__webpack_require__(1861),__webpack_require__(1862),__webpack_require__(1863)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},531:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(2)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,fweb){function LicenseRenewOptions(injector){injector.injectMarked(this)}return LicenseRenewOptions.prototype.showPurchaseActions=function(){return this.license&&(this.hasNoLicense()||this.hasExpiringLicense()||this.hasUpgradeableLicense())},LicenseRenewOptions.prototype.hasNoLicense=inject.mark(function(license){return function(){return license.isNoLicense(this.license)}}),LicenseRenewOptions.prototype.hasExpiringLicense=inject.mark(function(license){return function(){return license.isExpiringLicense(this.license)}}),LicenseRenewOptions.prototype.hasUpgradeableLicense=inject.mark(function(license){return function(){return license.isUpgradeableLicense(this.license)}}),LicenseRenewOptions.prototype.renewVideo=inject.mark(function($window,help){return function(){var pageID,key;return this.isVdom?(pageID="vdom_list",key="vdom_license_purchase"):(pageID="ftgd_update",key="license_purchase_renew"),help.getVideoUrlByKey(pageID,key).then(function(url){url?$window.open(url):fweb.log.error("Failed to get purchase/renew video URL")})}}),LicenseRenewOptions.prototype.enterLicense=inject.mark(function(registration){return function(){this.isVdom?registration.openVdomLicense(this.fortigate):registration.openFortiCareLicense(this.fortigate)}}),function(providers){providers.$compile.component("fLicenseRenewOptions",{templateUrl:__webpack_require__(1735),controller:LicenseRenewOptions,bindings:{license:"<",isVdom:"<",hideRegistration:"<",fortigate:"<?"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},532:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(0),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(BUILD,inject){function LicenseLicenseItem($scope,injector,state){injector.injectMarked(this,{$scope:$scope}),this.STATUS_BASE_LANG_KEY="License::status.",this.ONE_SECOND=1e3,this.SYMBOLS=BUILD.SYMBOLS,this.isSuperAdmin=state.admin.super_admin,this.hasSystemWritePermission=state.adminHasWritePermission(state.ACCESS_GROUP.SYSTEM_CFG)}return LicenseLicenseItem.prototype._getStatusForLicense=function(){var EXPIRED=this.SYMBOLS.LICENSE_STATUS_EXPIRED,EXPIRES_SOON=this.SYMBOLS.LICENSE_STATUS_EXPIRES_SOON,status=this.license&&this.license.status;return status&&this.isForticare&&this.license.support&&Object.keys(this.license.support).every(function(key){var supportStatus=this.license.support[key].status;return supportStatus===EXPIRED?(status=EXPIRED,!1):(supportStatus===EXPIRES_SOON&&(status=EXPIRES_SOON),!0)}.bind(this)),status},LicenseLicenseItem.prototype.getStatusIcon=inject.mark(function(license){return function(status){return(status=status||this._getStatusForLicense())?license.getStatusIcon(status):""}}),LicenseLicenseItem.prototype.getSeverityLevel=inject.mark(function(license){return function(status){return(status=status||this._getStatusForLicense())?license.getSeverityLevel(status):""}}),LicenseLicenseItem.prototype.getExpiresLabel=inject.mark(function(license){return function(status){return(status=status||this._getStatusForLicense())?license.getExpiresLabelForStatus(status):""}}),LicenseLicenseItem.prototype.formatExpiresLabel=inject.mark(function(license){return function(status,expiry){return(status=status||this._getStatusForLicense())&&expiry?license.getInlineExpiresLabelForStatus(status,expiry,{skipDateModification:this.skipModifingExpiryDate}):""}}),LicenseLicenseItem.prototype.formatExpiryDate=inject.mark(function(license){return function(expiry){return license.formatExpiryDate(expiry,{skipDateModification:this.skipModifingExpiryDate})}}),LicenseLicenseItem.prototype.getSupportLangKey=inject.mark(function(license){return function(key){return license.getFortiCareSupportLangKey(key)}}),LicenseLicenseItem.prototype.translatedFortiCareIndustry=inject.mark(function(licenseRegions){return function(){return this.license&&this.license.industry?licenseRegions.translateIndustry(this.license.industry):""}}),LicenseLicenseItem.prototype.showMenu=function(event){this.menu.toggle({top:event.pageY,left:event.pageX})},LicenseLicenseItem.prototype.getFortiCarePortalPath=inject.mark(function($httpParamSerializer,state){return function(){return"?"+$httpParamSerializer({sn:this.fortigate&&this.fortigate.serial||state.serial,aid:this.license.account})}}),LicenseLicenseItem.prototype.registerFortiCare=inject.mark(function(registration){return function(){registration.openFortiCare(this.fortigate)}}),LicenseLicenseItem.prototype.addFortiCareContract=inject.mark(function(registration){return function(){registration.openFortiCareLicense(this.fortigate)}}),LicenseLicenseItem.prototype.showSystemFortiGuard=inject.mark(function($location){return function(){$location.path("/system/fortiguard")}}),LicenseLicenseItem.prototype.changeFortiCloudAccounts=inject.mark(function(registration){return function(){registration.openFortiCloudAccountTitleTransfer()}}),function(providers){providers.$compile.component("fLicenseLicenseItem",{templateUrl:__webpack_require__(1746),controller:LicenseLicenseItem,bindings:{license:"<",title:"<itemTitle",titleParams:"<itemTitleParams",isForticare:"<",skipModifingExpiryDate:"<?",fortigate:"<"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},533:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function LicenseServiceItem($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.STATUS_BASE_LANG_KEY="License::status.",this.ONE_SECOND=1e3}return LicenseServiceItem.prototype.getLicenseStatusIcon=inject.mark(function(license){return function(){if(this.license)return license.getStatusIcon(this.license.status)}}),LicenseServiceItem.prototype.getSeverityLevel=inject.mark(function(license){return function(){return this.license&&this.license.status?license.getSeverityLevel(this.license.status):""}}),LicenseServiceItem.prototype.getExpiresLabel=inject.mark(function(license){return function(){return this.license&&this.license.status?license.getExpiresLabelForStatus(this.license.status):""}}),LicenseServiceItem.prototype.formatExpiryDate=inject.mark(function(license){return function(expiry){return license.formatExpiryDate(expiry,{skipDateModification:this.skipModifingExpiryDate})}}),function(providers){providers.$compile.component("fLicenseServiceItem",{templateUrl:__webpack_require__(1747),controller:LicenseServiceItem,bindings:{license:"<",title:"<itemTitle",hasTooltip:"<",extraTooltips:"<",useProgressBar:"<",skipModifingExpiryDate:"<?"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},534:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function RouteLookup(injector){injector.injectMarked(this)}return RouteLookup.prototype.open=inject.mark(function($rootScope,slide,lang){return function(routeSourceCheck,fortigate){var scope=$rootScope.$new();scope.routeSourceCheck=routeSourceCheck,scope.fortigate=fortigate;return slide.open("route_lookup_slide",{template:'<f-route-lookup fortigate="::fortigate"\n                route-source-check="::routeSourceCheck"></f-route-lookup>',parentScope:scope,options:{fullHeight:!0,title:lang("Route Lookup").value,data:{}}}).finally(function(){scope.$destroy()})}}),function(providers,loader){return providers.$provide.service("routeLookup",RouteLookup),loader.initModules([__webpack_require__(1783)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},535:function(module,exports,__webpack_require__){"use strict";const fDatetime=__webpack_require__(34),STATS_API="/api/v2/monitor/router/statistics",IPV4_ROUTE_API="/api/v2/monitor/router/ipv4",IPV6_ROUTE_API="/api/v2/monitor/router/ipv6",LAZY_LOADING_FALLBACK_LIMIT=5e4;function StaticDynamicRoutingMonitorFactory(injector){return class extends injector.Collectable{constructor(){super()}init($INJECTABLE$,state){return fortigate=>{this.destroyed=!1,this.fortigate=fortigate,this.IPV6_ENABLED=state.featureEnabled("gui-ipv6")}}getSource($INJECTABLE$,csfTopology,RoutingMonitorSource,FixedRoutingMonitorSource){return fixedSource=>{const options={route4Api:this.fortigate.createCSFURI(IPV4_ROUTE_API),route6Api:this.fortigate.createCSFURI(IPV6_ROUTE_API),fetchCountFn:this._getCounts};return fixedSource?Promise.resolve(new FixedRoutingMonitorSource(options)):Promise.resolve(new RoutingMonitorSource(options))}}_getCounts($INJECTABLE$,$http){return()=>$http.get(this.fortigate.createCSFURI(STATS_API)).then(res=>{const results=res.data.results;return{route4:results.total_lines_ipv4,route6:this.IPV6_ENABLED?results.total_lines_ipv6:0}})}getSettings($INJECTABLE$,lang,state){return()=>{const advancedRoutingEnabled=state.featureEnabled("gui-dynamic-routing");return{id:"staticDynamicRouteMonitor$List",defaultColumns:["ip_mask","gateway","interface","distance","ip_version","type"],defaultSectionColumn:this.IPV6_ENABLED&&"ip_version",columns:[{id:"ip_version",langKey:"ip_type",hidden:!this.IPV6_ENABLED,cellValueFunction:(entry,column)=>4===entry[column.id]?lang("IPv4"):lang("IPv6")},{id:"type",langKey:"type",cellValueFunction:(entry,column)=>entry.subtype?lang("router::{type} ({subtype})",[lang(`router::${entry[column.id]}`),lang(`router::${entry.subtype}`)]):lang(`router::${entry[column.id]}`)},{id:"ip_mask",langKey:"network",type:"ip-collection"},{id:"distance",type:"number"},{id:"metric",type:"number"},{id:"gateway",type:"ip-collection"},{id:"interface",langKey:"interface",type:"omniselect",omniselectAllowFallback:!0,cellValueFunction:(entry,column)=>"::1/128"===entry.ip_mask?state.current_vdom:entry.interface&&"Null"!==entry.interface?{q_origin_key:entry.is_tunnel_route?entry.tunnel_parent:entry[column.id],datasource:this.fortigate.getOmniselectProxySourceID("firewallInterfaces")}:lang("blackhole").toString(),collectionEntryValueFunction:entry=>"string"==typeof entry?entry:entry.q_origin_key},{id:"install_date",langKey:"Up Since",type:"date",dateType:"fromNow",cellValueFunction:(entry,column)=>{if(entry[column.id])return fDatetime.fortiGateUTCToBrowserUTC(entry[column.id]*fDatetime.S_TO_MS)}},{id:"vrf",langKey:"VRF",type:"number",hidden:!advancedRoutingEnabled}]}}}purgeState(){this.destroyed=!0,Object.keys(this).forEach(key=>"destroyed"!==key&&delete this[key])}checkFixedSource(){return this._getCounts().then(res=>res.route4+res.route6<=LAZY_LOADING_FALLBACK_LIMIT)}get chartColumns(){return["type","interface"]}}}module.exports=((providers,loaderProvider)=>(providers.$provide.factory("StaticDynamicRoutingMonitor",StaticDynamicRoutingMonitorFactory),loaderProvider.initModules([__webpack_require__(536),__webpack_require__(537)])))},536:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=(ftnt_shared=>{function RoutingMonitorSourceFactory($http,$q,state){return class extends ftnt_shared.MuTable.StreamableSource{constructor(options){if(super(),this.api={route4:options&&options.route4Api,route6:options&&options.route6Api},!options||!options.fetchCountFn)throw new Error("fetchCountFn option is required");this._fetchCountFn=options.fetchCountFn,this.routeCount={route4:0,route6:0},this.IPV6_ENABLED=state.featureEnabled("gui-ipv6"),this.AUTO_REFRESH=!0}fetchEntries(start,end){const count=end-start+1,promises={};return promises.route4=$http.get(this.api.route4||"",{params:{start:start,count:count}}),promises.statistics=this._fetchCountFn(),$q.all(promises).then(responses=>{const route4Results=responses.route4.data.results;route4Results.forEach(entry=>entry.ip_version=4);const remaining=count-route4Results.length;this.routeCount=responses.statistics;let totalCount=this.routeCount.route4;return this.IPV6_ENABLED&&(totalCount+=this.routeCount.route6),this.setCount(totalCount),remaining>0&&this.IPV6_ENABLED&&end!==totalCount&&this.api.route6?$http.get(this.api.route6,{params:{start:start+route4Results.length-this.routeCount.route4,count:remaining}}).then(route6Response=>{const route6Results=route6Response.data.results;return route6Results.forEach(entry=>entry.ip_version=6),[...route4Results,...route6Results]}):route4Results})}}}return providers=>{providers.$provide.factory("RoutingMonitorSource",RoutingMonitorSourceFactory)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},537:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=(ftnt_shared=>{function FixedRoutingMonitorSourceFactory($http,$q,state){class FixedRoutingMonitorSource extends ftnt_shared.MuTable.FixedStreamableSource{constructor(options){super(),this.api={route4:options&&options.route4Api,route6:options&&options.route6Api},this.IPV6_ENABLED=state.featureEnabled("gui-ipv6")}_fetchEntries(){const promises={};return promises.route4=$http.get(this.api.route4),this.IPV6_ENABLED&&(promises.route6=$http.get(this.api.route6)),$q.all(promises).then(responses=>{let route4Results=responses.route4.data.results,route6Results=responses.route6&&responses.route6.data.results||[];return route4Results.forEach(entry=>entry.ip_version=4),route6Results.forEach(entry=>entry.ip_version=6),[...route4Results,...route6Results]})}fetchEntries(){return this._promise||(this._promise=this._fetchEntries()),this._promise.finally(()=>this._promise=null)}}return FixedRoutingMonitorSource.prototype.AUTO_REFRESH=!0,FixedRoutingMonitorSource}return providers=>{providers.$provide.factory("FixedRoutingMonitorSource",FixedRoutingMonitorSourceFactory)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}}]);