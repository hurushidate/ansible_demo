(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{1842:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8),__webpack_require__(31),__webpack_require__(79),__webpack_require__(36),__webpack_require__(34),__webpack_require__(331)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(ftnt_shared,fDom,fFirmware,fSelect,fDatetime,wifiRadioDom){const Tooltip=ftnt_shared.Tooltip,AP_STATE_ICON_MAP={authorized:"fa-enabled",disabled:"fa-disabled",discovered:"fa-unknown"},AP_HEALTH_SEVERITY_MAP={Good:"none",Fair:"medium",Poor:"critical"},SOURCE_ID={SSID:"wireless-controller.vap",AP:"wireless-controller.wtp",PROFILE:"wireless-controller.wtp-profile",INTERFACE:"firewallInterfaces"},{makeAllVdomsSourceID:makeAllVdomsSourceID,makeCSFProxySourceID:makeCSFProxySourceID}=fSelect,STATUS_PREFIX="ManagedAP::status.";function factory(injector){return class extends injector.Collectable{constructor(customTableSettings={}){super(),this.customTableSettings=customTableSettings}setParams({fortigate:fortigate,vap:vap,vapGroup:vapGroup,status:status,includeLocal:includeLocal=!1}){this.fortigate=fortigate,this.vap=vap,this.vapGroup=vapGroup,this.status=status,this.includeLocal=includeLocal}getOmniselectProxySourceID(sourceID,allVdom=!1){if(allVdom){const csfPath=this.fortigate&&this.fortigate.path,csfProxySourceID=makeCSFProxySourceID(sourceID,csfPath);return makeAllVdomsSourceID(csfProxySourceID)}return this.fortigate.getOmniselectProxySourceID(sourceID)}getSource($INJECTABLE$,ManagedAPAPSource){return shouldInvalidateCache=>new ManagedAPAPSource({fortigate:this.fortigate,status:this.status,shouldInvalidateCache:shouldInvalidateCache,includeLocal:this.includeLocal})}get chartColumns(){return["status","health_2G_radio","health_5G_radio"]}getSettings($INJECTABLE$,lang,apManager){const createOmniselectEntry=(mkey,datasource,allVdom=!1)=>{datasource=this.getOmniselectProxySourceID(datasource,allVdom);const result=fDom.elem("span",{className:"tooltip-hint"});return fDom.formatObject({element:result,mkey:mkey,datasource:datasource}),result},statusLang=status=>lang(`${STATUS_PREFIX}${status}`).toString(),STATUS_WEIGHT_ORDER=[statusLang("disconnected"),statusLang("rejected"),statusLang("Idle"),statusLang("wait_auth"),statusLang("image_downloading"),statusLang("connected_image"),statusLang("connecting"),statusLang("<24hours"),statusLang(">24hours")],getHealth=(entry,radioFreq)=>{const instance=entry.$apInstance;if(instance&&instance.isConnectedAuthorized){const health=instance.health;if(health){const radioHealth=health.radio[radioFreq].overall;if(radioHealth)return lang(radioHealth.langKey)}}},formatHealth=(entry,col,value)=>{if(value){const iconSeverityClass=`fa-severity-${AP_HEALTH_SEVERITY_MAP[value]}`,children=[fDom.elem("f-icon",{className:iconSeverityClass}),fDom.elem("span",{textContent:lang(value)})];return fDom.elem("span",{className:"tooltip-hint"},{children:children})}},formatHealthTooltip=(element,entry,radioFreq)=>{const healthElement=element.querySelector(".tooltip-hint");if(healthElement){const health=entry.$apInstance.health,children=[];health&&health.radio[radioFreq].radios.map(radio=>{children.push(((label,healthValue)=>{const severityIconClass=`fa-severity-${healthValue.severity}`;return fDom.elem("tr",null,{children:[fDom.elem("td",{textContent:label}),fDom.elem("td",null,{children:[fDom.elem("f-icon",{className:severityIconClass}),fDom.elem("span",{textContent:lang(healthValue.langKey)})]})]})})(lang("Radio {ID}",[radio.radio_id]),radio.overall))});const detailsButton=fDom.elem("button",{className:"button"},{children:[fDom.elem("f-icon",{className:"fa-eye"}),fDom.elem("span",{textContent:lang("Details")})],events:{click:function(){apManager.openDetailsSlide(entry["wtp-id"],this.fortigate)}}});detailsButton.setAttribute(Tooltip.CLOSE_ON_CLICK_ATTRIBUTE,"true");const buttonRow=fDom.elem("tr",null,{children:[fDom.elem("td",null,{children:[detailsButton],attributes:{colspan:2}})]}),table=fDom.elem("table",{className:"table key-value slightly-condensed"},{children:[fDom.elem("tbody",null,{children:children})]}),tooltipContent=fDom.elem("div",null,{children:[table,buttonRow]});return Tooltip.addToElement(healthElement,tooltipContent,{showDelay:!0,fixed:!0})}},columns=[{id:"status",langKey:"field_status",cellValueFunction:entry=>{let status=entry.$apInstance.status;const state=entry.$apInstance.state;if(null==status)return"";if("discovered"===state)status="wait_auth";else if("disabled"===state)status="rejected";else if("connected"===status){const generalHealth=entry.$apInstance.health.general;generalHealth.connection_uptime&&(status=generalHealth.connection_uptime.connectionUptimeDays?">24hours":"<24hours")}return statusLang(status)},cellFormatter:(entry,col,value)=>{const state=entry.$apInstance.state,status=entry.$apInstance.status;let iconClass=AP_STATE_ICON_MAP[state];if(value)return value===statusLang("image_downloading")||value===statusLang("connected_image")?iconClass="fa-download":"authorized"===state&&"connected"!==status&&(iconClass="fa-status-down"),fDom.elem("div",null,{children:[fDom.elem("f-icon",{className:iconClass}),fDom.elem("span",{textContent:value})]})},sortComparator:(valueA,valueB)=>STATUS_WEIGHT_ORDER.indexOf(valueA)-STATUS_WEIGHT_ORDER.indexOf(valueB)},{id:"health_2G_radio",langKey:"health_2G_radio",cellValueFunction:entry=>getHealth(entry,"24ghz"),cellFormatter:formatHealth,onCellRendered:(element,entry)=>formatHealthTooltip(element,entry,"24ghz")},{id:"health_5G_radio",langKey:"health_5G_radio",cellValueFunction:entry=>getHealth(entry,"5ghz"),cellFormatter:formatHealth,onCellRendered:(element,entry)=>formatHealthTooltip(element,entry,"5ghz")},{id:"name",type:"omniselect",fixed:!0,langKey:"Access Point",cellValueFunction:entry=>({q_origin_key:entry["wtp-id"],datasource:this.getOmniselectProxySourceID(SOURCE_ID.AP)})},{id:"serial",langKey:"field_serial",cellValueFunction:entry=>entry.$apInstance.serial},{id:"country_name",langKey:"field_country",cellValueFunction:entry=>entry.$apInstance.configuredCountry.name,cellFormatter:(entry,col,value)=>{const hasConflict=entry.$apInstance.isConnectedAuthorized&&entry.$apInstance.health.general.country_code.id>1,children=[fDom.elem("span",{textContent:value})];let className="";if(hasConflict){className="tooltip-hint";const warningElement=fDom.elem("f-icon",{className:"fa-negate"});children.push(warningElement)}return fDom.elem("div",{className:className},{children:children})},onCellRendered:(element,entry)=>{const warning=element.querySelector(".tooltip-hint");if(warning){const instance=entry.$apInstance,configuredCountry=instance.configuredCountry.name,configuredRegionCode=instance.configuredRegionCode,radioData=instance.radios.find(radio=>radio.country&&radio.country.name),operatingCountry=radioData?radioData.country.name:"",tooltipTitle=fDom.elem("div",{className:"table-header"},{children:[fDom.elem("f-icon",{className:"fa-negate"}),fDom.elem("span",{textContent:lang("Country/Region Mismatch")})]}),rowField=(label,value)=>fDom.elem("tr",null,{children:[fDom.elem("td",{textContent:lang(label)}),fDom.elem("td",{textContent:value})]}),children=[rowField("Regulatory Domain Code",configuredRegionCode),rowField("Configured Country/Region",configuredCountry),rowField("Operating Country/Region",operatingCountry)],tooltipContent=fDom.elem("table",{className:"table key-value slightly-condensed"},{children:[fDom.elem("tbody",null,{children:children})]}),tooltipComponent=fDom.elem("div",null,{children:[tooltipTitle,tooltipContent]});return Tooltip.addToElement(warning,tooltipComponent,{showDelay:!0,fixed:!0})}}},{id:"connected_via",langKey:"field_connected_via",type:"omniselect",cellValueFunction:entry=>{const isMesh=entry.$apInstance.isMeshMode,mkey=isMesh?entry.$apInstance.csfFortiAP.parentFortiApSerial:entry.$apInstance.connectingInterface,ds=isMesh?SOURCE_ID.AP:SOURCE_ID.INTERFACE;return{q_origin_key:mkey,datasource:this.getOmniselectProxySourceID(ds)}},cellIsValidCollectionFunction:entry=>entry.$apInstance.isMeshMode?entry.$apInstance.csfFortiAP&&entry.$apInstance.csfFortiAP.parentFortiApSerial:entry.$apInstance.uplinkInterfaceName,collectionEntryOnRender:(element,entry)=>{if("wtp"===entry.q_name){const antennaIcon=element.querySelector("f-icon");antennaIcon.parentNode.removeChild(antennaIcon);const meshIcon=fDom.elem("f-icon",{className:"ftnt-vap-mesh-backhaul"});element.prepend(meshIcon)}}},{id:"ap_profile",langKey:"field_ap_profile",type:"omniselect",cellValueFunction:entry=>({q_origin_key:entry.$apInstance.profile,datasource:this.getOmniselectProxySourceID(SOURCE_ID.PROFILE)}),onCellRendered:(element,entry)=>{if(entry.$apInstance.overrideProfile){const theElement=element.querySelector(".tooltip-hint"),tag=fDom.elem("span",{textContent:` (${lang("Overridden")})`});theElement.appendChild(tag)}}},{id:"clients",langKey:"field_clients",type:"number",cellValueFunction:entry=>entry.$apInstance.clientCount,onCellRendered:(element,entry)=>{element.classList.add("tooltip-hint");const children=entry.$apInstance.radios.map(radio=>{const{radioTagElement:radioTagElement}=wifiRadioDom.createRadioTag({id:radio.id,fullText:!0,insideTooltip:!0,disabled:radio.isDisabled}),textContent=null!=radio.clientCount?radio.clientCount:lang("n/a");return fDom.elem("div",{className:"radio-field"},{children:[radioTagElement,fDom.elem("span",{textContent:textContent})]})}),tooltipContent=fDom.elem("div",null,{children:children}),tooltip=Tooltip.addToElement(element,tooltipContent,{showDelay:!0,fixed:!0});return element.addEventListener("click",function(event){tooltip.hide(!0),event.preventDefault(),apManager.openDetailsSlide(entry.$apInstance.wtpID,entry.$apInstance.parentFortigate,{view:"CLIENTS"})}),tooltip}},{id:"os_version",langKey:"field_os_version",cellValueFunction:entry=>entry.$apInstance.version&&entry.$apInstance.version.raw||"",cellFormatter:(entry,col,value)=>{const children=[];if(entry.$apInstance.newFirmwareAvailable){const infoElement=fDom.elem("f-icon",{className:"fa-help-info"});children.push(infoElement)}return children.push(fDom.elem("span",{textContent:value})),fDom.elem("div",null,{children:children})},onCellRendered:(element,entry)=>{const info=element.querySelector(".fa-help-info");if(info){const tooltipContent=fDom.elem("span",{textContent:lang("A new firmware version is available: {BUILD}",[entry.$apInstance.latestFirmware])});return Tooltip.addToElement(info,tooltipContent,{showDelay:!0,fixed:!0})}},sortComparator:(valueA,valueB,entryA,entryB)=>{const firmwareA=entryA.$apInstance.version||fFirmware.ZERO_VERSION,firmwareB=entryB.$apInstance.version||fFirmware.ZERO_VERSION;return fFirmware.compareFirmware(firmwareB,firmwareA)}},{id:"join_time",langKey:"field_join_time",type:"date",dateType:"dateTime",cellValueFunction:entry=>entry.$apInstance.jointime.raw},{id:"ssid",langKey:"field_ssid",type:"collection",sorting:!1,collectionEntryHeight:20,cellValueFunction:entry=>entry.$apInstance.radios.reduce((ssids,radio)=>radio.isDisabled||radio.isMonitor||radio.isSniffer||radio.ssid.all||0===radio.ssid.count?(ssids.push({radioId:radio.id,disabled:radio.isDisabled,monitorMode:radio.isMonitor,sniffer:radio.isSniffer,none:radio.ssid&&radio.ssid.value&&0===radio.ssid.count,all:radio.ssid.all,ssidMode:radio.ssid.mode}),ssids):ssids.concat(Object.keys(radio.ssid.value).map((ssid,index)=>({radioId:radio.id,all:radio.ssid.all,ssid:ssid,index:index}))),[]),collectionEntryFormatter:entry=>{const children=[];if(entry.disabled||entry.monitorMode||entry.sniffer)children.push(fDom.elem("span",{textContent:lang("n/a")}));else if(entry.all)children.push(fDom.elem("span",{textContent:lang(`All ${entry.ssidMode} Mode SSIDs`)}));else if(entry.none)children.push(fDom.elem("span",{textContent:lang("none")}));else{const ssid=this.vap.getEntry(entry.ssid)||this.vapGroup.getEntry(entry.ssid);if(ssid){const mkey=ssid.q_origin_key,dsource=`${ssid.q_path}.${ssid.q_name}`;children.push(createOmniselectEntry(mkey,dsource,"vap"===ssid.q_name))}else children.push(fDom.elem("span",{textContent:""}))}return fDom.elem("div",null,{children:children})},collectionEntryOnRender:(element,entry)=>{const tooltips=[],omniselectEntry=element.querySelector(".tooltip-hint");(entry.disabled||entry.monitorMode||entry.sniffer)&&element.classList.add("disabled-value");const{radioTagElement:radioTagElement,radioTagTooltip:radioTagTooltip}=wifiRadioDom.createRadioTag({id:entry.radioId,index:entry.index,disabled:entry.disabled});if(radioTagTooltip&&tooltips.push(radioTagTooltip),element.prepend(radioTagElement),omniselectEntry){const ssid=this.vap.getEntry(entry.ssid)||this.vapGroup.getEntry(entry.ssid),mkey=ssid.q_origin_key;let srcID=`${ssid.q_path}.${ssid.q_name}`;srcID=this.getOmniselectProxySourceID(srcID,"vap"===ssid.q_name);const tooltip=fDom.setupObjectTooltip({element:omniselectEntry,mkey:mkey,datasource:srcID});tooltips.push(tooltip)}return tooltips}},{id:"oper_chan",langKey:"field_oper_chan",type:"collection",sorting:!1,cellValueFunction:entry=>entry.$apInstance.radios,collectionEntryFormatter:radio=>{const textContent=null!=radio.operatingChannel?radio.operatingChannel:lang("n/a");return fDom.elem("span",{textContent:textContent})},collectionEntryOnRender:(element,radio)=>{const{radioTagElement:radioTagElement,radioTagTooltip:radioTagTooltip}=wifiRadioDom.createRadioTag({id:radio.id,disabled:radio.isDisabled});return null==radio.operatingChannel&&element.classList.add("disabled-value"),element.prepend(radioTagElement),radioTagTooltip}},{id:"oper_txpower",langKey:"field_oper_txpower",type:"collection",sorting:!1,cellValueFunction:entry=>entry.$apInstance.radios,collectionEntryFormatter:radio=>{const textContent=null!=radio.operatingPower?`${radio.operatingPower} ${lang("dBm")}`:lang("n/a");return fDom.elem("span",{textContent:textContent})},collectionEntryOnRender:(element,radio)=>{const{radioTagElement:radioTagElement,radioTagTooltip:radioTagTooltip}=wifiRadioDom.createRadioTag({id:radio.id});return element.prepend(radioTagElement),radioTagTooltip}},{id:"channel_utilization_percent",langKey:"Channel Utilization",type:"collection",sorting:!1,cellValueFunction:entry=>entry.$apInstance.radios,collectionEntryFormatter:radio=>{const textContent=null!=radio.channelUtilization?`${radio.channelUtilization}%`:lang("n/a");return fDom.elem("span",{textContent:textContent})},collectionEntryOnRender:(element,radio)=>{const{radioTagElement:radioTagElement,radioTagTooltip:radioTagTooltip}=wifiRadioDom.createRadioTag({id:radio.id,disabled:radio.isDisabled});return null==radio.channelUtilization&&element.classList.add("disabled-value"),element.prepend(radioTagElement),radioTagTooltip}},{id:"wtp_mode",langKey:"mode",cellValueFunction:entry=>{const value="normal"===entry.$apInstance.mode?"tunnel":"bridged";return lang(value)}},{id:"comment",cellValueFunction:entry=>entry.location},{id:"fap_model",langKey:"field_fap_model",cellValueFunction:entry=>entry.$apInstance.model},{id:"lldp",langKey:"field_lldp",type:"collection",sorting:!1,cellValueFunction:entry=>entry.$apInstance.lldp.list,cellIsValidCollectionFunction:entry=>{const lldp=entry.$apInstance.lldp;return lldp&&lldp.enabled&&lldp.list.length>0},collectionFallbackFormatter:entry=>{const lldp=entry.$apInstance.lldp;let textContent="";return lldp.enabled?0===lldp.list.length&&(textContent="No LLDP neighbors"):textContent="disabled",fDom.elem("span",{textContent:lang(textContent)})},collectionEntryFormatter:lldpEntry=>{const children=[];let className;if(lldpEntry.local_port){const port=fDom.elem("span",{textContent:`${lldpEntry.local_port}: `});children.push(port)}return className=lldpEntry.ip?"tooltip-hint lldp-system-name-ip":"",children.push(fDom.elem("span",{textContent:lldpEntry.system_name,className:className})),children.push(fDom.elem("span",{textContent:" - "})),className="vlan"in lldpEntry&&lldpEntry.vlan>=0?"tooltip-hint lldp-port-vlanid":"",children.push(fDom.elem("span",{textContent:lldpEntry.port_id,className:className})),fDom.elem("div",null,{children:children})},collectionEntryOnRender:(element,lldpEntry)=>{const createTooltipFor=(theElement,keyValueArray)=>{const tooltipContent=(keyValueArray=>{const children=keyValueArray.map(([key,value])=>{const keyCell=fDom.elem("td",{textContent:key}),valueCell=fDom.elem("td",{textContent:value});return fDom.elem("tr",null,{children:[keyCell,valueCell]})});return fDom.elem("table",{className:"table key-value slightly-condensed"},{children:[fDom.elem("tbody",null,{children:children})]})})(keyValueArray);return Tooltip.addToElement(theElement,tooltipContent,{showDelay:!0,fixed:!0})},ipTooltipTarget=element.querySelector(".lldp-system-name-ip"),vlanTooltipTarget=element.querySelector(".lldp-port-vlanid"),tooltips=[];if(ipTooltipTarget){const keyValueArray=[[lang("IP address"),lldpEntry.ip]];tooltips.push(createTooltipFor(ipTooltipTarget,keyValueArray))}if(vlanTooltipTarget){const keyValueArray=[[lang("VLAN ID"),lldpEntry.vlan]];tooltips.push(createTooltipFor(vlanTooltipTarget,keyValueArray))}return tooltips}},{id:"data_chan_sec",langKey:"data_chan_sec",cellValueFunction:entry=>entry.$apInstance.channelSecurity,cellFormatter:(entry,col,value)=>{const textContent=value?lang(`wifi::dtls-policy.${value}`):"";return fDom.elem("span",{className:"dtls-value",textContent:textContent})},onCellRendered:(element,entry)=>{const dataSecValue=entry.$apInstance.channelSecurity;if(dataSecValue){const theElement=element.querySelector(".dtls-value");wifiRadioDom.prependDataSecIconToElem({element:theElement,dataSecValue:dataSecValue})}}},{id:"led_blink",langKey:"LED Blink",cellValueFunction:entry=>{let result;return result=entry.$apInstance.ledBlink.enabled?entry.$apInstance.ledBlink.unlimited?lang("enabled"):lang("Enabled for {SECONDS} seconds",[entry.$apInstance.ledBlink.duration]):lang("disabled")}},{id:"last_failure",langKey:"Last Failure Reason",cellValueFunction:entry=>entry.$apInstance.lastFailure.errorCode?entry.$apInstance.lastFailure.errorMessage:""},"csfAwareCmdbReferences"],defaultColumns=["name","status","ssid","oper_chan","health_2G_radio","health_5G_radio","clients","os_version","lldp","ap_profile","connected_via"];return()=>{const settings={id:"managed-ap-ap-list",columns:columns,defaultColumns:defaultColumns,parentChildRows:!0,rowHierarchyIDFunction:entry=>entry["wtp-id"],parentRowHierarchyIDFunction:entry=>{const parentSerial=entry.$apInstance&&entry.$apInstance.csfFortiAP&&entry.$apInstance.csfFortiAP.parentFortiApSerial;if(parentSerial&&!apManager.get(parentSerial).isLocal)return parentSerial},onRowRendered:(rowElement,entry)=>{"discovered"===entry.$apInstance.state&&rowElement.classList.add("disabled")},collectionLimit:8};return Object.assign(settings,this.customTableSettings)}}}}return(providers,loaderProviders)=>(providers.$provide.factory("ApView",factory),loaderProviders.initModules([__webpack_require__(539)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1843:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(31),__webpack_require__(36),__webpack_require__(63),__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(fDom,fSelect,fWifi,{Tooltip:Tooltip}){const AP_STATE_ICON_MAP={authorized:"fa-enabled",disabled:"fa-disabled",discovered:"fa-unknown"},SOURCE_ID={AP:"wireless-controller.wtp",SSID:"wireless-controller.vap",PROFILE:"wireless-controller.wtp-profile"},SEVERITY_TO_LEVEL_MAP={none:"low",medium:"medium",critical:"high"},SEVERITY_TO_HEALTH_CONSTANT={none:"LOW",medium:"MEDIUM",critical:"HIGH"},{makeAllVdomsSourceID:makeAllVdomsSourceID,makeCSFProxySourceID:makeCSFProxySourceID}=fSelect,STATUS_PREFIX="ManagedAP::status.";function factory(injector){return class extends injector.Collectable{constructor(customTableSettings={}){super(),this.customTableSettings=customTableSettings}setParams({fortigate:fortigate,vap:vap,vapGroup:vapGroup,status:status,includeLocal:includeLocal=!1}){this.fortigate=fortigate,this.vap=vap,this.vapGroup=vapGroup,this.status=status,this.includeLocal=includeLocal}getOmniselectProxySourceID(sourceID,allVdom=!1){if(allVdom){const csfPath=this.fortigate&&this.fortigate.path,csfProxySourceID=makeCSFProxySourceID(sourceID,csfPath);return makeAllVdomsSourceID(csfProxySourceID)}return this.fortigate.getOmniselectProxySourceID(sourceID)}makeAllVdomsProxySourceID(sourceID){const csfPath=this.fortigate&&this.fortigate.path,csfProxySourceID=makeCSFProxySourceID(sourceID,csfPath);return makeAllVdomsSourceID(csfProxySourceID)}getSource($INJECTABLE$,ManagedAPRadioSource){return shouldInvalidateCache=>new ManagedAPRadioSource({fortigate:this.fortigate,status:this.status,shouldInvalidateCache:shouldInvalidateCache,includeLocal:this.includeLocal})}get chartColumns(){return["access_point_status","radioType","operatingChannel"]}getSettings($INJECTABLE$,lang,AP_HEALTH_UTILITY){const statusLang=status=>lang(`${STATUS_PREFIX}${status}`).toString(),STATUS_WEIGHT_ORDER=[statusLang("disconnected"),statusLang("rejected"),statusLang("Idle"),statusLang("wait_auth"),statusLang("image_downloading"),statusLang("connected_image"),statusLang("connecting"),statusLang("<24hours"),statusLang(">24hours")],columns=[{id:"id",fixed:!0},{id:"access_point",langKey:"Access Point",type:"omniselect",cellValueFunction:entry=>({q_origin_key:entry.q_origin_key,datasource:this.getOmniselectProxySourceID(SOURCE_ID.AP)})},{id:"access_point_status",langKey:"FortiAP Status",cellValueFunction:entry=>{const apInstance=entry.$apInstance;let status=apInstance.status;const state=apInstance.state;if(null==status)return"";if("discovered"===state)status="wait_auth";else if("disabled"===state)status="rejected";else if("connected"===status){const generalHealth=apInstance.health.general;generalHealth.connection_uptime&&(status=generalHealth.connection_uptime.connectionUptimeDays?">24hours":"<24hours")}return statusLang(status)},cellFormatter:(entry,col,value)=>{const apInstance=entry.$apInstance,state=apInstance.state,status=apInstance.status;let iconClass=AP_STATE_ICON_MAP[state];if(value)return value===statusLang("image_downloading")||value===statusLang("connected_image")?iconClass="fa-download":"authorized"===state&&"connected"!==status&&(iconClass="fa-status-down"),fDom.elem("div",null,{children:[fDom.elem("f-icon",{className:iconClass}),fDom.elem("span",{textContent:value})]})},sortComparator:(valueA,valueB)=>STATUS_WEIGHT_ORDER.indexOf(valueA)-STATUS_WEIGHT_ORDER.indexOf(valueB)},{id:"access_point_profile",langKey:"field_ap_profile",type:"omniselect",cellValueFunction:entry=>({q_origin_key:entry.$apInstance.profile,datasource:this.getOmniselectProxySourceID(SOURCE_ID.PROFILE)}),onCellRendered:(element,entry)=>{if(entry.$apInstance.overrideProfile){const theElement=element.querySelector(".tooltip-hint"),tag=fDom.elem("span",{textContent:` (${lang("Overridden")})`});theElement.appendChild(tag)}}},{id:"ssid",langKey:"field_ssid",type:"omniselect",cellIsValidCollectionFunction:entry=>!(entry.ssid.all||entry.isMonitor||entry.isSniffer||entry.isDisabled||0===Object.keys(entry.ssid.value).length),cellValueFunction:entry=>Object.keys(entry.ssid.value).map(ssidName=>{const ssid=this.vap.getEntry(ssidName)||this.vapGroup.getEntry(ssidName);let srcID=`${ssid.q_path}.${ssid.q_name}`;return srcID=this.getOmniselectProxySourceID(srcID,"vap"===ssid.q_name),{q_origin_key:ssid.q_origin_key,datasource:srcID}}),collectionFallbackFormatter:entry=>{let langKey="";return entry.isMonitor||entry.isSniffer||entry.isDisabled?langKey="n/a":entry.ssid.all?langKey=`All ${entry.ssid.mode} Mode SSIDs`:0===Object.keys(entry.ssid.value).length&&(langKey="none"),fDom.elem("span",{textContent:lang(langKey)})}},{id:"operatingChannel",langKey:"channel"},{id:"clientCount",langKey:"client",type:"number"},{id:"channel_utilization",langKey:"Channel Utilization",type:"number",numberType:"percentage",cellValueFunction:entry=>entry.channelUtilization},{id:"operatingPower",langKey:"field_oper_txpower",type:"number",numberUnit:" dBm"},{id:"radioFrequency",langKey:"radioband",cellValueFunction:entry=>{if(null!=entry.radioFrequency)return lang(`wifi::${entry.radioFrequency}`)}},{id:"radioType",langKey:"type",cellValueFunction:entry=>{let langKey="n/a";return entry.isAP&&entry.radioType&&"unknown"!==entry.radioType&&(langKey=`wifi::${entry.radioType}`),lang(langKey)}},{id:"mode",cellValueFunction:(entry,col)=>lang(`RadioMode::${entry[col.id].toLowerCase()}`)},{id:"channel_utilization_level",hidden:!0,langKey:"Channel Utilization",cellValueFunction:({channelUtilization:channelUtilization,$apInstance:$apInstance,id:id})=>{if(null!=channelUtilization&&$apInstance&&$apInstance.health.radio[id]){const health=$apInstance.health.radio[id].channel_utilization;return`${lang(SEVERITY_TO_LEVEL_MAP[health.severity])} ${AP_HEALTH_UTILITY.rangeToLabel(SEVERITY_TO_HEALTH_CONSTANT[health.severity],"CHANNEL_UTIL","%")}`}}},{id:"health",langKey:"Health",cellValueFunction:({$apInstance:$apInstance,id:id})=>{if($apInstance&&"connected"===$apInstance.status){const radioHealth=$apInstance.health.radio[id];return lang(radioHealth.overall.langKey)}},cellFormatter:({$apInstance:$apInstance,id:id},col,val)=>{if(val){const severity=`fa-severity-${$apInstance.health.radio[id].overall.severity}`;return fDom.elem("span",null,{children:[fDom.elem("f-icon",{className:severity}),fDom.elem("span",{textContent:val})]})}}},{id:"client_count_level",hidden:!0,langKey:"client_count",cellValueFunction:({$apInstance:$apInstance,id:id})=>{if($apInstance&&$apInstance.health.radio[id]){const health=$apInstance.health.radio[id].client_count;return`${lang(SEVERITY_TO_LEVEL_MAP[health.severity])} ${AP_HEALTH_UTILITY.rangeToLabel(SEVERITY_TO_HEALTH_CONSTANT[health.severity],"CLIENT_COUNT")}`}}},{id:"interfering_aps",langKey:"interfering_ssids",type:"number",cellValueFunction:entry=>entry.interferingAps,onCellRendered:(element,entry,column,value)=>{if(parseInt(value)){element.classList.add("tooltip-hint");const tableClassName="table slightly-condensed key-value select-tooltip-table",entryRow=fDom.elem("tr",null,{children:[fDom.elem("td",{textContent:lang("interfering_ssids")}),fDom.elem("td",{textContent:value})]}),table=fDom.elem("table",{className:tableClassName},{children:[fDom.elem("tbody",null,{children:[entryRow]})]}),showAps=fDom.elem("button",{className:"button"},{children:[fDom.elem("f-icon",{className:"fa-eye"}),fDom.elem("span",{textContent:lang("Show Interfering SSIDs")})],events:{click:()=>{const serial=entry.$apInstance.serial,ap=entry.$apInstance.isLocal?fWifi.convertSerialToLocal(serial):serial,radioId=entry.id,apName=entry.$apInstance.name;this.showInterferingSsids(ap,radioId,apName)}}});showAps.setAttribute(Tooltip.CLOSE_ON_CLICK_ATTRIBUTE,"true");const footer=fDom.elem("div",{className:"select-tooltip-footer"},{children:[showAps]}),tooltipContent=fDom.elem("div",null,{children:[table,footer]});return Tooltip.addToElement(element,tooltipContent,{showDelay:!0,fixed:!0,padContent:!1})}}},{id:"interfering_aps_level",hidden:!0,langKey:"interfering_ssids",cellValueFunction:({$apInstance:$apInstance,id:id})=>{if($apInstance&&$apInstance.health.radio[id]){const health=$apInstance.health.radio[id].interfering_ssids;return`${lang(SEVERITY_TO_LEVEL_MAP[health.severity])} ${AP_HEALTH_UTILITY.rangeToLabel(SEVERITY_TO_HEALTH_CONSTANT[health.severity],"INTERFERING_APS")}`}}}],defaultColumns=["id","access_point","access_point_status","access_point_profile","ssid","clientCount","operatingChannel","radioFrequency","radioType","mode","channel_utilization","operating_power"];return()=>{const settings={id:"managed-ap-radio-list",columns:columns,defaultColumns:defaultColumns,defaultSectionColumn:"access_point"};return Object.assign(settings,this.customTableSettings)}}showInterferingSsids($INJECTABLE$,slide,$rootScope,lang){return(ap,radioId,apName)=>{const scope=Object.assign($rootScope.$new(!0),{ap:ap,radioId:radioId,fortigate:this.fortigate}),title=[lang("Interfering SSIDs for {AP}",[apName||ap]),`(${lang("Radio {ID}",[radioId])})`].join(" "),slideParams={template:'<f-interfering-aps ap="::ap" radio-id="::radioId"\n                            fortigate="::fortigate"></f-interfering-aps>',parentScope:scope,options:{fullHeight:!0,closeOnEscape:!0,title:title}};slide.open(slideParams).finally(()=>scope.$destroy())}}}}return(providers,loaderProviders)=>(providers.$provide.factory("RadioView",factory),loaderProviders.initModules([__webpack_require__(539),__webpack_require__(1844)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1844:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;const INTERFERING_AP_URL="/api/v2/monitor/wifi/interfering_ap";__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(31),__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,fDom,{formatters:formatters}){const component={controller:class extends inject.Collectable{$onInit($INJECTABLE$,lang){const settings={columns:[{id:"ssid"},{id:"mac",langKey:"AP BSSID"},{id:"channel",type:"number"},{id:"signal",type:"number",numberType:"custom",cellFormatter:(entry,col,value)=>{value=lang("{SIGNAL} dBm",[value]).toString();const children=[formatters.signalStrengthBarElement(value,null,null,!0),fDom.elem("span",{textContent:value})];return fDom.elem("span",null,{children:children})}}]};return()=>{this.muTable={source:this.fetchInterferingAps(),settings:settings}}}fetchInterferingAps($INJECTABLE$,$http){return()=>{const params={wtp:this.ap,radio:this.radioId};return $http.get(INTERFERING_AP_URL,{csfProxy:this.fortigate,params:params}).then(res=>res.data.results)}}},template:'<f-mutable source="$ctrl.muTable.source" settings="$ctrl.muTable.settings"\n        context-menu="::false"></f-mutable>"',bindings:{fortigate:"<?",ap:"<",radioId:"<"}};return provider=>provider.$compile.component("fInterferingAps",component)}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1845:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(30),__webpack_require__(8),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(fLog,ftnt_shared,notify){const SOURCE_ID={GROUP:"wireless-controller.wtp-group",AP:"wireless-controller.wtp",PROFILE:"wireless-controller.wtp-profile"},Omniselect=ftnt_shared.Omniselect,createPlatformProfileMapping=profiles=>profiles.reduce((map,profile)=>{return profile.platform&&profile.platform.type&&(Array.isArray(map[profile.platform.type])||(map[profile.platform.type]=[]),map[profile.platform.type].push(profile.name)),map},{});function factory(injector){return class extends injector.Collectable{constructor(customTableSettings={}){super(),this.customTableSettings=customTableSettings}setParams({fortigate:fortigate,status:status}){this.fortigate=fortigate,this.status=status}getSource($INJECTABLE$,lang,apManager,$q){return async()=>{try{this.status.loading=!0;const[profiles]=await $q.all([this.getOmniselectSourceData(SOURCE_ID.PROFILE).then(createPlatformProfileMapping),apManager.build(this.fortigate)]),result=await this.getOmniselectSourceData(SOURCE_ID.GROUP).then(response=>response.map(apGroup=>((apGroup,profiles)=>{const instances=apGroup.wtps.map(entry=>apManager.get(entry["wtp-id"]));let platformType,samePlatform=!1,supportedProfiles=[];return 1===instances.length?(platformType=instances[0].platformType,samePlatform=!0):instances.length&&(platformType=instances[0].platformType,samePlatform=instances.every(instance=>instance.platformType===platformType)),samePlatform&&(supportedProfiles=profiles[platformType]),Object.assign({},apGroup,{$supportedProfiles:supportedProfiles,$apInstances:instances})})(apGroup,profiles)));return this.status.loading=!1,this.status.apStatistics=apManager.getAPStat(this.fortigate.serial),result}catch(e){this.status.loading=!1;const message=e.error||e.http_error||e.message;return fLog.error(e),notify.post(lang(message),notify.LEVEL.ERROR),[]}}}getSettings($INJECTABLE$,lang){const columns=[{id:"group",langKey:"FortiAP Group",type:"omniselect",cellValueFunction:entry=>({q_origin_key:entry.q_origin_key,datasource:this.getCSFSourceID(SOURCE_ID.GROUP)})},{id:"members",langKey:"Members",type:"omniselect",cellValueFunction:entry=>entry.wtps.map(wtp=>Object.assign({},wtp,{datasource:this.getCSFSourceID(SOURCE_ID.AP)}))},{id:"platform",langKey:"platform",cellValueFunction:entry=>entry["platform-type"]||lang("wl_all")},"csfAwareCmdbReferences"],defaultColumns=["group","members","platform","cmdbReferences"];return()=>{const settings={id:"managed-ap-group-list",columns:columns,defaultColumns:defaultColumns};return Object.assign(settings,this.customTableSettings)}}get chartColumns(){return null}getCSFSourceID(sourceID){return this.fortigate.getOmniselectProxySourceID(sourceID)}getOmniselectSourceData(sourceID){return Omniselect.getSourceData(this.getCSFSourceID(sourceID))}}}return providers=>providers.$provide.factory("GroupView",factory)}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1846:function(module,exports){var path="/migadmin/ng/wifi/managed-ap/menu/f-managed-ap-list-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    \x3c!-- CREATE --\x3e\n    <div f-menu-item-submenu="$ctrl.createMenu"\n        emphasized="::true"\n        ng-if="$ctrl.menu.menuBar && !$ctrl.readOnly && !$ctrl.inWidget"\n        enabled="!$ctrl.viewStatus.loading">\n        <f-icon class="fa-plus"></f-icon>\n        <span f-lang="Create New"></span>\n    </div>\n    <div f-pop-up-menu="$ctrl.createMenu" ng-if="!$ctrl.inWidget">\n        <div f-menu-item-button click="$ctrl.createManagedAP()"\n            enabled="$ctrl.canStillCreateManagedAP()" f-tip-target>\n            <span f-lang="Managed AP"></span>\n            <f-icon ng-if="!$ctrl.canStillCreateManagedAP()" class="fa-warning">\n            </f-icon>\n            <div f-tip display-options="::{fixed: true, showDelay: true}"\n                ng-if="!$ctrl.canStillCreateManagedAP()">\n                {{:: \'Max number of tunnel FortiAPs already reached.\' | lang }}\n            </div>\n        </div>\n        <div f-menu-item-button click="$ctrl.createManagedAPGroup()">\n            <span f-lang="Managed AP Group"></span>\n        </div>\n    </div>\n    \x3c!-- EDIT --\x3e\n    <div f-menu-item-edit\n        action="$ctrl.editEntry($entry)">\n    </div>\n    \x3c!-- DETAILS --\x3e\n    <div f-menu-item-button ng-if="!$ctrl.menu.menuBar && !$ctrl.groupViewItem"\n        click="$ctrl.showDetails($entries)"\n        enabled="$ctrl.singleSelected">\n        <f-icon class="fa-external-link"></f-icon>\n        <span f-lang="View More Details"></span>\n    </div>\n    \x3c!-- DELETE --\x3e\n    <div f-menu-item-delete fortigate="$ctrl.fortigate"\n        ng-if="$ctrl.currentView !== $ctrl.VIEW_TYPES.RADIO && !$ctrl.inWidget">\n    </div>\n    \x3c!-- REFRESH --\x3e\n    <div f-menu-item-button\n        ng-if="$ctrl.menu.menuBar && !$ctrl.inWidget"\n        click="$ctrl.refresh()" >\n        <f-icon class="fa-refresh"></f-icon>\n        <span f-lang="refresh"></span>\n    </div>\n</div>\n<div class="center-menu-items" ng-if="$ctrl.menu.menuBar">\n    <f-mutable-search></f-mutable-search>\n</div>\n<div class="right-menu-items" ng-if="::$ctrl.menu.menuBar">\n    <div ng-if="$ctrl.currentView !== $ctrl.VIEW_TYPES.GROUP && !$ctrl.inWidget" class="menu-item menu-item-padded">\n        <div f-tip-target class="tooltip-hint">\n            <span f-lang="Managed"></span>\n            <span class="number-bubble"\n                ng-class="{\'severity-critical\': $ctrl.statistics.totalMax === $ctrl.statistics.totalCount}">\n                {{ $ctrl.statistics.totalCount | number }}\n            </span>\n            <div f-tip display-options="::{fixed: true}">\n                <f-severity-progress-bar\n                    class="ap-resource-bar"\n                    low="$ctrl.statistics.normalCount"\n                    medium="$ctrl.statistics.remoteCount"\n                    total="$ctrl.statistics.totalMax"\n                    show-percentage="::true">\n                </f-severity-progress-bar>\n                <div class="ap-statistics-field">\n                    <span class="number-bubble severity-low">{{ $ctrl.statistics.normalCount | number }}</span>\n                    <span class="ap-statistics-value">\n                        {{:: \'Tunnel\' | lang }}&nbsp;({{ $ctrl.statistics.normalMax | number }}&nbsp;{{:: \'ManagedAP::Statistics.max\' | lang }})\n                    </span>\n                    <span class="number-bubble severity-medium">{{ $ctrl.statistics.remoteCount | number }}</span>\n                    <span class="ap-statistics-value">\n                        {{:: \'bridged\' | lang }}&nbsp;({{ $ctrl.statistics.remoteMax | number }}&nbsp;{{:: \'ManagedAP::Statistics.max\' | lang }})\n                    </span>\n                </div>\n                <div class="ap-statistics-field">\n                    <span>\n                        {{ $ctrl.statistics.totalCount | number }}/{{ $ctrl.statistics.totalMax | number }}&nbsp;{{:: \'ac_managed_fortiap\' | lang }}\n                    </span>\n                </div>\n                <div class="ap-statistics-field ap-statistics-footer">\n                    <a href="{{:: $ctrl.fortiapScalabilityUrl }}" target="_blank">\n                        <span f-lang="How to increase the number of supported FortiAPs."></span>\n                        <f-icon class="fa-external-link"></f-icon>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div f-menu-item-submenu="$ctrl.viewOptionPopup"\n        ng-if="$ctrl.menu.menuBar && !$ctrl.inWidget">\n        <f-icon class="fa-list-alt"></f-icon>\n        <span>{{ $ctrl.currentView | lang }}</span>\n    </div>\n    <div f-pop-up-menu="$ctrl.viewOptionPopup">\n        <div f-menu-item-button\n            ng-repeat="view in ::$ctrl.viewOptions"\n            click="$ctrl.changeView(view)"\n            extra-class="{{ view === $ctrl.currentView ? \'selected\' : \'\' }}">\n            <span>{{ view | lang }}</span>\n        </div>\n    </div>\n    <f-csf-fortigate-chooser ng-if="!$ctrl.inWidget"></f-csf-fortigate-chooser>\n</div>\n\x3c!-- additional context menus --\x3e\n<div ng-if="::!$ctrl.menu.menuBar">\n    \x3c!-- UPGRADE --\x3e\n    <div f-menu-item-button\n        enabled="$ctrl.canUpgrade"\n        ng-if="!$ctrl.readOnly"\n        click="$ctrl.upgrade($entries)">\n        <f-icon class="ftnt-install"></f-icon>\n        <span f-lang="upgrade"></span>\n    </div>\n    \x3c!-- AUTHORIZE --\x3e\n    <div f-menu-item-button ng-if="!$ctrl.groupViewItem && !$ctrl.readOnly"\n        click="$ctrl.authorizeAP($entries)"\n        enabled="$ctrl.canAuthorize">\n        <f-icon class="fa-enabled"></f-icon>\n        <span f-lang="authorize"></span>\n    </div>\n    \x3c!-- DEAUTHORIZE --\x3e\n    <div f-menu-item-button ng-if="!$ctrl.groupViewItem && !$ctrl.readOnly"\n        click="$ctrl.deauthorizeAP($entries)"\n        enabled="$ctrl.canDeauthorize">\n        <f-icon class="fa-disabled"></f-icon>\n        <span f-lang="deauthorize"></span>\n    </div>\n    \x3c!-- RESTART --\x3e\n    <div f-menu-item-button\n        ng-if="!$ctrl.readOnly"\n        enabled="$ctrl.canRestart"\n        click="$ctrl.restartAP($entries)">\n        <f-icon class="fa-undo"></f-icon>\n        <span f-lang="restart"></span>\n    </div>\n    \x3c!-- ASSIGN PROFILE --\x3e\n    <div f-menu-item-submenu="$ctrl.profileMenu"\n        ng-if="!$ctrl.readOnly && !$ctrl.inWidget"\n        enabled="$ctrl.canAssignProfile">\n        <f-icon></f-icon>\n        <span f-lang="assign_profile"></span>\n    </div>\n    <div f-pop-up-menu="$ctrl.profileMenu">\n        <div f-menu-item-button\n            ng-repeat="profile in $ctrl.lastSelected.$supportedProfiles"\n            enabled="$ctrl.selectedProfile !== profile"\n            click="$ctrl.assignProfile(profile)">\n            <span>{{:: profile }}</span>\n            <f-icon class="fa-accepted"\n                ng-if="$ctrl.selectedProfile === profile">\n            </f-icon>\n        </div>\n    </div>\n    \x3c!-- DIVIDER --\x3e\n    <div class="separator"></div>\n    \x3c!-- LOCATE AP --\x3e\n    <div f-menu-item-button\n        ng-if="$ctrl.isCurrentFortigate"\n        click="$ctrl.locateAP($entries)"\n        enabled="$ctrl.canLocateAP">\n        <f-icon class="fa-search"></f-icon>\n        <span f-lang="Locate in WiFi Maps"></span>\n    </div>\n    \x3c!-- LED BLINK --\x3e\n    <div f-menu-item-submenu="$ctrl.ledBlinkMenu"\n        enabled="$ctrl.canLEDBlink"\n        ng-if="!$ctrl.readOnly">\n        <f-icon></f-icon>\n        <span f-lang="LED Blink"></span>\n    </div>\n    <div f-pop-up-menu="$ctrl.ledBlinkMenu">\n        <div f-menu-item-submenu="$ctrl.ledBlinkStartSubmenu">\n            <f-icon class="fa-sun-o"></f-icon>\n            <span f-lang="start"></span>\n        </div>\n        <div f-menu-item-button click="$ctrl.stopLEDBlink()">\n            <f-icon class="fa-circle"></f-icon>\n            <span f-lang="stop"></span>\n        </div>\n        <div f-pop-up-menu="$ctrl.ledBlinkStartSubmenu">\n            <div f-menu-item-button ng-repeat="option in ::$ctrl.ledBlinkOptions"\n                click="$ctrl.startLEDBlink(option.value)">\n                <span>{{:: option.label }}</span>\n            </div>\n        </div>\n    </div>\n    \x3c!-- EDIT IN CLI --\x3e\n    <div f-menu-item-edit-cli fortigate="$ctrl.fortigate"></div>\n    \x3c!-- CONNECT TO CLI --\x3e\n    <div f-menu-item-button\n        ng-if="!$ctrl.readOnly && $ctrl.isCurrentFortigate && !$ctrl.groupViewItem"\n        enabled="$ctrl.canConnectToCli"\n        click="$ctrl.connectToCli($entries)"\n        f-tip-target>\n        <f-icon class="fa-terminal"></f-icon>\n        <span f-lang="Connect to CLI"></span>\n        <f-icon ng-if="!$ctrl.canConnectToCli" class="fa-warning"></f-icon>\n        <div f-tip display-options="::{fixed: true, showDelay: true}"\n            ng-if="!$ctrl.canConnectToCli">\n            <div ng-if="!$ctrl.connectToCliPermission" f-lang="-14"></div>\n            <div f-lang="FortiAP must be connected and have SSH administrative access enabled in the FortiAP profile in order to connect to the CLI."></div>\n        </div>\n    </div>\n</div>\n')}]),module.exports=path},330:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(8),__webpack_require__(36)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,ftnt_shared,fSelect){const VAP_GROUP_ID="wireless-controller.vap-group",VAP_ID="wireless-controller.vap",{Omniselect:Omniselect}=ftnt_shared,{makeAllVdomsSourceID:makeAllVdomsSourceID}=fSelect,STATUS_PREFIX="ManagedAP::status.";class ManagedAPView extends inject.Collectable{constructor(){super(),this.VIEWS={AP:"ap",RADIO:"radio",GROUP:"group"}}create($INJECTABLE$,ApView,RadioView,GroupView){return(view,customTableSettings)=>{switch(view){case this.VIEWS.AP:return new ApView(customTableSettings);case this.VIEWS.RADIO:return new RadioView(customTableSettings);case this.VIEWS.GROUP:return new GroupView(customTableSettings)}}}getChartColors($INJECTABLE$,state,lang){const statusLang=status=>lang(`${STATUS_PREFIX}${status}`).toString();let colorMap,theme=state.theme;const createColorMapping=_theme=>{const colors=ftnt_shared.colors&&ftnt_shared.colors[_theme],getSevColor=sev=>colors["severity-labels"][sev].background;return{statusColorMap:{[statusLang(">24hours")]:getSevColor("none"),[statusLang("<24hours")]:getSevColor("medium"),[statusLang("connected_image")]:getSevColor("low"),[statusLang("connecting")]:getSevColor("low-light"),[statusLang("disconnected")]:colors["security-fabric"].disconnected,[statusLang("image_downloading")]:getSevColor("high"),[statusLang("rejected")]:getSevColor("critical"),[statusLang("wait_auth")]:colors["security-fabric"].discovered,[statusLang("Idle")]:getSevColor("medium")},healthColorMap:{[lang("Poor")]:getSevColor("critical"),[lang("Fair")]:getSevColor("medium"),[lang("Good")]:getSevColor("none")},levelColorMap:{[lang("low")]:getSevColor("none"),[lang("medium")]:getSevColor("medium"),[lang("high")]:getSevColor("critical")}}};return colorMap=createColorMapping(theme),()=>(theme!==state.theme&&(theme=state.theme,colorMap=createColorMapping(theme)),colorMap)}fetchVapFor($INJECTABLE$,$q){return fortigate=>{const getSourceID=sourceID=>fortigate&&fortigate.getOmniselectProxySourceID(sourceID)||sourceID,promises={vap:Omniselect.getSourceData(getSourceID(VAP_GROUP_ID)),vapGroup:Omniselect.getSourceData(makeAllVdomsSourceID(getSourceID(VAP_ID)))};return $q.all(promises)}}}return(providers,loaderProviders)=>(providers.$provide.service("managedApView",ManagedAPView),loaderProviders.initModules([__webpack_require__(1842),__webpack_require__(1843),__webpack_require__(1845)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},331:function(module,exports,__webpack_require__){"use strict";(function(module){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(43),__webpack_require__(31),__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(fLang,fDom,ftnt_shared){const DATA_SEC_CLEAR_TEXT="clear-text",DATA_SEC_CLASS_MAP={[DATA_SEC_CLEAR_TEXT]:"dtls-policy-secure-low",["ipsec-vpn"]:"dtls-policy-secure-high",["dtls-enabled"]:"dtls-policy-secure-mid"},module={},{Tooltip:Tooltip}=ftnt_shared;return module.createRadioTag=function({id:id=0,index:index=0,fullText:fullText=!1,insideTooltip:insideTooltip=!1}={}){const classes=["number-bubble","radio-tag"];index&&classes.push("radio-hidden");const className=classes.join(" "),radioTagElement=fDom.elem("span",{textContent:fullText?fLang.translate("Radio {ID}",[id]):`R${id}`,className:className});let radioTagTooltip;if(0===index&&!insideTooltip&&!fullText){const tooltipContent=fDom.elem("span",{textContent:fLang.translate("Radio {NUMBER}",[id])});radioTagTooltip=Tooltip.addToElement(radioTagElement,tooltipContent,{fixed:!0,showDelay:!0})}return{radioTagElement:radioTagElement,radioTagTooltip:radioTagTooltip}},module.prependDataSecIconToElem=function({element:element,dataSecValue:dataSecValue=DATA_SEC_CLEAR_TEXT}){if(element){const className=`dtls-policy-data-sec-icon ${DATA_SEC_CLASS_MAP[dataSecValue]} icon-sm ${dataSecValue===DATA_SEC_CLEAR_TEXT?"fa-unlock-alt":"fa-lock"}`,icon=fDom.elem("span",null,{children:[fDom.elem("f-icon",{className:className})]});element.prepend(icon)}},module}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}).call(this,__webpack_require__(44)(module))},539:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(30),__webpack_require__(8),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(fLog,ftnt_shared,notify){const Omniselect=ftnt_shared.Omniselect,createPlatformProfileMapping=profiles=>profiles.reduce((map,profile)=>{return profile.platform&&profile.platform.type&&(Array.isArray(map[profile.platform.type])||(map[profile.platform.type]=[]),map[profile.platform.type].push(profile.name)),map},{}),SOURCE_ID={AP:"wireless-controller.wtp",PROFILE:"wireless-controller.wtp-profile"},isLocal=ap=>{return"local"===ap.q_origin_key||"WIFI0"===ap.q_origin_key.substring(7)},handleError=(e,status,lang)=>{status&&(status.loading=!1);const message=e.error||e.http_error||e.message||"Failed to load data.";fLog.error(e),notify.post(lang(message),notify.LEVEL.ERROR)},invalidateCacheForSource=(shouldInvalidateCache,fortigate)=>{shouldInvalidateCache&&Omniselect.invalidateCacheForSource(fortigate.getOmniselectProxySourceID(SOURCE_ID.AP))};function APSourceFactory($q,apManager,lang){return class extends ftnt_shared.MuTable.FixedStreamableSource{constructor({fortigate:fortigate,status:status,shouldInvalidateCache:shouldInvalidateCache=!1,includeLocal:includeLocal=!1}){super(),this.fortigate=fortigate,this.status=status||{},this.shouldInvalidateCache=shouldInvalidateCache,this.includeLocal=includeLocal}async _fetchEntries(){let source,profiles;this.status.loading=!0,invalidateCacheForSource(this.shouldInvalidateCache,this.fortigate);try{await apManager.build(this.fortigate),[source,profiles]=await $q.all([this.getOmniselectSourceData(SOURCE_ID.AP),this.getOmniselectSourceData(SOURCE_ID.PROFILE).then(createPlatformProfileMapping)])}catch(e){return handleError(e,this.status,lang),[]}const result=source.reduce((array,ap)=>{if(!this.includeLocal&&isLocal(ap))return array;const instance=apManager.get(ap["wtp-id"]),supportedProfiles=profiles[instance.platformType],res=Object.assign({},ap,{$apInstance:instance,$supportedProfiles:supportedProfiles});return array.push(res),array},[]);return this.status.loading=!1,this.status.apStatistics=apManager.getAPStat(this.fortigate.serial),result}fetchEntries(){return this._promise||(this._promise=this._fetchEntries()),this._promise.finally(()=>this._promise=null)}getOmniselectSourceData(sourceID){const csfSourceID=this.fortigate.getOmniselectProxySourceID(sourceID);return Omniselect.getSourceData(csfSourceID)}}}function RadioSourceFactory($q,apManager,lang){return class extends ftnt_shared.MuTable.FixedStreamableSource{constructor({fortigate:fortigate,status:status,shouldInvalidateCache:shouldInvalidateCache=!1,includeLocal:includeLocal=!1}){super(),this.fortigate=fortigate,this.status=status||{},this.shouldInvalidateCache=shouldInvalidateCache,this.includeLocal=includeLocal}async _fetchEntries(){let source,profiles;invalidateCacheForSource(this.shouldInvalidateCache,this.fortigate);try{await apManager.build(this.fortigate),[source,profiles]=await $q.all([this.getOmniselectSourceData(SOURCE_ID.AP),this.getOmniselectSourceData(SOURCE_ID.PROFILE).then(createPlatformProfileMapping)])}catch(e){return handleError(e,this.status,lang),[]}const result=source.reduce((radios,ap)=>{if(!this.includeLocal&&isLocal(ap))return radios;const apInstance=apManager.get(ap["wtp-id"]),supportedProfiles=profiles[apInstance.platformType];return radios.concat(apInstance.radios.map(radio=>Object.assign(radio,{q_origin_key:ap.q_origin_key,q_path:ap.q_path,q_name:ap.q_name,q_type:ap.q_type,q_ref:ap.q_ref,$apInstance:apInstance,$supportedProfiles:supportedProfiles})))},[]);return this.status.loading=!1,this.status.apStatistics=apManager.getAPStat(this.fortigate.serial),result}fetchEntries(){return this._promise||(this._promise=this._fetchEntries()),this._promise.finally(()=>this._promise=null)}getOmniselectSourceData(sourceID){const csfSourceID=this.fortigate.getOmniselectProxySourceID(sourceID);return Omniselect.getSourceData(csfSourceID)}}}return(providers,loaderProvider)=>(providers.$provide.factory("ManagedAPAPSource",APSourceFactory),providers.$provide.factory("ManagedAPRadioSource",RadioSourceFactory),loaderProvider.initModules([__webpack_require__(428)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},540:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(27),__webpack_require__(62),__webpack_require__(30)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,notify,fObject,fLog){const MANAGED_AP_EDIT_URL="/wifi/managed-ap/edit",MANAGED_GROUP_EDIT_URL="/wifi/ap-group/edit",AP_LED_BLINK_URL="/api/v2/monitor/wifi/managed_ap/led-blink",AP_CMDB_URL="/api/v2/cmdb/wireless-controller/wtp",EDIT_PATH={wtp:"managed-ap","wtp-group":"ap-group"},AP_COMMANDS={AUTH:"authorize",DEAUTH:"deauthorize",RESTART:"restart"},filterPending=ap=>ap.csfFortiAP&&!ap.csfFortiAP.hasPendingStatusUpdate;const component={controller:class extends inject.Collectable{constructor(managedApView,state,lang){super(),this.VIEW_TYPES=managedApView.VIEWS,this.viewOptions=Object.values(this.VIEW_TYPES),this.readOnly=state.readOnlyForPage,this.readPermission=state.adminHasReadPermission(state.ACCESS_GROUP.FABRIC),this.connectToCliPermission=!this.readOnly&&this.readPermission,this.ledBlinkOptions=[{value:30,label:`30 ${lang("secs")}`},{value:60,label:lang("{0} minute",[1])},{value:120,label:lang("{0} minutes",[2])},{value:300,label:lang("{0} minutes",[5])},{value:0,label:lang("Indefinite")}]}$onInit($INJECTABLE$,help){return async()=>{await help.$promise,this.fortiapScalabilityUrl=help.getHelpUrlByKeys({topicID:"wireless_physap",sectionKey:"managing-fortiap",subsectionKey:"help",linkKey:"fortiap_scalability"})}}get isCurrentFortigate(){return!this.fortigate||this.fortigate.isCurrent}createCSFURI(uri){return this.fortigate&&this.fortigate.createCSFURI(uri)||uri}get selected(){return this.menu.entries}get singleSelected(){return 1===this.selected.length}get groupViewItem(){return this.currentView&&this.currentView===this.VIEW_TYPES.GROUP}changeView(view){view!==this.currentView&&(this.currentView=view)}get lastSelected(){return this.menu.lastSelectedEntry}createManagedAP($INJECTABLE$,$location){return()=>{const search={};this.fortigate&&!this.fortigate.isCurrent&&(search.fortigate=this.fortigate.serial),$location.path(MANAGED_AP_EDIT_URL).search(search)}}registerDevices($INJECTABLE$,deviceRegistration){return()=>{deviceRegistration.registerDevices(this.selected.map(entry=>entry.$apInstance.serial),this.fortigate).then(()=>{this.refresh()})}}canStillCreateManagedAP(){return this.statistics.canStillAuthorize({mode:"normal"})}createManagedAPGroup($INJECTABLE$,$location){return()=>{const search={};this.fortigate&&!this.fortigate.isCurrent&&(search.fortigate=this.fortigate.serial),$location.path(MANAGED_GROUP_EDIT_URL).search(search)}}editEntry($INJECTABLE$,$location){return entry=>{const mkey=entry.$apInstance&&entry.$apInstance.isLocal?"local":entry.q_origin_key,path=((name,mkey)=>`/wifi/${EDIT_PATH[name]}/edit/${mkey}`)(entry.q_name,mkey),search={};this.fortigate&&!this.fortigate.isCurrent&&(search.fortigate=this.fortigate.serial),$location.path(path).search(search)}}refresh(){this.refreshTable()}showDetails($INJECTABLE$,apManager){return([entry])=>entry&&apManager.openDetailsSlide(entry.q_origin_key,this.fortigate)}sendAPCommand($INJECTABLE$,$q,lang){return(aps,command,failLangKey)=>{const handleSuccess=()=>!0;if(fObject.values(AP_COMMANDS).includes(command)){const result=aps.filter(filterPending).map(ap=>ap[command]().then(handleSuccess,()=>(ap=>(notify.post(lang(failLangKey,[ap.wtpID]),notify.LEVEL.ERROR),!1))(ap)));return $q.all(result).then(results=>results.some(res=>res))}return $q.resolve(!1)}}getSelectedAPInstances($INJECTABLE$,FortiAP,FortiAPRadio){const uniqueSelected=(entries,uniqueKey)=>{const result=[],exists={},selected=entries||this.selected;for(let x=0;x<selected.length;++x){const current=selected[x],key=current[uniqueKey];exists[key]=(!exists[key]&&result.push(current),!0)}return result},isCorrectType=entries=>{if(0===entries.length)return!0;const entry=entries[0];switch(this.currentView){case this.VIEW_TYPES.RADIO:return entry instanceof FortiAPRadio;case this.VIEW_TYPES.AP:return entry.$apInstance&&entry.$apInstance instanceof FortiAP;case this.VIEW_TYPES.GROUP:return"wtp-group"===entry.q_name}return!1};return(entries,filterLocal=!0)=>{let result=[];return entries.length&&isCorrectType(entries)&&(this.currentView===this.VIEW_TYPES.AP?result=entries.map(entry=>entry.$apInstance):this.currentView===this.VIEW_TYPES.RADIO?(result=uniqueSelected(entries,"q_origin_key"),result=entries.map(entry=>entry.$apInstance)):this.currentView===this.VIEW_TYPES.GROUP&&(result=entries.reduce((aps,apGroup)=>aps.concat(apGroup.$apInstances),[]))),filterLocal?result.filter(instance=>!instance.isLocal):result}}authorizeAP(entries){const selectedAPs=this.getSelectedAPInstances(entries);this.sendAPCommand(selectedAPs,AP_COMMANDS.AUTH,"Failed to authorize {AP}").then(()=>this.refresh())}get canAuthorize(){if(this.selected.length>0){const selectedAPs=this.getSelectedAPInstances(this.selected);return!(!selectedAPs.length||!selectedAPs.every(ap=>!ap.isAuthorized&&this.statistics.canStillAuthorize(ap)))}return!1}deauthorizeAP(entries){const selectedAPs=this.getSelectedAPInstances(entries);this.sendAPCommand(selectedAPs,AP_COMMANDS.DEAUTH,"Failed to deauthorize {AP}").then(()=>this.refresh())}get canDeauthorize(){if(this.selected.length>0){const selectedAPs=this.getSelectedAPInstances(this.selected);return!(!selectedAPs.length||!selectedAPs.every(ap=>ap.isAuthorized))}return!1}restartAP($INJECTABLE$,slide,lang){return entries=>{slide.confirm(lang("restart_confirm")).then(()=>{const selectedAPs=this.getSelectedAPInstances(entries);this.sendAPCommand(selectedAPs,AP_COMMANDS.RESTART,"Failed to restart {AP}").then(shouldRefresh=>{shouldRefresh&&(notify.post(lang("Command sent successfully"),notify.LEVEL.SUCCESS),this.refresh())})})}}get canRestart(){const selectedAPs=this.getSelectedAPInstances(this.selected);return!(!selectedAPs.length||!selectedAPs.some(ap=>ap.isConnected))}connectToCli($INJECTABLE$,apManager){return entries=>{const[selectedAP]=this.getSelectedAPInstances(entries);return selectedAP&&apManager.connectToCli(selectedAP)}}get canConnectToCli(){const entries=this.selected;if(1===entries.length){const[ap]=this.getSelectedAPInstances(entries);return this.connectToCliPermission&&ap&&ap.cliEnabled&&ap.hasValidIpv4Address}return!1}upgrade($INJECTABLE$,apManager){return entries=>{const selectedAPs=this.getSelectedAPInstances(entries).filter(filterPending);apManager.openUpgradeSlide(selectedAPs).then(()=>this.refresh())}}get canUpgrade(){const entries=this.selected;if(entries.length>0){const selectedAPs=this.getSelectedAPInstances(entries);return!(!selectedAPs.length||!selectedAPs.every(ap=>ap.isConnectedAuthorized))}return!1}startLEDBlink(duration){const entries=this.selected,selectedAPs=this.getSelectedAPInstances(entries).filter(filterPending);if(selectedAPs.length>0){const serials=selectedAPs.map(ap=>ap.serial);this._ledBlink(serials,!0,duration)}}stopLEDBlink(){const entries=this.selected,selectedAPs=this.getSelectedAPInstances(entries).filter(filterPending);if(selectedAPs.length>0){const serials=selectedAPs.map(ap=>ap.serial);this._ledBlink(serials,!1)}}get canLEDBlink(){const entries=this.selected;if(entries.length>0){const selectedAPs=this.getSelectedAPInstances(entries);return!(!selectedAPs.length||!selectedAPs.some(ap=>ap.ledBlinkSupported&&ap.isConnectedAuthorized))}return!1}_ledBlink($INJECTABLE$,$http,lang){return async(serials,blink,duration)=>{const url=this.createCSFURI(AP_LED_BLINK_URL),result=await $http.post(url,null,{params:{serials:JSON.stringify(serials),blink:blink,duration:duration}}).then(response=>response.data.results,()=>{notify.post(lang("Failed to send commands"),notify.LEVEL.ERROR)});if(result){const failedSerials=Object.keys(result).filter(serial=>!result[serial]);if(failedSerials&&failedSerials.length>0){const ids=failedSerials.join(", ");notify.post(lang("Failed to send commands for {IDS}",[ids]),notify.LEVEL.ERROR)}else notify.post(lang("Command sent successfully"),notify.LEVEL.SUCCESS)}}}locateAP($INJECTABLE$,wifiRegionService,$location){return entries=>{const selectedAPs=this.getSelectedAPInstances(entries);selectedAPs.length&&(wifiRegionService.locateAP(selectedAPs),wifiRegionService.setRegionMkey(selectedAPs[0].region.name),$location.url("/wifi/region"))}}get canLocateAP(){const selectedAPs=this.getSelectedAPInstances(this.selected);let isLocatable;if(selectedAPs.length){if(1===selectedAPs.length)isLocatable=selectedAPs[0].isLocatable;else{const regionName=selectedAPs[0].region.name;isLocatable=selectedAPs.every(ap=>ap.isLocatable&&ap.region.name===regionName)}return isLocatable}return!1}assignProfile($INJECTABLE$,$http,lang,$q){const assignProfile=(profileName,wtpId)=>{const apUrl=`${this.createCSFURI(AP_CMDB_URL)}/${wtpId}`;return $http.put(apUrl,{"wtp-profile":profileName}).then(()=>!0).catch(response=>(fLog.error(response.statusText),console.log(response),notify.post(lang("Failed to assign {PROFILE} to {AP}",[profileName,wtpId]),notify.LEVEL.ERROR),!1))};return async profileName=>{const selectedAPs=this.getSelectedAPInstances(this.selected);if(selectedAPs.length){const promises=selectedAPs.map(ap=>assignProfile(profileName,ap.wtpID));(await $q.all(promises)).some(result=>result)&&(notify.post(lang("success"),notify.LEVEL.SUCCESS),this.refresh())}}}get canAssignProfile(){const selectedAPs=this.getSelectedAPInstances(this.selected);if(1===selectedAPs.length)return!0;if(selectedAPs.length){const platformType=selectedAPs[0].platformType;return selectedAPs.every(ap=>ap.platformType===platformType)}return!1}get selectedProfile(){const selectedAPs=this.getSelectedAPInstances(this.selected);if(1===selectedAPs.length)return selectedAPs[0].profile;if(selectedAPs.length){const profile=selectedAPs[0].profile;return selectedAPs.every(ap=>ap.profile===profile)&&profile}return null}},templateUrl:__webpack_require__(1846),bindings:{menu:"<",currentView:"=?",refreshTable:"&",fortigate:"<?",viewStatus:"<?",statistics:"<?",inWidget:"<"}};return(providers,loader)=>(providers.$compile.component("fManagedApListMenu",component),loader.initModules([__webpack_require__(33),__webpack_require__(330),__webpack_require__(72),__webpack_require__(189)]))}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}}]);