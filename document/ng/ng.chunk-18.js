(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{119:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){var EXTENSION_DEVICE_CLASSES=["FortiSwitch","FortiNAC","FortiAp","PendingDevice"];function CSFTreeView(injector,$scope){injector.injectMarked(this,{$scope:$scope}),this.processedSource=[],this.setupWatcher()}CSFTreeView.prototype.setupWatcher=inject.mark(function($scope){return function(){$scope.$watch("$ctrl.source",newVal=>{this.processedSource=this.processSource(newVal)})}}),CSFTreeView.prototype.processSource=function(source){return(source||[]).filter(src=>!src.instance.isHaSlave)},CSFTreeView.prototype.openMenu=function(event,menu){menu.toggle({top:event.clientY,left:event.clientX})},CSFTreeView.prototype.onNodeClick=function(event,node){this.selectedEntry=node.instance||node,this.treeNodePopUpMenu&&this.openMenu(event,this.treeNodePopUpMenu)},CSFTreeView.prototype.showTopology=inject.mark(function($location){return function(uri){this.selectedEntry&&uri&&$location.path(uri).search({highlight:this.selectedEntry.serial})}}),CSFTreeView.prototype.showCSFSetting=inject.mark(function($location){return function(){$location.url("/fabric-connector")}}),CSFTreeView.prototype.isSelectedEntryAnExtensionDevice=function(){return this.selectedEntry&&EXTENSION_DEVICE_CLASSES.includes(this.selectedEntry.constructor.name)};var fCsfTreeView={controller:CSFTreeView,bindings:{source:"<",limit:"@",withContextMenu:"@"},templateUrl:__webpack_require__(141)};return function(providers,loader){return providers.$compile.component("fCsfTreeView",fCsfTreeView),loader.initModules([__webpack_require__(120),__webpack_require__(76),__webpack_require__(143),__webpack_require__(145),__webpack_require__(147)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},141:function(module,exports){var path="/migadmin/ng/components/csf/tree-view/f-csf-tree-view.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-tree-view\n    source="$ctrl.processedSource"\n    key="id"\n    parent-key="parentId"\n    node-click="$ctrl.onNodeClick($event, node)"\n    limit="{{ ::$ctrl.limit }}">\n    <list-bullet>\n        <f-icon ng-if="treeNode.source.instance.isUpstreamFgt"\n            class="ftnt-standard-fortigate security-fabric-node">\n        </f-icon>\n        <f-icon ng-if="!treeNode.source.instance.isUpstreamFgt"\n            class="{{ treeNode.source.instance.getIconClass(true) }}">\n        </f-icon>\n    </list-bullet>\n    <list-content class="menu-toggle-area"\n        ng-class="{\'current\': treeNode.source.instance.isCurrent}">\n        <div ng-if="treeNode.source.instance.isUpstreamFgt" class="device">\n            <span f-object-tooltip mkey="{{::treeNode.source.instance.id}}"\n                    datasource="csfFortiGates">\n                {{ treeNode.source.instance.getLabel() }}\n            </span>\n        </div>\n        <div ng-if="!treeNode.source.instance.isUpstreamFgt">\n            <div ng-if="(treeNode.source.instance.sourceID === \'csfFortiGates\') &&\n                (treeNode.source.instance.ha.length === 0)"\n                class="device"\n                ng-class="{\n                    \'disconnected\': treeView.source.disconnected[treeNode.source.instance.id],\n                    \'unconfigured-sp\': treeNode.source.instance.unconfiguredSamlSp(),\n                    \'out-of-sync\': treeNode.source.instance.csfObjectSyncEnabled() && treeNode.source.instance.areFirewallObjectsOutOfSync()\n                }">\n                <span f-object-tooltip mkey="{{::treeNode.source.instance.id}}"\n                    datasource="csfFortiGates">\n                    <span class="{{:: treeNode.source.instance.getLabelClass() || \'\'}}">\n                        {{ treeNode.source.instance.getLabel() }}\n                    </span>\n                    <span ng-if="treeNode.source.instance.isRoot && treeNode.source.instance.state.csf_enabled">\n                        ({{:: \'Fabric Root\' | lang }})\n                    </span>\n                </span>\n            </div>\n            <div ng-if="(treeNode.source.instance.sourceID === \'csfFortiGates\') &&\n                (treeNode.source.instance.ha.length !== 0)">\n                <f-csf-fortigate-ha source="treeNode.source.instance"\n                    disconnected="treeView.source.disconnected[treeNode.source.instance.id]">\n                </f-csf-fortigate-ha>\n            </div>\n            <div ng-if="treeNode.source.instance.sourceID === \'csfPendingDevices\'"\n                class="device"\n                ng-class="{\'requires-auth\': treeNode.source.instance.requiresAuthorizationDecision()}">\n                <span f-object-tooltip mkey="{{::treeNode.source.instance.id}}"\n                    datasource="csfPendingDevices">\n                    {{:: treeNode.source.instance.getLabel() }}\n                </span>\n            </div>\n            <div ng-if="treeNode.source.instance.sourceID === \'csfPreauthorizedDevices\'"\n                class="device">\n                <span f-object-tooltip mkey="{{::treeNode.source.instance.serial}}"\n                    datasource="csfPreauthorizedDevices">\n                    {{:: treeNode.source.instance.getLabel() }}\n                </span>\n            </div>\n            <div ng-if="treeNode.source.instance.sourceID === \'csfFortiAPs\'"\n                class="device"\n                ng-class="{disconnected: treeView.source.disconnected[treeNode.source.instance.id],\n                           \'requires-auth\': treeNode.source.instance.requiresAuthorizationDecision()}">\n                <span f-object-tooltip mkey="{{::treeNode.source.instance.id}}"\n                    datasource="csfFortiAPs">\n                    {{:: treeNode.source.instance.getLabel() }}\n                </span>\n            </div>\n            <div ng-if="treeNode.source.instance.sourceID === \'csfFortiNACs\'"\n                class="device"\n                ng-class="{\'requires-auth\': treeNode.source.instance.requiresAuthorizationDecision()}">\n                <span f-object-tooltip mkey="{{::treeNode.source.instance.id}}"\n                    datasource="csfFortiNACs">\n                    {{:: treeNode.source.instance.getLabel() }}\n                </span>\n            </div>\n            <div ng-if="treeNode.source.instance.isFswBlock">\n                <f-csf-fortiswitch-block source="treeNode.source.instance"\n                    disconnected="treeView.source.disconnected[treeNode.source.instance.id]">\n                </f-csf-fortiswitch-block>\n            </div>\n            <div ng-if="treeNode.source.instance.isFswHa">\n                <f-csf-fortiswitch-ha source="treeNode.source.instance"\n                    disconnected="treeView.source.disconnected[treeNode.source.instance.id]">\n                </f-csf-fortiswitch-ha>\n            </div>\n            <div ng-if="treeNode.source.instance.sourceID === \'csfFortiSwitches\'"\n                class="device"\n                ng-class="{disconnected: treeView.source.disconnected[treeNode.source.instance.id],\n                           \'requires-auth\': treeNode.source.instance.requiresAuthorizationDecision()}">\n                <span f-object-tooltip mkey="{{::treeNode.source.instance.id}}"\n                    datasource="csfFortiSwitches">\n                    {{:: treeNode.source.instance.getLabel() }}\n                </span>\n            </div>\n            <div ng-if="treeNode.source.instance.sourceID === \'csfFabricDevices\'"\n                class="device"\n                ng-class="{disconnected: treeView.source.disconnected[treeNode.source.instance.id]}">\n                <span f-object-tooltip mkey="{{::treeNode.source.instance.id}}"\n                    datasource="csfFabricDevices">\n                    {{:: treeNode.source.instance.getLabel() }}\n                </span>\n            </div>\n        </div>\n    </list-content>\n</f-tree-view>\n\n<div f-pop-up-menu="$ctrl.treeNodePopUpMenu" ng-if="$ctrl.withContextMenu">\n    <div f-menu-item-button click="$ctrl.showTopology(\'/security-fabric/topology/physical\')"\n        ng-if="$ctrl.selectedEntry.sourceID === \'csfFortiGates\'">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Show in Security Fabric > Physical Topology\' | lang }}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.showTopology(\'/security-fabric/topology/logical\')"\n        ng-if="$ctrl.selectedEntry.sourceID === \'csfFortiGates\'">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Show in Security Fabric > Logical Topology\' | lang }}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.showCSFSetting()"\n        ng-if="$ctrl.selectedEntry.sourceID === \'csfFabricDevices\'">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Configure settings in Security Fabric > Fabric Connectors\' | lang}}</span>\n    </div>\n    <f-csf-device-options\n        device="$ctrl.selectedEntry">\n    </f-csf-device-options>\n</div>\n')}]),module.exports=path},143:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){function CsfFortiswitchBlock(injector,$scope,$element){injector.injectMarked(this,{$scope:$scope,$element:$element})}CsfFortiswitchBlock.prototype.onMemberClick=function(event,member){event.stopPropagation(),this.treeViewCtrl.onNodeClick(event,{instance:member})};var fCsfFortiswitchBlock={controller:CsfFortiswitchBlock,bindings:{source:"<",disconnected:"<?"},require:{treeViewCtrl:"^^fCsfTreeView"},templateUrl:__webpack_require__(144)};return function(providers){providers.$compile.component("fCsfFortiswitchBlock",fCsfFortiswitchBlock)}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},144:function(module,exports){var path="/migadmin/ng/components/csf/tree-view/f-csf-fortiswitch-block.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div ng-repeat="member in $ctrl.source.cyclicArrangement"\n    ng-if="member.id !== $ctrl.source.componentRootId"\n    class="device"\n    ng-click="$ctrl.onMemberClick($event, member)"\n    ng-class="{disconnected: $ctrl.disconnected, \'requires-auth\': member.requiresAuthorizationDecision()}">\n    <div>\n        <f-icon class="{{ member.getIconClass(member) }}"></f-icon>\n        <span f-object-tooltip mkey="{{::member.id}}"\n            datasource="csfFortiSwitches">\n            {{:: member.getLabel() }}\n        </span>\n    </div>\n</div>\n<div class="ring"></div>\n<div class="ring-connector"></div>\n')}]),module.exports=path},145:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){function CsfFortiswitchHA(injector){injector.injectMarked(this)}CsfFortiswitchHA.prototype.onMemberClick=function(event,member){event.stopPropagation(),this.treeViewCtrl.onNodeClick(event,{instance:member})};var fCsfFortiswitchHA={controller:CsfFortiswitchHA,bindings:{source:"<",disconnected:"<?"},require:{treeViewCtrl:"^^fCsfTreeView"},templateUrl:__webpack_require__(146)};return function(providers){providers.$compile.component("fCsfFortiswitchHa",fCsfFortiswitchHA)}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},146:function(module,exports){var path="/migadmin/ng/components/csf/tree-view/f-csf-fortiswitch-ha.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="ha-type">\n    <span ng-if="$ctrl.source.haType === \'active-active\'">\n        {{:: \'ha_aa\' | lang }}\n    </span>\n    <span ng-if="$ctrl.source.haType === \'active-passive\'">\n        {{:: \'ha_ap\' | lang }}\n    </span>\n</div>\n<div class="device"\n    ng-click="$ctrl.onMemberClick($event, $ctrl.source.fortiswitchMembers[0])"\n    ng-class="{disconnected: $ctrl.disconnected, \'requires-auth\': $ctrl.source.fortiswitchMembers[0].requiresAuthorizationDecision()}">\n    <div>\n        <f-icon class="{{ $ctrl.source.fortiswitchMembers[0].getIconClass(member) }}"></f-icon>\n        <span f-object-tooltip mkey="{{::$ctrl.source.fortiswitchMembers[0].id}}"\n            datasource="csfFortiSwitches">\n            {{:: $ctrl.source.fortiswitchMembers[0].getLabel() }}\n        </span>\n    </div>\n</div>\n<div class="device"\n    ng-click="$ctrl.onMemberClick($event, $ctrl.source.fortiswitchMembers[1])"\n    ng-class="{disconnected: $ctrl.disconnected, \'requires-auth\': $ctrl.source.fortiswitchMembers[0].requiresAuthorizationDecision()}">\n    <div>\n        <f-icon class="{{ $ctrl.source.fortiswitchMembers[1].getIconClass(member) }}"></f-icon>\n        <span f-object-tooltip mkey="{{::$ctrl.source.fortiswitchMembers[1].id}}"\n            datasource="csfFortiSwitches">\n            {{:: $ctrl.source.fortiswitchMembers[1].getLabel() }}\n        </span>\n    </div>\n</div>\n')}]),module.exports=path},147:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){const fCsfFortiGateHA={controller:class extends inject.Collectable{constructor(){super()}onMemberClick($INJECTABLE$,csfTopology){return(event,source)=>{event.stopPropagation();const clickedInstance="string"==typeof source?csfTopology.slaveFortigateMapping[source]:source;this.treeViewCtrl.onNodeClick(event,clickedInstance)}}},bindings:{source:"<",disconnected:"<?"},require:{treeViewCtrl:"^^fCsfTreeView"},templateUrl:__webpack_require__(148)};return function(providers){providers.$compile.component("fCsfFortigateHa",fCsfFortiGateHA)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},148:function(module,exports){var path="/migadmin/ng/components/csf/tree-view/f-csf-fortigate-ha.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="ha-type">\n    <span ng-if="$ctrl.source.haMode === \'active-active\'">\n        {{:: \'ha_aa\' | lang }}\n    </span>\n    <span ng-if="$ctrl.source.haMode === \'active-passive\'">\n        {{:: \'ha_ap\' | lang }}\n    </span>\n</div>\n<div class="device"\n    ng-class="{\n        disconnected: $ctrl.disconnected,\n        \'unconfigured-sp\': $ctrl.source.unconfiguredSamlSp()\n    }"\n    ng-click="$ctrl.onMemberClick($event, $ctrl.source)">\n    <div>\n        <f-icon class="ftnt-fortigate-marketing-master security-fabric-node"></f-icon>\n        <span f-object-tooltip mkey="{{::$ctrl.source.serial}}"\n            datasource="csfFortiGates">\n            {{:: $ctrl.source.getLabel() }}\n        </span>\n    </div>\n</div>\n<div class="device"\n    ng-class="{disconnected: $ctrl.disconnected}"\n    ng-click="$ctrl.onMemberClick($event, $ctrl.source.ha[0].serial)">\n    <div>\n        <f-icon class="ftnt-fortigate-marketing-slave security-fabric-node"></f-icon>\n        <span f-object-tooltip mkey="{{::$ctrl.source.ha[0].serial}}"\n            datasource="csfFortiGates">\n            {{:: $ctrl.source.ha[0].hostname || $ctrl.source.ha[0].peerFortigateSerial }}\n        </span>\n    </div>\n</div>\n')}]),module.exports=path},1811:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=(ftnt_shared=>{const VIRT_WAN_LINK="/api/v2/cmdb/system/sdwan",LINK_MONITOR="/api/v2/monitor/system/link-monitor",SDWAN_MEMBERS="/api/v2/monitor/virtual-wan/members",HEALTH_CHECK="/api/v2/monitor/virtual-wan/health-check",PARENT={LINK:"link",SDWAN:"sd-wan"};function VirtualWanMonitorSourceFactory($http,$q,state){class VirtualWanMonitorSource extends ftnt_shared.MuTable.FixedStreamableSource{constructor(fortigate){super(),this.sdwanEnabled=state.featureEnabled("gui-wan-load-balancing"),this.fortigate=fortigate}_fetchEntries(){const promises={cmdb:$http.get(this.fortigate.createCSFURI(VIRT_WAN_LINK),{params:{format:"status"}}),link:$http.get(this.fortigate.createCSFURI(LINK_MONITOR)),sdwanMembers:$http.get(this.fortigate.createCSFURI(SDWAN_MEMBERS)),healthCheckStats:$http.get(this.fortigate.createCSFURI(HEALTH_CHECK))};return $q.all(promises).then(response=>{const cmdb=response.cmdb.data.results,link=response.link.data.results,sdwanMembers=response.sdwanMembers.data.results,healthCheckStats=response.healthCheckStats.data.results;let sources=Object.keys(link).map(name=>{for(var intf in link[name]){return Object.assign({name:name,intf:intf,parent:PARENT.LINK},link[name][intf])}});if("enable"===cmdb.status){Object.entries(sdwanMembers).forEach(([intf,member])=>{member.intf=intf,member.parent=PARENT.SDWAN,member.status||(member.status="error")});const healthCheckKeys=["status","latency","jitter","packet_loss","packet_sent","packet_received"],healthCheckStatusOrder={up:1,down:2,error:3,disable:4},getStatusOrder=status=>healthCheckStatusOrder[status]||healthCheckStatusOrder.disable;Object.values(healthCheckStats).forEach(healthCheck=>{Object.entries(healthCheck).forEach(([intf,result])=>{const member=sdwanMembers[intf];member&&getStatusOrder(result.status)<getStatusOrder(member.status)&&healthCheckKeys.forEach(key=>{member[key]=result[key]})})}),sources=sources.concat(Object.values(sdwanMembers))}return sources})}fetchEntries(){return this._promise||(this._promise=this._fetchEntries()),this._promise.finally(()=>this._promise=null)}}return VirtualWanMonitorSource.prototype.AUTO_REFRESH=!0,VirtualWanMonitorSource}return providers=>{providers.$provide.factory("VirtualWanMonitorSource",VirtualWanMonitorSourceFactory)}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1825:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){class LoadBalanceMonitorMenu{gracefulUpdateMode(realServer,status){this.onGracefulUpdateMode({realServer:realServer,status:status})}isActivateEnabled(entries){return entries&&1===entries.length&&("standby"===entries[0].mode||"disabled"===entries[0].mode)}isStandbyEnabled(entries){return entries&&1===entries.length&&("active"===entries[0].mode||"disabled"===entries[0].mode)}isDisableEnabled(entries){return entries&&1===entries.length&&("active"===entries[0].mode||"standby"===entries[0].mode)}}return function(providers){providers.$compile.component("fLoadBalanceMonitorMenu",{bindings:{menu:"<",onGracefulUpdateMode:"&"},controller:LoadBalanceMonitorMenu,templateUrl:__webpack_require__(1826)})}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1826:function(module,exports){var path="/migadmin/ng/firewall/load-balance/monitor/f-load-balance-monitor-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    <div ng-if="$ctrl.menu.popUpMenu">\n        <div f-menu-item-submenu="$ctrl.popUpMenu"\n             enabled="$ctrl.menu.entries && $ctrl.menu.entries.length">\n            <span>{{:: \'Mode\' | lang }}</span>\n        </div>\n    </div>\n    <div f-pop-up-menu="$ctrl.popUpMenu">\n        <div f-menu-item-button\n            click="$ctrl.gracefulUpdateMode($ctrl.menu.lastSelectedEntry, \'active\')"\n            enabled="$ctrl.isActivateEnabled($ctrl.menu.entries)">\n            <f-icon class="fa-enabled"></f-icon>\n            <span>{{:: \'active\' | lang}}</span>\n        </div>\n        <div f-menu-item-button\n            click="$ctrl.gracefulUpdateMode($ctrl.menu.lastSelectedEntry, \'standby\')"\n            enabled="$ctrl.isStandbyEnabled($ctrl.menu.entries)">\n            <f-icon class="fa-exempt"></f-icon>\n            <span>{{:: \'standby\' | lang}}</span>\n        </div>\n        <div f-menu-item-button\n            click="$ctrl.gracefulUpdateMode($ctrl.menu.lastSelectedEntry, \'disable\')"\n            enabled="$ctrl.isDisableEnabled($ctrl.menu.entries)">\n            <f-icon class="fa-disabled"></f-icon>\n            <span>{{:: \'disable\' | lang}}</span>\n        </div>\n    </div>\n</div>\n')}]),module.exports=path},201:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(8),__webpack_require__(26),__webpack_require__(31),__webpack_require__(36),__webpack_require__(43),__webpack_require__(34)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(ftntShared,inject,fwebUtilDom,fwebUtilSelect,fwebUtilLang,fwebUtilDatetime){const translate=fwebUtilLang.translate,Tooltip=ftntShared.Tooltip,CURRENT_ADMINS_URL="/api/v2/monitor/system/current-admins";class CurrentAdmins extends inject.Collectable{$onInit(){this.initMutableSettings(),this.getCurrentAdmins()}getCurrentAdmins($INJECTABLE$,$http,$q){return()=>{this.prefetchedAdmins?this.source=$q.resolve(this.prefetchedAdmins):this.source=$http.get(this._createCSFURI(CURRENT_ADMINS_URL)).then(response=>response.data.results)}}initMutableSettings($INJECTABLE$,csfTopology){return()=>{const fortigate=this.fortigate||csfTopology.selectedFortigate,state=fortigate.state,getCSFProxySourceID=sourceId=>fwebUtilSelect.getCSFProxySourceID(sourceId,fortigate.path);this.settings={defaultColumns:["admin","profile","intf","method","srcaddr","time"],userDefinedSections:!1,sortSections:!1,columns:[{id:"admin",cellValueFunction:entry=>entry.admin,cellFormatter:(entry,column,value)=>{let isCurrent=entry.admin===state.admin.name;return((iconClass,textValue,textClassValue)=>fwebUtilDom.elem("div",null,{children:[fwebUtilDom.elem("f-icon",{className:iconClass}),fwebUtilDom.elem("span",{className:textClassValue,textContent:textValue})]}))((isCurrent="sso"===entry.method?isCurrent&&state.admin.sso_sp_admin:isCurrent&&!state.admin.sso_sp_admin)&&entry.is_current?"fa-user":"",value,"is_admin")}},{id:"profile",type:"omniselect",langKey:"Profile",cellValueFunction:entry=>({q_origin_key:entry.profile,datasource:getCSFProxySourceID("system.accprofile")})},{id:"intf",type:"omniselect",langKey:"Interface",cellValueFunction:entry=>({q_origin_key:entry.intf,datasource:getCSFProxySourceID("firewallInterfaces")}),cellIsValidCollectionFunction:entry=>!!entry.intf},{id:"method",langKey:"method",cellValueFunction:entry=>translate(`AdminConnection::method.${entry.method}`)},{id:"srcaddr",langKey:"src_addr",type:"ip-collection",cellValueFunction:entry=>entry.srcaddr},{id:"time",langKey:"connect",type:"date",dateType:"fromNow",cellValueFunction:entry=>{return state.fortiGateUTCToBrowserUTC(entry.time)},onCellRendered:(element,entry)=>{element.classList.add("tooltip-hint");const timestampLogin=state.fortiGateUTCToBrowserUTC(entry.time);Tooltip.addToElement(element,fwebUtilDom.elem("span",{textContent:fwebUtilDatetime.formatDateTime(timestampLogin)}))}}]}}}_createCSFURI(url){return this.fortigate&&this.fortigate.createCSFURI(url)||url}}return function(providers,loaderProvider){return providers.$compile.component("fCurrentAdmins",{bindings:{prefetchedAdmins:"<",fortigate:"<?"},templateUrl:__webpack_require__(303),controller:CurrentAdmins}),loaderProvider.initModules([__webpack_require__(304)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},303:function(module,exports){var path="/migadmin/ng/components/admins/f-current-admins.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable source="$ctrl.source" settings="$ctrl.settings" context-menu="::true"\n    selected-entries="$ctrl.selectedEntries">\n    <f-current-admins-menu\n        selected-admins="$ctrl.selectedEntries"\n        admins-ctrl="$ctrl"\n        class="menu-bar-component">\n    </f-current-admins-menu>\n</f-mutable>\n')}]),module.exports=path},304:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(27),__webpack_require__(26),__webpack_require__(41),__webpack_require__(43)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(notify,inject,fwebUtilSlide,fwebUtilLang){const translate=fwebUtilLang.translate;const fCurrentAdminsMenu={bindings:{selectedAdmins:"<",adminsCtrl:"<"},templateUrl:__webpack_require__(305),controller:class extends inject.Collectable{refresh(){return this.adminsCtrl.getCurrentAdmins()}canDisconnect($INJECTABLE$,$rootScope){return()=>{const entries=this.selectedAdmins||[];return!($rootScope.ADMIN_RO||!entries.length)&&entries.some(function(entry){return entry.disconnect_enabled&&!entry.is_current})}}disconnect($INJECTABLE$,$http){return()=>{const canDisconnectList=this.selectedAdmins.filter(function(admin){return admin.disconnect_enabled&&!admin.is_current}),disconnectAdminsFn=()=>{const postParams={admins:canDisconnectList};return $http.post("/api/v2/monitor/system/disconnect-admins",postParams).then(()=>{const msg=translate("User session(s) disconnected successfully.");notify.post(msg,"success"),this.refresh()},()=>{const msg=translate("Error disconnecting user session(s).");notify.post(msg,"error")})};if(canDisconnectList.length!==this.selectedAdmins.length){const msg=translate("One or more sessions cannot be disconnected. Proceed?");return fwebUtilSlide.confirm(msg).then(disconnectAdminsFn)}return disconnectAdminsFn()}}}};return function(providers){providers.$compile.component("fCurrentAdminsMenu",fCurrentAdminsMenu)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},305:function(module,exports){var path="/migadmin/ng/components/admins/f-current-admins-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items">\n    <div f-menu-item-button click="$ctrl.refresh()">\n        <f-icon class="fa-refresh"></f-icon>\n        <span>{{ ::\'refresh\' | lang }}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.disconnect()"\n         enabled="$ctrl.canDisconnect()">\n        <f-icon class="fa-sign-out"></f-icon>\n        <span>{{ ::\'Disconnect\' | lang }}</span>\n    </div>\n</div>\n')}]),module.exports=path},323:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=(inject=>{function SystemTime($scope,injector,state,$rootScope){injector.injectMarked(this,{$scope:$scope}),this.timeSettingsSupport=!1,this.timeZoneText=state.time_zone_text,this.unregisterFn=$rootScope.$on(state.UPDATE_EVENT,()=>{this._load()}),this._load()}return SystemTime.prototype._load=function(){this.loading=!0,this._killInterval(),this._getTimeSettings().then(()=>{this.timeSettingsSupport=!this.hideTooltip}).finally(()=>{"number"==typeof this.tick?this._watchInterval():this._startInterval()})},SystemTime.prototype.$onDestroy=function(){this.destroyed=!0,this.unregisterFn(),this._killInterval()},SystemTime.prototype._getTimeSettings=inject.mark(($http,$q)=>(function(){const ntpPromise=$http.get("/api/v2/cmdb/system/ntp").then(response=>{const results=response.data.results;this.ntpEnabled="enable"===results.ntpsync,this.ntpUsingFortiGuard="fortiguard"===results.type}),ptpPromise=$http.get("/api/v2/cmdb/system/ptp").then(response=>{const results=response.data.results;this.ptpEnabled="enable"===results.status});return $q.all([ntpPromise,ptpPromise])})),SystemTime.prototype.getTimeSourceString=function(){let result;return result=this.ntpEnabled?this.ntpUsingFortiGuard?"FortiGuard NTP":"Custom NTP server":this.ptpEnabled?"PTP":"Manually set"},SystemTime.prototype._update=inject.mark(state=>(function(){this.currentTime=state.getFortiGateLocalTime(),this.loading=!1})),SystemTime.prototype._watchInterval=inject.mark($scope=>(function(){$scope.$watch("$ctrl.tick",(newVal,oldVal)=>{newVal!==oldVal&&this._update()})})),SystemTime.prototype._startInterval=inject.mark(($scope,$interval)=>(function(){this.destroyed||(this._update(),this.intervalPromise=$interval(this._update,1e3))})),SystemTime.prototype._killInterval=inject.mark($interval=>(function(){$interval.cancel(this.intervalPromise)})),providers=>{providers.$compile.component("fSystemTime",{controller:SystemTime,bindings:{tick:"<",hideTooltip:"<"},templateUrl:__webpack_require__(324)})}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},324:function(module,exports){var path="/migadmin/ng/components/system-time/f-system-time.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-icon ng-if="$ctrl.loading" class="fa-loading"></f-icon>\n<span f-tip-target ng-if="!$ctrl.loading" ng-class="{\'tooltip-hint\': $ctrl.timeSettingsSupport}">\n    {{ $ctrl.currentTime | fDateTime:{skipProcessing: true} }}\n    <div f-tip ng-if="$ctrl.timeSettingsSupport">\n        <table class="table key-value slightly-condensed">\n            <tbody>\n                <tr>\n                    <td>{{:: \'Time zone\' | lang }}</td>\n                    <td>{{:: $ctrl.timeZoneText }}</td>\n                </tr>\n                <tr>\n                    <td>{{:: \'Time Source\' | lang }}</td>\n                    <td>{{:: $ctrl.getTimeSourceString() | lang }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</span>')}]),module.exports=path},99:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,inject){function FtntCompile(injector){injector.injectMarked(this)}return FtntCompile.prototype.makeFormatter=inject.mark(function($compile){return function($scope,template,skipDigest){return function(scopeProps){if(scopeProps){var element=angular.element(template),scope=$scope.$new(!0);return angular.extend(scope,scopeProps),$compile(element)(scope),$scope.$on("$destroy",function(){scope.$destroy()}),skipDigest||scope.$apply(),{scope:scope,element:element[0]}}return null}}}),function(providers){providers.$provide.service("ftntCompile",FtntCompile)}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}}]);