(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{104:function(module,exports,__webpack_require__){"use strict";const VisualizationState=__webpack_require__(430);class GuiVisualizationState extends VisualizationState{constructor(state){super({},state.language_code)}updateParams(params){const filter=params.filter?Object.assign({},this.params.filter,params.filter):Object.assign({},this.params.filter);Object.assign(this.params,params),Object.assign(this.params.filter,filter),super._updateAndValidateParams(this.params)}}module.exports=function(providers){providers.$provide.service("topologyVisualizationState",GuiVisualizationState)}},120:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return function(providers){providers.$compile.component("fCsfDeviceOptions",{bindings:{device:"<",transitionAfterToggleAuthorization:"&",transitionAfterReboot:"&"},templateUrl:__webpack_require__(142)})}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},142:function(module,exports){var path="/migadmin/ng/components/csf/f-csf-device-options.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div f-menu-item-button\n    click="$ctrl.device.connectToGui()"\n    ng-if="$ctrl.device.canConnectToGui()">\n    <f-icon class="fa-sign-in"></f-icon>\n    <span>\n        {{ \'Login to {FABRIC_DEVICE_DISPLAY_NAME}\' | lang:[$ctrl.device.getLabel()] }}\n    </span>\n</div>\n<div f-menu-item-button\n    click="$ctrl.device.openCustomizeSlide()"\n    ng-if="$ctrl.device.canOpenCustomizeSlide() && !$ctrl.device.isCustomizeSlideOpened()">\n    <f-icon class="fa-cog"></f-icon>\n    <span>\n        {{::\'Configure\' | lang}}\n    </span>\n</div>\n<div f-menu-item-button\n    click="$ctrl.device.toggleAuthorization(true).then($ctrl.transitionAfterToggleAuthorization)"\n    ng-if="$ctrl.device.canAuthorize()">\n    <f-icon class="fa-enabled"></f-icon>\n    <span>\n        {{::\'authorize\' | lang}}\n    </span>\n</div>\n<div f-menu-item-button\n    click="$ctrl.device.toggleAuthorization(false).then($ctrl.transitionAfterToggleAuthorization)"\n    ng-if="$ctrl.device.canDeauthorize()">\n    <f-icon class="fa-denied"></f-icon>\n    <span>\n        {{::\'deauthorize\' | lang}}\n    </span>\n</div>\n<div f-menu-item-button\n    click="$ctrl.device.denyAuthorization()"\n    ng-if="$ctrl.device.canDenyAuthorization()">\n    <f-icon class="fa-denied"></f-icon>\n    <span>\n        {{::\'Deny\' | lang}}\n    </span>\n</div>\n<div f-menu-item-button\n    ng-if="$ctrl.device.canConnectToCli()"\n    click="$ctrl.device.connectToCli()">\n    <f-icon class="fa-terminal"></f-icon>\n    <span>\n        {{::\'Connect to CLI\' | lang}}\n    </span>\n</div>\n<div f-menu-item-button\n    ng-if="$ctrl.device.canReboot()"\n    click="$ctrl.device.reboot().then($ctrl.transitionAfterReboot)">\n    <f-icon class="fa-undo"></f-icon>\n    <span>\n        {{::\'restart\' | lang}}\n    </span>\n</div>\n<div f-menu-item-button\n    ng-if="$ctrl.device.canUpgradeFirmware()"\n    click="$ctrl.device.upgradeFirmware()">\n    <f-icon class="ftnt-install"></f-icon>\n    <span>\n        {{::\'Upgrade\' | lang}}\n    </span>\n</div>\n')}]),module.exports=path},1754:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(32)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(formatters){function VulnerabilityNumberBubbles($scope,$sce){this.$onInit=function(){$scope.$watch("$ctrl.countsByType",function(value){null!=value&&(this.html=$sce.trustAsHtml(formatters.vulnerability_number_bubbles(value)))}.bind(this))}}return function(providers){providers.$compile.component("fVulnerabilityNumberBubbles",{controller:VulnerabilityNumberBubbles,bindings:{countsByType:"<"},template:'<div ng-bind-html="$ctrl.html"></div>'})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},322:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(0),__webpack_require__(8),__webpack_require__(113),__webpack_require__(179),__webpack_require__(181),__webpack_require__(237),__webpack_require__(94)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,BUILD,ftnt_shared,FortigateClasses,GuiCsfFortiSwitch,GuiCsfFortiAP,GuiCsfFortiNAC,FabricDevice){const{FABRIC_DEVICE_ICON_MAP:FABRIC_DEVICE_ICON_MAP}=ftnt_shared.topology.CONSTANTS.TOPOLOGY,SYMBOLS=BUILD.SYMBOLS,MANAGED_DEVICE_TYPES={FORTISWITCH:{type:"fortiswitch",icon:"ftnt-standard-fortiswitch",langKey:"FortiSwitch"},FORTIAP:{type:"fortiap",icon:"ftnt-fortiap-marketing",langKey:"FortiAP"}},GuiCsfFortiGate=FortigateClasses.FortiGate,FABRIC_DEVICE_TYPES=FabricDevice.TYPES,MODE_PHYSICAL="physical",MODE_LOGICAL="logical",MODE_WIDGET="widget",CONFIGURE_FABRIC_CONNECTOR_LANG="Configure settings in Security Fabric > Fabric Connectors > {CONNECTOR}",FABRIC_CONNECTOR_URI="/fabric-connector",FABRIC_CONNECTOR_URIS={FORTIANALYZER:`${FABRIC_CONNECTOR_URI}/edit/fortianalyzer`,FORTIMANAGER:`${FABRIC_CONNECTOR_URI}/edit/fortimanager`,FORTISANDBOX:`${FABRIC_CONNECTOR_URI}/edit/fortisandbox`,FORTISANDBOX_CLOUD:`${FABRIC_CONNECTOR_URI}/edit/fortisandbox-cloud`,SECURITY_FABRIC:`${FABRIC_CONNECTOR_URI}/edit/security-fabric-connection`},URI_LOG_SETTINGS="/log/settings",URI_PHYSICAL_TOPOLOGY="/security-fabric/topology/physical",URI_FORTICLIENT="/system/dashboard-preview/forticlient",API_FMG_STATUS="/api/v2/monitor/system/fortimanager/status";class FabricDeviceStatus{constructor(type,override,$injector,topologyVisualizationState){this.type=type,this.override=override,this.$injector=$injector,this.topologyVisualizationState=topologyVisualizationState,this.langKey="default"===type||"generic-fabric-device"===type?"Unknown Fabric Device Type":type,this.devices=[],this.pendingRequestMap=new Map;let redirUrl=!this.vdomMode||this.isGlobalAdmin?FABRIC_CONNECTOR_URI:"";this.vdomMode&&redirUrl&&(redirUrl+="?vdom="),this.redirUrl=redirUrl}addDevice(d){this.devices.includes(d)||(this.devices.push(d),this.update())}removeDevice(d){const index=this.devices.indexOf(d);index>=0&&(this.devices.splice(index,1),this.update())}update(){const devices=this.devices,filterType="default"===this.type?"generic-fabric-device":this.type,isVisible=this.topologyVisualizationState.filter[filterType];let summary,severity,isLoading,hasDisconnected;0!==(summary={totalConnected:this.override?this.override.total:devices.length}).totalConnected&&isVisible||(severity="disabled"),devices.forEach(d=>{if("default"===this.type&&d.hasPendingStatusUpdate){if(isLoading=!0,!this.pendingRequestMap.has(d)){const promise=d.pendingRequest.then(()=>{const type=d.getType();this.type===type?this.update():(this.removeDevice(d),FabricDeviceStatus.createStatus({device:d},this.override,this.$injector))});this.pendingRequestMap.set(d,promise)}}else d.connected||(hasDisconnected=!0)}),!isLoading&&hasDisconnected&&isVisible&&(severity="severity-critical"),this.icon=isLoading?"fa-loading":FABRIC_DEVICE_ICON_MAP[this.type],this.summary=summary,this.severity=severity}static createStatus(params,statusOverride,$injector){const type=params.device?params.device.getType():params.type;let statusGroup=FabricDeviceStatus.map[type];statusGroup||(statusGroup=$injector.instantiate(FabricDeviceStatus,{type:type,override:statusOverride}),FabricDeviceStatus.map[type]=statusGroup),params.device&&statusGroup.addDevice(params.device)}}FabricDeviceStatus.map={};class CsfExtensionDevicesInfo extends inject.Collectable{constructor(state){super(),this.loading=!0,this.vdomMode=state.vdom_mode,this.isGlobalAdmin=state.admin&&state.admin.global_admin,this.hasFctPermission=state.adminHasReadPermission(state.ACCESS_GROUP.UTM_ENDPOINT_CONTROL),this.hasFazPermission=state.adminHasReadPermission(state.ACCESS_GROUP.LOG_CONFIG)&&state.adminHasReadPermission(state.ACCESS_GROUP.LOG_DATA_ACCESS),this.hasWifiSwitchCtrlPermission=state.adminHasReadPermission(state.ACCESS_GROUP.WIFI),this.hasFsaPermission=state.adminHasReadPermission(state.ACCESS_GROUP.UTM)&&this.isGlobalAdmin,this.hasFabricDevicePermission=this.isGlobalAdmin,this.isGlobal=state.getCurrentVDOMScope()===state.VDOM_SCOPE.GLOBAL}$onChanges(changesObj){changesObj.csfDevices&&changesObj.csfDevices.currentValue&&this._run(),changesObj.detectedDevices&&changesObj.detectedDevices.currentValue&&this.hasFctPermission&&this._setFctStatus(),changesObj.statusOverrides&&changesObj.statusOverrides.currentValue&&this._updateCsfStatus()}_setFazStatus(faz){var langKey,server,severity="severity-critical",icon="fa-severity-critical";if(faz.is_enabled)if(server=faz.ip,faz.error)switch(langKey=faz.status,faz.status){case"err::fortianalyzer::denied":case"err::fortianalyzer::refused":case"err::fortianalyzer::unauth":severity="severity-high",icon="fa-severity-high"}else langKey="connected",severity="",icon="fa-enabled";else langKey="Not configured",severity="disabled",icon="fa-severity-high";this.fazStatus={langKey:langKey,severity:severity,icon:icon,server:server,redirUrl:this.getFazLogRedirUrl(faz)},this._setIocStatus()}_setIocStatus($INJECTABLE$,fazStatus){return async()=>{const iocSupport=await fazStatus.checkIocSupport();this.iocSupport=iocSupport===fazStatus.STATUS.IOC_REQUIRE_FAZ}}_setSandboxStatus($INJECTABLE$,lang){return(sandbox,license)=>{const isAppliance="appliance"===sandbox.type;var langKey,server,account,severity="severity-critical",icon="fa-severity-critical";sandbox.configured?(sandbox.connected?(langKey="connected",severity="",icon="fa-enabled"):langKey="unreachable",isAppliance?server=sandbox.server:account=license.forticloud.account):(langKey="Not configured",severity="disabled",icon="fa-severity-high");let redirUrl="";this.vdomMode&&!this.isGlobalAdmin||(redirUrl=isAppliance?FABRIC_CONNECTOR_URIS.FORTISANDBOX:FABRIC_CONNECTOR_URIS.FORTISANDBOX_CLOUD),this.vdomMode&&redirUrl&&(redirUrl+="?vdom=");const fsaTypeLang=lang(isAppliance?"FortiSandbox":"FortiSandbox Cloud");this.sandboxStatus={langKey:langKey,severity:severity,icon:icon,configured:sandbox.configured,type:sandbox.type,server:server,account:account,redirUrl:redirUrl,label:lang(CONFIGURE_FABRIC_CONNECTOR_LANG,[fsaTypeLang])}}}_watchFabricDeviceStatus($INJECTABLE$,$scope){return()=>{this.watchFabricDevices||(this.watchFabricDevices=$scope.$watchCollection(()=>{return this.csfDevices.reduce((result,device)=>(device instanceof FabricDevice&&result.push(device),result),[]).map(d=>d.getType())},()=>{this._setFabricDeviceStatus()}))}}_setFabricDeviceStatus($INJECTABLE$,$injector){return()=>{FabricDeviceStatus.map={},this.csfDevices.forEach(device=>{if(device instanceof FabricDevice){const statusOverride=(this.statusOverrides||[]).find(override=>override.type===device.getType());FabricDeviceStatus.createStatus({device:device},statusOverride,$injector)}}),(this.statusOverrides||[]).forEach(override=>{if(["fortigate","fortiswitch","fortiap","fortinac"].includes(override.type))return;const type="generic-fabric-device"===override.type?"default":override.type;FabricDeviceStatus.createStatus({type:type},override,$injector),FabricDeviceStatus.map[type].update()}),this.fabricDevicesStatus=FabricDeviceStatus.map}}_setPlaceholderFabricDeviceStatus(){let redirUrl=!this.vdomMode||this.isGlobalAdmin?FABRIC_CONNECTOR_URI:"";this.vdomMode&&redirUrl&&(redirUrl+="?vdom="),this.placeholderFabricDeviceStatus={redirUrl:redirUrl}}hasFabricDeviceStatus(){return!!this.fabricDevicesStatus&&Object.keys(this.fabricDevicesStatus).length}isFabricDeviceStatus(status){return!(!status||!this.fabricDevicesStatus)&&(this.fabricDevicesStatus.hasOwnProperty(status.type)||status===this.placeholderFabricDeviceStatus)}hasDisplayOptions($INJECTABLE$,state){return key=>{const isManagedDevice="fortiswitch"===key||"fortiap"===key;return(this.displayOptionsMode!==MODE_LOGICAL||"fortinac"!==key)&&(!(this.displayOptionsMode===MODE_WIDGET&&!isManagedDevice)&&((this.displayOptionsMode!==MODE_LOGICAL||!isManagedDevice)&&("fortigate"!==key||state.csf_enabled)))}}getDisplayOptions($INJECTABLE$,topologyVisualizationState){return(key,subKey)=>(this.isWidget=this.displayOptionsMode===MODE_WIDGET,!this.hasDisplayOptions(key)||("fabricDevice"===key?(subKey="default"!==subKey&&FABRIC_DEVICE_TYPES.includes(subKey)?subKey:"generic-fabric-device",topologyVisualizationState.filter[subKey]):topologyVisualizationState.filter[key]))}toggleDisplayOptions(key,subKey){this.toggleDisplayOptionsFn&&(this.toggleDisplayOptionsFn({key:key,subKey:subKey}),"fabricDevice"===key&&this._setFabricDeviceStatus(),key!==MANAGED_DEVICE_TYPES.FORTISWITCH.type&&key!==MANAGED_DEVICE_TYPES.FORTIAP.type||this._setManagedDeviceStatus(),"fortinac"===key&&this._setFortinacStatus())}toggleCsfFeature(){this.toggleDisplayOptionsFn&&(this.toggleDisplayOptionsFn({key:"fortigate"}),this._setCsfStatus())}toggleFortinacFeature(){this.toggleDisplayOptionsFn&&(this.toggleDisplayOptionsFn({key:"fortinac"}),this._setCsfStatus())}_getFmgStatus($INJECTABLE$,$http){return()=>$http.get(API_FMG_STATUS).then(response=>response.data.results,()=>({}))}_setFmgStatus($INJECTABLE$,lang){return fmg=>{var langKey,severity,icon,server,mode;if(Object.keys(fmg).length){var isConnected=fmg.fortimanager_status_id===SYMBOLS.APS_FGFM_CONN_ST_UP,isRegistered=fmg.fortimanager_registration_status_id===SYMBOLS.APS_FGFM_REG_ST_REGISTERED;isConnected&&isRegistered?(severity="",langKey="connected",icon="fa-enabled"):isConnected?(severity="severity-high",icon="fa-severity-high",langKey="fmg_unregister"):(severity="severity-critical",icon="fa-severity-critical",langKey="disconnected"),server=fmg.server,mode=fmg.mode}else langKey="Not configured",severity="disabled",icon="fa-severity-high";var redirUrl=!this.vdomMode||this.isGlobalAdmin?FABRIC_CONNECTOR_URIS.FORTIMANAGER:"";this.vdomMode&&redirUrl&&(redirUrl+="?vdom="),this.fmgStatus={langKey:langKey,severity:severity,icon:icon,server:server,mode:mode,redirUrl:redirUrl,label:lang(CONFIGURE_FABRIC_CONNECTOR_LANG,[lang("FortiManager")])}}}_updateCsfStatus(){this._setCsfStatus(),this._setFortinacStatus(),this.hasFctPermission&&this._setFctStatus(),this.hasWifiSwitchCtrlPermission&&this._setManagedDeviceStatus(),this.hasFabricDevicePermission&&(this._watchFabricDeviceStatus(),this._setPlaceholderFabricDeviceStatus())}_setCsfStatus($INJECTABLE$,lang,state){return()=>{let langKey,icon,severity;state.csf_enabled?(icon="fa-connected",langKey="connected"):(severity="severity-high",langKey="disabled",icon="fa-severity-high"),this.getDisplayOptions("fortigate")||(severity="disabled");let redirUrl=!this.vdomMode||this.isGlobalAdmin?FABRIC_CONNECTOR_URIS.SECURITY_FABRIC:"";this.vdomMode&&redirUrl&&(redirUrl+="?vdom=");const fortigates=this.csfDevices.filter(device=>device instanceof GuiCsfFortiGate),hasAzure=fortigates.some(fgt=>fgt.isAzure()),hasAws=fortigates.some(fgt=>fgt.isAWS()),hasSdWan=fortigates.some(fgt=>Object.values(fgt.sdWanMembersInfo).some(Boolean));this.csfStatus={langKey:langKey,icon:icon,severity:severity,summary:{totalConnected:fortigates.length,hasAzure:hasAzure,hasAws:hasAws,hasSdWan:hasSdWan},redirUrl:redirUrl,lang:lang(CONFIGURE_FABRIC_CONNECTOR_LANG,[lang("Security Fabric Setup")])}}}_makeManagedDeviceStatus(managedDevices,props){var summary,totalClients,severity;let totalConnected=managedDevices.length;return props===MANAGED_DEVICE_TYPES.FORTIAP&&managedDevices.forEach(function(managedDevice){totalClients=(totalClients||0)+managedDevice.clients}),summary={totalConnected:totalConnected,totalClients:totalClients},0!==totalConnected&&this.getDisplayOptions(props.type)||(severity="disabled"),{type:props.type,icon:props.icon,langKey:props.langKey,summary:summary,redirUrl:URI_PHYSICAL_TOPOLOGY,severity:severity}}_makeFortinacStatus(fortinacs){let severity;const totalConnected=fortinacs.length,summary={totalConnected:totalConnected};return 0!==totalConnected&&this.getDisplayOptions("fortinac")||(severity="disabled"),{type:"fortinac",icon:"ftnt-fortinac",langKey:"FortiNAC",severity:severity,summary:summary,redirUrl:URI_PHYSICAL_TOPOLOGY}}_setManagedDeviceStatus(){const fortiswitches=[],fortiaps=[];this.csfDevices.forEach(device=>{device instanceof GuiCsfFortiSwitch?fortiswitches.push(device):device instanceof GuiCsfFortiAP&&fortiaps.push(device)}),this.managedDeviceStatus=[this._makeManagedDeviceStatus(fortiswitches,MANAGED_DEVICE_TYPES.FORTISWITCH),this._makeManagedDeviceStatus(fortiaps,MANAGED_DEVICE_TYPES.FORTIAP)]}_setFortinacStatus(){const fortinacs=[];this.csfDevices.forEach(device=>{device instanceof GuiCsfFortiNAC&&fortinacs.push(device)}),this.fortinacStatus=this._makeFortinacStatus(fortinacs)}_setFctStatus(){const map=(this.detectedDevices||[]).reduce((prev,device)=>(prev[device.mac]=device,prev),{}),counts=Object.keys(map).reduce((prev,mac)=>{const vulnCount=prev.vulnCount,device=map[mac];return device.vuln_count&&["vuln_count_info","vuln_count_low","vuln_count_medium","vuln_count_high","vuln_count_critical"].forEach(key=>{vulnCount[key]=(vulnCount[key]||0)+device[key],vulnCount.vuln_count=(vulnCount.vuln_count||0)+vulnCount[key]}),device.online_status.includes("registered-online")&&prev.onlineCount++,prev},{onlineCount:0,vulnCount:{}});let severity;const summary={total:Object.keys(map).length,totalConnected:counts.onlineCount},vulnerabilities=counts.vulnCount;0===summary.totalConnected?severity="disabled":vulnerabilities.vuln_count_critical>0?severity="severity-critical":vulnerabilities.vuln_count_high+vulnerabilities.vuln_count_medium>0&&(severity="severity-high"),this.fctStatus={summary:summary,severity:severity,vulnerabilities:vulnerabilities,redirUrl:URI_FORTICLIENT}}_run($INJECTABLE$,$scope,notificationRequests){return()=>{var WATCH=[];if(this.hasFsaPermission&&WATCH.push("license","sandboxStatus"),this.hasFazPermission&&WATCH.push("fortianalyzerStatus"),WATCH.length){const callback=results=>{this.hasFazPermission&&this._setFazStatus(results.fortianalyzerStatus),this.hasFsaPermission&&this._setSandboxStatus(results.sandboxStatus,results.license),this.loading=!1};notificationRequests.watchMultiple({scope:$scope,requestTypes:WATCH,callback:callback,immediate:!0})}this._updateCsfStatus(),this._getFmgStatus().then(this._setFmgStatus.bind(this)).finally(()=>{WATCH.length||(this.loading=!1)})}}toggleRedirMenu(menu,event,status){this.selectedStatus=status,this.selectedStatus&&this.selectedStatus.redirUrl&&menu.toggle({top:event.clientY,left:event.clientX})}toggleMenu(menu,event,status){this.selectedStatus=status,menu.toggle({top:event.clientY,left:event.clientX})}getFazLogRedirLabel($INJECTABLE$,lang,state){return()=>{let result;return result=state.csf_enabled?lang("Configure settings in Security Fabric > Fabric Connectors > FortiAnalyzer"):lang("Configure settings in Log & Report > Log Settings")}}getFazLogRedirUrl($INJECTABLE$,state){return faz=>{let result;return state.csf_enabled?result=FABRIC_CONNECTOR_URIS.FORTIANALYZER:(result=URI_LOG_SETTINGS,!faz.overrides_global_faz&&this.isGlobalAdmin&&(result+="?vdom=")),result}}redirTo($INJECTABLE$,$location){return url=>{url&&$location.url(url)}}showRedir(){return this.selectedStatus&&this.selectedStatus.redirUrl&&!(this.displayOptionsMode===MODE_PHYSICAL&&this.selectedStatus.redirUrl===URI_PHYSICAL_TOPOLOGY)}getFabricConnectorRedirLabel($INJECTABLE$,lang){return()=>this.selectedStatus&&this.selectedStatus.label||lang("Configure settings in Security Fabric > Fabric Connectors")}}return function(providers,loaderProvider){return providers.$compile.component("fCsfExtensionDevicesInfo",{templateUrl:__webpack_require__(423),controller:CsfExtensionDevicesInfo,bindings:{loading:"=?",toggleDisplayOptionsFn:"&?",csfDevices:"<",detectedDevices:"<",displayOptionsMode:"<?",statusOverrides:"<?"}}),loaderProvider.initModules([__webpack_require__(1754),__webpack_require__(104)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}}]);