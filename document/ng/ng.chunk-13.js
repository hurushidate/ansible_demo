(window.webpackJsonp=window.webpackJsonp||[]).push([[13,140],{1721:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,inject){var POSITIONAL_ATTRIBUTES=["x-pos","y-pos","width","height"];function EditDashboardWidget($scope,injector,slide){injector.injectMarked(this,{$scope:$scope}),this._slide=slide.get("dashboardEditWidget"),this.data=Object.assign({dashboard:{}},{widget:this.widgetModel.getModelData()}),this.template=`<${this.component}\n            dashboard="::$ctrl.data.dashboard"\n            widget="::$ctrl.data.widget"></${this.component}>`,POSITIONAL_ATTRIBUTES.forEach(function(key){delete this.data[key]}.bind(this))}return EditDashboardWidget.prototype.submit=inject.mark(function($scope){return function(){if(this.form.$valid){var data=this.data;"function"==typeof this.beforeSubmitFn&&(data.widget=this.beforeSubmitFn(angular.copy(this.data.widget))),this._slide.data.updatedWidget=data.widget,this._slide.data.dashboard=data.dashboard,this._slide.slide.done()}else $scope.$broadcast("validation-msg_show")}}),EditDashboardWidget.prototype.beforeSubmit=function(beforeSubmitFn){this.beforeSubmitFn=beforeSubmitFn},function(providers){providers.$compile.component("fEditDashboardWidget",{templateUrl:__webpack_require__(1722),controller:EditDashboardWidget,bindings:{widgetModel:"<",component:"<",fortigateSelectionMode:"<",dashboardLayoutType:"<"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1722:function(module,exports){var path="/migadmin/ng/system/dashboard/f-edit-dashboard-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dialog\n    loading="$ctrl.loading"\n    hide-title="::true"\n    form="$ctrl.form"\n    submit="$ctrl.submit()"\n    read-only="::false">\n    <div f-compile="::$ctrl.template"></div>\n</f-dialog>\n')}]),module.exports=path},1723:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){var CHART_COLORS=Chart.prototype.COLORS,AV_RESPONSE_KEYS=["scanned","infected","suspicious","zerohour","malware_list","clean"],SANDBOX_RESPONSE_KEYS=["submitted","detected","risk_high",["risk_med_low",["risk_med","risk_low"]],"clean"];function ATPStatsWidget(injector,$scope,state){injector.injectMarked(this,{$scope:$scope}),this.loading=!0,this.fsbCloudFeatureEnabled=state.featureEnabled("gui-fortisandbox-cloud")}return ATPStatsWidget.prototype.$onInit=inject.mark(function(csfTopology){return async function(){this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this._setupShowGraphWatch(),this._run(),this.setupWatches()}}),ATPStatsWidget.prototype.$onDestroy=function(){this.stopDataPolling()},ATPStatsWidget.prototype.setupWatches=inject.mark(function($scope,csfTopology){$scope.$on("fChartSizeChangeStart",()=>this.chartResizing=!0),$scope.$on("fChartSizeChangeEnd",()=>this.chartResizing=!1),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,(newValue,oldValue)=>{newValue&&newValue!==oldValue&&(this.loading=!0,this.fortigate=newValue,this._run())})}),ATPStatsWidget.prototype.AV_LABELS=inject.mark(function(lang){return{infected:lang("Malicious").toString(),zerohour:lang("FortiGuard Outbreak Prevention").toString(),malware_list:lang("External Malware Block List").toString(),suspicious:lang("suspicious").toString(),clean:lang("clean").toString()}}),ATPStatsWidget.prototype.AV_COLORS={infected:CHART_COLORS.RED,zerohour:CHART_COLORS.ORANGE,malware_list:CHART_COLORS.DEEP_ORANGE,suspicious:CHART_COLORS.BLUE,clean:CHART_COLORS.GREEN},ATPStatsWidget.prototype.SANDBOX_LABELS=inject.mark(function(lang){return{detected:lang("Malicious").toString(),risk_high:lang("Suspicious - High Risk").toString(),risk_med_low:lang("Suspicious - Med/Low Risk").toString(),clean:lang("clean").toString()}}),ATPStatsWidget.prototype.SANDBOX_COLORS={detected:CHART_COLORS.RED,risk_high:CHART_COLORS.ORANGE,risk_med_low:CHART_COLORS.BLUE,clean:CHART_COLORS.GREEN},ATPStatsWidget.prototype._setupShowGraphWatch=inject.mark(function($scope){return function(){$scope.$watchGroup(["$ctrl.widgetModel.getRelativeWidth()","$ctrl.widgetModel.getRelativeHeight()"],function(results){var width=results[0],height=results[1];this.fullDimension=height>=1.4||width>=2.5&&height>=1,this.showGraphs=width>=1.5}.bind(this))}}),ATPStatsWidget.prototype._aggregateResponseStats=function(response,keys){var stats={};return Array.isArray(response)||(response=[response]),response.forEach(function(vdomResponse){var vdomResults=vdomResponse.results;keys.forEach(function(key){var targetKey,isSubArray=Array.isArray(key);targetKey=isSubArray?key[0]:key,null==stats[targetKey]&&(stats[targetKey]=0),isSubArray?key[1].forEach(function(subKey){stats[targetKey]+=vdomResults[subKey]}):stats[targetKey]+=vdomResults[key]})}),stats},ATPStatsWidget.prototype._createChart=inject.mark(function($filter,lang){var numberFilter=$filter("number");return function(stats,labelMap,colorMap){var SKIPPED_KEYS={scanned:!0,submitted:!0};return{data:Object.keys(stats).map(function(key){if(!SKIPPED_KEYS[key])return{label:labelMap[key],color:colorMap[key],data:stats[key]}}).filter(function(value){return!!value}),options:{series:{pie:{show:!0,label:{show:!1},radius:.95,innerRadius:.4,highlight:{opacity:0}}},legend:{show:!1}},tooltips:!0,tooltip_formatter:function(label,x,y){return label+": "+lang("{0} files",[numberFilter(y)]).toString()}}}}),ATPStatsWidget.prototype._render=inject.mark(function($timeout){return function(){this.sandboxStatus&&this.avStats&&this.sandboxStats&&$timeout(function(){this.avChartConfig=this._createChart(this.avStats,this.AV_LABELS,this.AV_COLORS),this.sandboxChartConfig=this._createChart(this.sandboxStats,this.SANDBOX_LABELS,this.SANDBOX_COLORS),this.loading=!1}.bind(this))}}),ATPStatsWidget.prototype._run=inject.mark(function($scope,notificationRequests,$q){const callback=status=>{this.sandboxStatus=status,this._render()};return function(){this.stopDataPolling(),$q.when(notificationRequests.watch({scope:$scope,requestType:"sandboxStatus",callback:callback,fortigate:this.fortigate,immediate:!0})).then(listener=>this._broadcastListener=listener),this.startDataPolling()}}),ATPStatsWidget.prototype.startDataPolling=inject.mark(function($q,$http,widgetShared,$scope){const fetchStats=isGlobal=>{const params={};isGlobal&&(params.global=1);const avStatsUri=this._createCSFURI("/api/v2/monitor/utm/antivirus/stats"),sandboxStats=this._createCSFURI("/api/v2/monitor/system/sandbox/stats"),promises=[$http.get(avStatsUri,{params:params}),$http.get(sandboxStats,{params:params})];return $q.all(promises)},processResults=([avResponse,sandboxResponse])=>{this.avStats=this._aggregateResponseStats(avResponse.data,AV_RESPONSE_KEYS),this.sandboxStats=this._aggregateResponseStats(sandboxResponse.data,SANDBOX_RESPONSE_KEYS),this._render()};return function(){this._currentCacheKey=this._generateUniqueCacheKey(),this.dashboard.subscribeToPolledCache(this._currentCacheKey,()=>fetchStats(this._isGlobal()),widgetShared.REFRESH_INTERVAL.LONG);const cacheData=this.dashboard.getPolledCacheInfo(this._currentCacheKey);this.dataPollWatch=$scope.$watch(()=>cacheData.data,(newData,oldData)=>{newData&&newData!==oldData&&processResults(newData)})}}),ATPStatsWidget.prototype.stopDataPolling=function(){this.dataPollWatch&&this.dataPollWatch(),this._broadcastListener&&this._broadcastListener(),this.dashboard.unsubscribeToPolledCache(this._currentCacheKey)},ATPStatsWidget.prototype.toggleMenu=function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})},ATPStatsWidget.prototype.showSystemFabric=inject.mark(function($location){return function(){return this.sandboxStatus&&"cloud"===this.sandboxStatus.type?$location.url("/fabric-connector/edit/fortisandbox-cloud"):$location.url("/fabric-connector/edit/fortisandbox")}}),ATPStatsWidget.prototype._createCSFURI=function(uri){return this.fortigate&&this.fortigate.createCSFURI(uri)||uri},ATPStatsWidget.prototype._generateUniqueCacheKey=function(){const parts=["AdvancedThreatProtection"];return this.fortigate&&parts.push(this.fortigate.serial),parts.push(this._isGlobal()?"global":"vdom"),parts.join("::")},ATPStatsWidget.prototype._isGlobal=inject.mark(function(state){return function(){const fgtState=this.fortigate&&this.fortigate.state||state;return fgtState.vdom_mode&&fgtState.admin.global_admin}}),function(providers){providers.$compile.component("fAtpStatsWidget",{templateUrl:__webpack_require__(1724),controller:ATPStatsWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1724:function(module,exports){var path="/migadmin/ng/system/dashboard/f-atp-stats-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{::\'dashboard_widget_type::analytics\' | lang}}\n    </widget-title>\n    <extra-controls>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div class="atp-stats-container" ng-class="{\'full-dimension-widget\': $ctrl.fullDimension}">\n            <div class="atp-stats-category">\n                <div f-chart="$ctrl.avChartConfig" resizing="$ctrl.chartResizing"\n                    class="atp-stats-chart" ng-if="$ctrl.showGraphs"></div>\n                <div>\n                    <table class="table key-value">\n                        <tbody>\n                            <tr>\n                                <td>{{::\'FortiGate Scanned Files\' | lang}}</td>\n                                <td>{{$ctrl.avStats.scanned | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.AV_COLORS.infected}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.AV_LABELS.infected}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.avStats.infected | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.AV_COLORS.zerohour}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.AV_LABELS.zerohour}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.avStats.zerohour | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.AV_COLORS.malware_list}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.AV_LABELS.malware_list}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.avStats.malware_list | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.AV_COLORS.suspicious}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.AV_LABELS.suspicious}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.avStats.suspicious | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.AV_COLORS.clean}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.AV_LABELS.clean}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.avStats.clean | number}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class="atp-stats-category menu-toggle-area clickable"\n                 ng-if="$ctrl.sandboxStatus.connected && $ctrl.fsbCloudFeatureEnabled"\n                 ng-click="$ctrl.toggleMenu($ctrl.fabricPopUpMenu, $event)">\n                <div f-chart="$ctrl.sandboxChartConfig" resizing="$ctrl.chartResizing"\n                    class="atp-stats-chart" ng-if="$ctrl.showGraphs"></div>\n                <div>\n                    <table class="table key-value">\n                        <tbody>\n                            <tr>\n                                <td ng-if="$ctrl.sandboxStatus.type === \'appliance\'">\n                                    {{::\'FortiSandbox Scanned Files\' | lang}}\n                                </td>\n                                <td ng-if="$ctrl.sandboxStatus.type === \'cloud\'">\n                                    {{::\'FortiSandbox Cloud Scanned Files\' | lang}}\n                                </td>\n                                <td>{{$ctrl.sandboxStats.submitted | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.SANDBOX_COLORS.detected}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.SANDBOX_LABELS.detected}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.sandboxStats.detected | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.SANDBOX_COLORS.risk_high}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.SANDBOX_LABELS.risk_high}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.sandboxStats.risk_high | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.SANDBOX_COLORS.risk_med_low}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.SANDBOX_LABELS.risk_med_low}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.sandboxStats.risk_med_low | number}}</td>\n                            </tr>\n                            <tr ng-class="{child: !$ctrl.showGraphs}">\n                                <td>\n                                    <div class="chart-legend-item-container">\n                                        <div class="chart-legend-item" ng-show="$ctrl.showGraphs">\n                                            <div class="chart-legend-color"\n                                                ng-style="::{\'background-color\': $ctrl.SANDBOX_COLORS.clean}">\n                                            </div>\n                                        </div>\n                                        {{::$ctrl.SANDBOX_LABELS.clean}}\n                                    </div>\n                                </td>\n                                <td>{{$ctrl.sandboxStats.clean | number}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.fabricPopUpMenu">\n    <div f-menu-item-button click="$ctrl.showSystemFabric()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Configure settings in Security Fabric > Fabric Connectors > {CONNECTOR}\' |\n            lang:[(($ctrl.sandboxStatus.type === \'appliance\' ? \'FortiSandbox\' : \'FortiSandbox Cloud\') | lang)]}}</span>\n    </div>\n</div>\n')}]),module.exports=path},1725:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function CpuPerCoreUsage($scope,injector,systemResourceUsage){injector.injectMarked(this,{$scope:$scope}),this.timeOptions=systemResourceUsage.getTimeOptions(),this.resource="cpu"}return CpuPerCoreUsage.prototype.$onInit=inject.mark(function($scope,csfTopology,systemResourceUsage){return async function(){await csfTopology.buildIfNecessary(),systemResourceUsage.registerWatch($scope.$id,this.fortigate),$scope.$watch(()=>systemResourceUsage.getResource(this.resource,this.fortigate),cpuUsage=>{cpuUsage&&cpuUsage.length&&(this.cores=cpuUsage.splice(1),this._plot())}),$scope.$on("$destroy",function(){systemResourceUsage.unRegisterWatch($scope.$id)})}}),CpuPerCoreUsage.prototype.COLOR=Chart.prototype.COLORS.BLUE,CpuPerCoreUsage.prototype._plot=inject.mark(function($filter){const dateFilter=$filter("fDateTime");return function(){this.lineChartConfigs=this.cores.map(core=>{const coreHistory=core.historical[this.currentTimeOption.option];return{data:[{data:coreHistory.values,color:this.COLOR,currentUsage:core.current}],options:{xaxis:{mode:"time",timezone:"browser",min:coreHistory.start-100,max:coreHistory.end+100},yaxis:{min:0,max:100,tickFormatter:function(value){return value+"%"}},series:{lines:{fill:!0},stack:!0},legend:{show:!1}},tooltips:!0,tooltip_formatter:function(label,x,y){return dateFilter(x,{skipProcessing:!0})+": "+y+"%"}}})}}),CpuPerCoreUsage.prototype.setTimeOption=function(timeOption){this.currentTimeOption=timeOption,this._plot()},function(providers){providers.$compile.component("fCpuPerCoreUsage",{controller:CpuPerCoreUsage,templateUrl:__webpack_require__(1726),bindings:{currentTimeOption:"<",fortigate:"<"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1726:function(module,exports){var path="/migadmin/ng/system/dashboard/f-cpu-per-core-usage.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="menu">\n    <button type="button" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu">\n        {{ \'time_period::\' + $ctrl.currentTimeOption.name | lang }}\n    </button>\n    <div f-pop-up-menu=$ctrl.timeOptionsMenu>\n        <div f-menu-item-button ng-repeat="timeOption in $ctrl.timeOptions"\n             selected="$ctrl.currentTimeOption === timeOption"\n             ng-click="$ctrl.setTimeOption(timeOption)">\n            <span>{{ \'time_period::\' + timeOption.name | lang }}</span>\n        </div>\n    </div>\n</div>\n<div class="per-core-line-charts">\n    <div class="per-core-line-chart" ng-repeat="lineChartConfig in $ctrl.lineChartConfigs track by $index">\n        <span class="light-text title">{{:: \'Core {0}\' | lang:[$index + 1] }}</span>\n        <div f-chart="lineChartConfig" class="with-current-stat"></div>\n        <div class="current-stat">\n            <div class="current-stat-item">\n                <span class="light-text">{{:: \'Current usage\' | lang }}</span>\n                <span class="current-stat-value">{{ lineChartConfig.data[0].currentUsage + \' %\' }}</span>\n            </div>\n        </div>\n    </div>\n</div>\n')}]),module.exports=path},1727:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function CpuUsageWidget($scope,injector,state){injector.injectMarked(this,{$scope:$scope}),this.isGlobal=!state.vdom_mode||""===state.current_vdom,this.resource="cpu",this.loading=!0}return CpuUsageWidget.prototype.COLOR=Chart.prototype.COLORS.BLUE,CpuUsageWidget.prototype={$onInit:inject.mark(function(csfTopology,$scope,systemResourceUsage){return async function(){await csfTopology.buildIfNecessary(),this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.timeOptions=systemResourceUsage.getTimeOptions(),this.currentTimeOption=systemResourceUsage.getTimeOptionForWidget("cpu-usage"),this.dashboardCsf||systemResourceUsage.registerWatch($scope.$id,this.fortigate),$scope.$watch(()=>systemResourceUsage.getResource(this.resource,this.fortigate),cpuUsage=>{cpuUsage&&cpuUsage.length&&(this.loading=!1,this.cpuUsage=cpuUsage,this.singleCoreUnit=cpuUsage.length<=2,this.currentUsage=cpuUsage[0].current,this._plot())}),$scope.$watch("$ctrl.widgetModel.getRelativeWidth()",(curr,prev)=>{curr!==prev&&this._plot()}),$scope.$on("$destroy",function(){systemResourceUsage.unRegisterWatch($scope.$id)}),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,newVal=>{newVal&&(systemResourceUsage.registerWatch($scope.$id,newVal),this.loading=!0,this.fortigate=newVal)})}}),_plot:inject.mark(function($filter,lang,systemResourceUsage){const dateFilter=$filter("fDateTime");return function(){let data=[];this.singleCoreUnit||(data=this.cpuUsage.filter(function(datum,idx){return idx>0}).map((datum,idx)=>({label:lang("Core {0}",[idx+1]).toString(),color:"rgb(200, 200, 200)",data:datum.historical[this.currentTimeOption.option].values,cpuUsage:"core"})));const avgCpuDataEntry=this.cpuUsage[0].historical[this.currentTimeOption.option];data.push({label:lang("Average Usage").toString(),data:avgCpuDataEntry.values,color:this.COLOR,cpuUsage:"avg"}),this.lineChartConfig={data:data,options:{xaxis:systemResourceUsage.plotFormatters.xAxisConfig(this.widgetModel,avgCpuDataEntry.start,avgCpuDataEntry.end,"1-min"!==this.currentTimeOption.option),yaxis:{min:0,max:100,tickFormatter:function(value){return value+"%"}},legend:{show:!1},series:{stack:!(this.isGlobal&&!this.singleCoreUnit)},lines:{show:!0,fill:!(this.isGlobal&&!this.singleCoreUnit)}},tooltips:!0,tooltip_formatter:(label,x,y)=>{const graphLabel=dateFilter(x,{skipProcessing:!0})+": "+y+"%";return this.singleCoreUnit?graphLabel:label+" - "+graphLabel}}}}),setTimeOption:inject.mark(function(systemResourceUsage){return function(timeOption){this.currentTimeOption=timeOption,systemResourceUsage.saveOptionForWidget("cpu-usage",timeOption,"TIME"),this._plot()}}),showPerCoreUsage:inject.mark(function(lang,slide,$rootScope){return function(){const slideScope=$rootScope.$new();slideScope.currentTimeOption=this.currentTimeOption,slideScope.fortigate=this.fortigate;const slideParams={template:'<f-cpu-per-core-usage\n                        fortigate="::fortigate"\n                        current-time-option="::currentTimeOption"\n                    ></f-cpu-per-core-usage>',options:{title:lang("Per Core CPU Usage").toString(),closeOnEscape:!0,fullHeight:!0},parentScope:slideScope};slide.open("cpu_per_core_usage",slideParams).finally(()=>{slideScope.$destory()})}}),toggleMenu:function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})}},function(providers){providers.$compile.component("fCpuUsageWidget",{templateUrl:__webpack_require__(1728),controller:CpuUsageWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1728:function(module,exports){var path="/migadmin/ng/system/dashboard/f-cpu-usage-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{:: \'cpu\' | lang }}\n    </widget-title>\n    <extra-controls ng-if="!$ctrl.loading">\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu">\n            {{ \'time_period::\' + $ctrl.currentTimeOption.name | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.timeOptionsMenu">\n            <div f-menu-item-button ng-repeat="timeOption in $ctrl.timeOptions"\n                 selected="$ctrl.currentTimeOption === timeOption"\n                 ng-click="$ctrl.setTimeOption(timeOption)">\n                <span>{{ \'time_period::\' + timeOption.name | lang }}</span>\n            </div>\n        </div>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div ng-class="{\'menu-toggle-area\': $ctrl.isGlobal && !$ctrl.singleCoreUnit}"\n            ng-click="$ctrl.isGlobal && !$ctrl.singleCoreUnit && $ctrl.toggleMenu($ctrl.popUpMenu, $event)">\n            <div f-chart="$ctrl.lineChartConfig" class="full-graph with-current-stat"></div>\n            <div class="current-stat">\n                <div class="current-stat-item">\n                    <span class="light-text">{{:: \'Current usage\' | lang }}</span>\n                    <span class="current-stat-value">{{ $ctrl.currentUsage + \'%\' }}</span>\n                </div>\n            </div>\n        </div>\n    </widget-content>\n    <widget-absolute>\n        <span ng-if="$ctrl.currentUsage >= 90" class="severity-message severity-high large pinned-message">\n            <f-icon class="fa-severity-high"></f-icon>\n            <span>{{:: \'High CPU usage\' | lang }}</span>\n        </span>\n    </widget-absolute>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu">\n    <div f-menu-item-button click="$ctrl.showPerCoreUsage()">\n        <f-icon class="fa-line-chart"></f-icon>\n        <span>{{:: \'Show per core CPU usage\' | lang }}</span>\n    </div>\n</div>\n')}]),module.exports=path},1729:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function DiskUsageWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.resource="disk",this.loading=!0}return DiskUsageWidget.prototype={COLOR:Chart.prototype.COLORS.INDIGO,$onInit:inject.mark(function($scope,systemResourceUsage,csfTopology){return async function(){await csfTopology.buildIfNecessary(),this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.timeOptions=systemResourceUsage.getTimeOptions(),this.currentTimeOption=systemResourceUsage.getTimeOptionForWidget("disk-usage"),this.dashboardCsf||systemResourceUsage.registerWatch($scope.$id,this.fortigate),$scope.$watch(()=>systemResourceUsage.getResource(this.resource,this.fortigate),diskUsage=>{diskUsage&&diskUsage.length&&(this.loading=!1,this.diskUsage=diskUsage,this.currentDiskUsage=diskUsage[0].current,this._plot())}),$scope.$watch("$ctrl.widgetModel.getRelativeWidth()",(curr,prev)=>{curr!==prev&&this._plot()}),$scope.$on("$destroy",function(){systemResourceUsage.unRegisterWatch($scope.$id)}),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,newVal=>{newVal&&(systemResourceUsage.registerWatch($scope.$id,newVal),this.loading=!0,this.fortigate=newVal)})}}),_plot:inject.mark(function($filter,systemResourceUsage){var dateFilter=$filter("fDateTime");return function(){var diskUsageHistory=this.diskUsage[0].historical[this.currentTimeOption.option],data=[{data:diskUsageHistory.values,color:this.COLOR}];this.lineChartConfig={data:data,options:{xaxis:systemResourceUsage.plotFormatters.xAxisConfig(this.widgetModel,diskUsageHistory.start,diskUsageHistory.end,"1-min"!==this.currentTimeOption.option),yaxis:{tickFormatter:function(value){return value+"%"},min:0,max:100,tickDecimals:0},series:{lines:{fill:!0},stack:!0},legend:{show:!1}},tooltips:!0,tooltip_formatter:function(label,x,y){return dateFilter(x,{skipProcessing:!0})+": "+y+"%"}}}}),setTimeOption:inject.mark(function(systemResourceUsage){return function(timeOption){this.currentTimeOption=timeOption,systemResourceUsage.saveOptionForWidget("disk-usage",timeOption,"TIME"),this._plot()}})},function(providers){providers.$compile.component("fDiskUsageWidget",{templateUrl:__webpack_require__(1730),controller:DiskUsageWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1730:function(module,exports){var path="/migadmin/ng/system/dashboard/f-disk-usage-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{::\'disk\' | lang}}\n    </widget-title>\n    <extra-controls ng-if="!$ctrl.loading">\n        <button class="bare" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu">\n            {{ \'time_period::\' + $ctrl.currentTimeOption.name | lang }}\n        </button>\n        <div f-pop-up-menu="$ctrl.timeOptionsMenu">\n            <div f-menu-item-button ng-repeat="timeOption in $ctrl.timeOptions"\n                 selected="$ctrl.currentTimeOption === timeOption"\n                 ng-click="$ctrl.setTimeOption(timeOption)">\n                <span>{{ \'time_period::\' + timeOption.name | lang }}</span>\n            </div>\n        </div>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div f-chart="$ctrl.lineChartConfig" class="full-graph with-current-stat"></div>\n        <div class="current-stat">\n            <div class="current-stat-item">\n                <span class="light-text">{{:: \'Current usage\' | lang }}</span>\n                <span class="current-stat-value">{{ $ctrl.currentDiskUsage + \'%\' }}</span>\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n')}]),module.exports=path},1731:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(34),__webpack_require__(31),__webpack_require__(32),__webpack_require__(8),__webpack_require__(55)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,dateTime,dom,formatters,ftnt_shared){const WIDGET_DATA_API="/api/v2/monitor/system/fabric-device/widget-data",DEVICE_SOURCE_ID="csfFabricDevices",WIDGET_SOURCE_ID="csfFabricDeviceWidgets",DEVICE_ID="fabric-device",WIDGET_NAME="fabric-device-widget-name",VISUALIZATION_TYPE="fabric-device-widget-visualization-type",FORMATTER_FNS={BITS_PER_SECOND:formatters.metric_bits_per_second,BYTES_PER_SECOND:formatters.metric_bytes_per_second,BYTES:formatters.metric_bytes};function FabricDeviceWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.modelData=this.widgetModel.getModelData(),this.DEVICE_SOURCE_ID=DEVICE_SOURCE_ID,this.WIDGET_SOURCE_ID=WIDGET_SOURCE_ID,this.deviceId=this.modelData[DEVICE_ID],this.deviceName=this.deviceId.split("::")[0],this.widgetName=this.modelData[WIDGET_NAME],this.visualizationType=this.modelData[VISUALIZATION_TYPE],this.dataUrl=WIDGET_DATA_API}return FabricDeviceWidget.prototype.$onInit=inject.mark(()=>(function(){this.setupWatcher(),this.init()})),FabricDeviceWidget.prototype.init=function(){this.loading=!0,this.loadTitle().then(this.poll).catch(()=>{this.loading=!1})},FabricDeviceWidget.prototype.loadTitle=inject.mark($q=>(function(){return this.loadingTitle=!0,ftnt_shared.Omniselect.getSourceData(DEVICE_SOURCE_ID).then(data=>{const deviceMapping=data.mapping;if(!deviceMapping||!deviceMapping[this.deviceId])return this.invalidDevice=!0,$q.reject();deviceMapping[this.deviceId].path&&(this.dataUrl=`/csf/${deviceMapping[this.deviceId].path}`+`${this.dataUrl}`),this.device=deviceMapping[this.deviceId],this.showDeviceNameInOmniselect=!0,this.updateTitle()}).catch(()=>{this.loadingTitle=!1})})),FabricDeviceWidget.prototype.updateTitle=function(){this.device&&!this.device.$original.connected&&this.device.$original.getStatus(),this.device.$original.pendingRequest.then(updatedDevice=>{this.device=Object.assign({},updatedDevice)}),this.device?this.device.getWidgetList().then(()=>{const widgetKey=`${this.widgetName}::${this.deviceId}`,mapping=this.device.$original.widgetMapping;mapping&&mapping[widgetKey]&&(this.widgetMeta=mapping[widgetKey])}).finally(()=>{this.loadingTitle=!1}):this.loadingTitle=!1},FabricDeviceWidget.prototype.refresh=function(){this.highlightWarning?this.init():this.poll()},FabricDeviceWidget.prototype.redirToCSFSetting=inject.mark($location=>(function(){$location.url(`/fabric-connector/edit/fabric-device/${this.deviceName||""}`)})),FabricDeviceWidget.prototype.setupWatcher=inject.mark(($scope,lang,$sce)=>(function(){$scope.$watchGroup(["$ctrl.widgetModel.getRelativeWidth()","$ctrl.widgetModel.getRelativeHeight()"],()=>{this.mutableInstance&&this.mutableInstance.updateDisplay()});const changeSettingButton={icon:"fa-cog",fn:this.dashboard.editWidget.bind(this.dashboard,this.widgetModel),text:lang("Choose another device")},changeCSFSettingButton={icon:"fa-external-link",fn:this.redirToCSFSetting,text:lang("Configure settings in Security Fabric > Fabric Connectors > {CONNECTOR}",[this.deviceName])},refreshButton={icon:"fa-refresh",fn:this.refresh.bind(this),text:lang("refresh")};$scope.$watchGroup(["$ctrl.invalidDevice","$ctrl.renderingFailed","$ctrl.invalidToken","$ctrl.data","$ctrl.loading"],()=>{this.showWarning=!1,this.highlightWarning=!1,this.warningText=null,this.fixButtons=[],this.showButtonsInDropdown=!1,this.invalidDevice?(this.showWarning=!0,this.highlightWarning=!0,this.warningText=$sce.trustAsHtml(lang("Fabric Device {NAME} does not exist",[this.deviceName]).toString()),this.fixButtons=[changeSettingButton,changeCSFSettingButton],this.showButtonsInDropdown=!0):this.data||this.loading?this.data&&this.renderingFailed&&(this.showWarning=!0,this.warningText=lang("Failed to render the widget"),this.fixButtons=[]):(this.showWarning=!0,this.invalidToken?(this.highlightWarning=!0,this.warningText=lang("Invalid access token"),this.fixButtons=[changeCSFSettingButton],this.showButtonsInDropdown=!0):(this.warningText=lang("Failed to retrieve info"),this.fixButtons=[refreshButton]))})})),FabricDeviceWidget.prototype.makeSafe=inject.mark($log=>(function(fn,message,successFn,failureFn){return message=message||"Failed to render the widget, possibily due to invalid API data.\n",successFn=successFn||(()=>{this.renderingFailed=!1}),failureFn=failureFn||(()=>{this.renderingFailed=!0}),()=>{try{fn.apply(this,arguments),successFn()}catch(e){$log.error(message,e),failureFn()}}})),FabricDeviceWidget.prototype.$onDestroy=inject.mark($timeout=>(function(){$timeout.cancel(this._timeoutPromise),this.destroyed=!0})),FabricDeviceWidget.prototype.getLangValue=inject.mark(state=>(function(key){const langMap=this.meta&&this.meta.language||{},map=langMap[state.language_code]||langMap.en||{};return dom.escapeHTML(map[key]||key)})),FabricDeviceWidget.prototype.poll=inject.mark(($timeout,widgetShared)=>(function(){return $timeout.cancel(this._timeoutPromise),this.fetchData().finally(()=>{if(!this.destroyed){let delay;this.meta&&this.meta.polling&&!isNaN(this.meta.polling_interval_min)?delay=Math.max(1e3*this.meta.polling_interval_min,widgetShared.REFRESH_INTERVAL.SHORT):this.data||this.invalidToken||(delay=widgetShared.REFRESH_INTERVAL.NORMAL),!this.data||this.widgetMeta&&this.device&&this.device.$original.connected||this.updateTitle(),delay&&(this._timeoutPromise=$timeout(this.poll,delay))}})})),FabricDeviceWidget.prototype.fetchData=inject.mark(($http,$q,$log)=>(function(){return this.loading=!this.data,this.invalidToken=!1,this.failedToRetrieve=!1,this.renderingFailed=!1,$http.get(this.dataUrl,{params:{mkey:this.deviceName,widget_id:encodeURIComponent(this.widgetName),visualization_type:encodeURIComponent(this.visualizationType)}}).then(response=>{const respData=response.data.results.response,success=response.data.results.success,httpCode=response.data.results.http_code;return success&&respData?(this.data=respData.data,this.meta=respData.meta,this.data&&this.meta?("pie-chart"===this.visualizationType&&this.getPieChartOption(),"bar-chart"===this.visualizationType&&this.getBarChartOption(),"table"===this.visualizationType&&this.getTableConfig(),void("time-line-chart"===this.visualizationType&&this.getLineChartConfig())):($log.error("data and meta can't be empty"),void(this.renderingFailed=!0))):(401===httpCode&&(this.invalidToken=!0),$q.reject())}).catch(()=>{this.data=null,this.meta=null}).finally(()=>{this.loading=!1})})),FabricDeviceWidget.prototype.getPieChartOption=inject.mark(function(){return this.makeSafe(()=>{this.data.forEach(item=>{item.data=item.value,item.label=this.getLangValue(item.lang_key)}),this.pieChartConfig={data:this.data,options:{series:{pie:{show:!0,label:{show:!1},radius:.95,innerRadius:.4}},legend:{show:!0},grid:{hoverable:!0,clickable:!0}},tooltips:!0}})}),FabricDeviceWidget.prototype.getBarChartOption=inject.mark(function(){return this.makeSafe(()=>{this.data.forEach((item,index)=>{item.data=[[index,item.value]],item.label=this.getLangValue(item.lang_key)});const xticks=this.data.map((item,index)=>[index,item.label]),formatterFn=this.getFormatterFn();this.barChartConfig={data:this.data,options:{series:{stack:!0,bars:{show:!0}},bars:{align:"center",barWidth:.5},xaxis:{ticks:xticks},yaxis:{tickFormatter:formatterFn?value=>formatterFn(value):null}},tooltips:!0,tooltip_formatter:formatterFn?(label,x,y)=>`${label}: ${formatterFn(y)}`:null}})}),FabricDeviceWidget.prototype.getTableConfig=inject.mark(function(){return this.makeSafe(()=>{const dateColumns=[];(this.data.columns||[]).forEach(column=>{column.id=column.key,"date"===column.type?(dateColumns.push(column),column.cellValueFunction=(entry=>entry[`$${column.key}`])):"number"!==column.type&&(column.type="standard"),column.skipTranslation=!0,column.langKey=this.getLangValue(column.lang_key)});const settings={columns:this.data.columns,defaultColumns:this.data.default_columns};this.data.entries.forEach(entry=>{dateColumns.forEach(column=>{entry[column.id]&&(entry[`$${column.id}`]=entry[column.id]*dateTime.S_TO_MS)})}),this.tableConfig={source:this.data.entries,settings:settings}})}),FabricDeviceWidget.prototype.getFormatterFn=function(){let formatterFn=FORMATTER_FNS[this.meta.formatter];return!formatterFn&&this.meta.unit&&(formatterFn=(value=>String(value)+this.meta.unit)),formatterFn},FabricDeviceWidget.prototype.getLineChartConfig=inject.mark(function($filter){return this.makeSafe(()=>{var dateFilter=$filter("fDateTime");this.timeOptions=Object.keys(this.data[0].time_frames),this.currentTimeOption&&this.timeOptions.includes(this.currentTimeOption)||(this.currentTimeOption=this.timeOptions[0]);const data=[];this.currentValues=[];const formatterFn=this.getFormatterFn();this.data.forEach(item=>{const label=this.getLangValue(item.lang_key),timeFrame=(timeframe=>(timeframe.forEach(interval=>{interval[0]=dateTime.adjustBasedOnTZDevice(interval[0])}),timeframe))(item.time_frames[this.currentTimeOption]);data.push({data:timeFrame,label:label});let value=timeFrame[0]&&timeFrame[0][1];value&&(value=formatterFn?formatterFn(value):value,this.currentValues.push({value:value,label:label}))});const getMinOrMax=isMin=>this.data.reduce((result,item)=>{let value;const items=item.time_frames[this.currentTimeOption];if(isMin){const subArray=items&&items.slice(-1),lastItem=subArray&&subArray[0];value=lastItem&&lastItem[0]||dateTime.adjustBasedOnTZDevice(new Date,{fromBrowser:!0}).getTime()}else value=items&&items[0]&&items[0][0]||0;return value=isMin?value-100:value+100,"number"==typeof result?isMin?Math.min(result,value):Math.max(result,value):value},null);this.lineChartConfig={data:data,options:{xaxis:{mode:"time",timezone:"browser",min:getMinOrMax(!0),max:getMinOrMax(!1)},yaxis:{tickFormatter:formatterFn?value=>formatterFn(value):null,min:0,tickDecimals:0},legend:{show:!0}},tooltips:!0,tooltip_formatter:function(label,x,y){return`${dateFilter(x,{skipProcessing:!0})}: ${formatterFn?formatterFn(y):y} (${label})`}}})}),FabricDeviceWidget.prototype.setTimeOption=function(timeOption){this.currentTimeOption=timeOption,this.getLineChartConfig()},providers=>{providers.$compile.component("fFabricDeviceWidget",{templateUrl:__webpack_require__(1732),controller:FabricDeviceWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}})}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1732:function(module,exports){var path="/migadmin/ng/system/dashboard/f-fabric-device-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel" loading="$ctrl.loading"\n    has-settings="::true" on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)"\n    no-content-margin="::$ctrl.visualizationType === \'table\'"\n    ng-class="{\'high\': $ctrl.highlightWarning}">\n    <widget-title>\n        <f-icon ng-if="!$ctrl.widgetMeta && $ctrl.loadingTitle"\n            class="fa-loading">\n        </f-icon>\n        <span ng-if="!$ctrl.widgetMeta && !$ctrl.loadingTitle">\n            {{:: $ctrl.widgetName}}\n        </span>\n        <span ng-if="$ctrl.widgetMeta">\n            {{:: $ctrl.widgetMeta.getLabel()}}\n        </span>\n        <span>&nbsp;-&nbsp;</span>\n        <span ng-if="!$ctrl.showDeviceNameInOmniselect">\n            {{::$ctrl.deviceName}}\n        </span>\n        <f-omniselect-entry\n            ng-if="$ctrl.showDeviceNameInOmniselect"\n            entry="$ctrl.device.$original">\n        </f-omniselect-entry>\n    </widget-title>\n    <extra-controls class="widget-controls">\n        <button type="button" class="bare" ng-click="$ctrl.refresh()">\n            <f-icon class="fa-refresh" f-tip>\n                <span f-lang="refresh"></span>\n            </f-icon>\n        </button>\n        <div ng-if="!$ctrl.showWarning && $ctrl.data && $ctrl.visualizationType === \'time-line-chart\'"\n            class="time-options">\n            <button\n                class="bare" f-pop-up-menu-toggle="$ctrl.timeOptionsMenu">\n                {{ $ctrl.getLangValue($ctrl.currentTimeOption) }}\n            </button>\n            <div f-pop-up-menu="$ctrl.timeOptionsMenu">\n                <div f-menu-item-button ng-repeat="timeOption in $ctrl.timeOptions"\n                        selected="$ctrl.currentTimeOption === timeOption"\n                        ng-click="$ctrl.setTimeOption(timeOption)">\n                    <span>{{ $ctrl.getLangValue(timeOption) }}</span>\n                </div>\n            </div>\n        </div>\n    </extra-controls>\n    <widget-content>\n        <div ng-if="!$ctrl.showWarning && !$ctrl.loading">\n            <div ng-if="$ctrl.visualizationType === \'key-value-pair\'">\n                <table class="table key-value">\n                    <tr ng-repeat="pair in $ctrl.data">\n                        <td>{{:: $ctrl.getLangValue(pair.lang_key) }}</td>\n                        <td>{{:: pair.value}}</td>\n                    </tr>\n                </table>\n            </div>\n            <div ng-if="$ctrl.visualizationType === \'pie-chart\'"\n                f-chart="$ctrl.pieChartConfig"\n                class="full-dimension-widget">\n            </div>\n            <div ng-if="$ctrl.visualizationType === \'bar-chart\'"\n                f-chart="$ctrl.barChartConfig"\n                class="full-dimension-widget">\n            </div>\n            <f-mutable\n                ng-if="$ctrl.visualizationType === \'table\'"\n                source="$ctrl.tableConfig.source"\n                settings="$ctrl.tableConfig.settings"\n                instance="$ctrl.mutableInstance"\n                context-menu="::true"></f-mutable>\n            <div ng-if="$ctrl.visualizationType === \'time-line-chart\'">\n                <div f-chart="$ctrl.lineChartConfig"\n                    class="full-graph with-current-stat">\n                </div>\n                <div class="current-stat">\n                    <div ng-repeat="currentValue in $ctrl.currentValues"\n                        class="current-stat-item">\n                        <span class="light-text">{{::currentValue.label}}</span>\n                        <span class="current-stat-value">\n                            {{currentValue.value}}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div ng-show="$ctrl.showWarning"\n            class="full-dimension-widget flex-centered">\n            <div class="flex-column-centered">\n                <div>\n                    <f-icon class="fa-warning icon-xl"></f-icon>\n                    <span class="warning-text" ng-bind-html="$ctrl.warningText"></span>\n                </div>\n                <button type="button" class="button primary"\n                    f-pop-up-menu-toggle="$ctrl.fixMenu"\n                    ng-if="$ctrl.showButtonsInDropdown">\n                    {{:: \'Fix it\' | lang}}\n                </button>\n                <div f-pop-up-menu="$ctrl.fixMenu">\n                    <div f-menu-item-button ng-repeat="button in $ctrl.fixButtons"\n                        ng-click="button.fn()">\n                        <f-icon class="{{::button.icon}}"></f-icon>\n                        <span>{{::button.text}}</span>\n                    </div>\n                </div>\n                <div f-menu-item-button ng-if="!$ctrl.showButtonsInDropdown"\n                    ng-repeat="button in $ctrl.fixButtons"\n                    ng-click="button.fn()">\n                    <f-icon class="{{::button.icon}}"></f-icon>\n                    <span>{{::button.text}}</span>\n                </div>\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n')}]),module.exports=path},1733:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(0),__webpack_require__(30)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,BUILD,fLog){const DOMAIN_NAMES={GLOBAL:"global",EUROPE:"Europe",JAPAN:"Japan"};function FortiCloudWidget($scope,injector){injector.injectMarked(this,{$scope:$scope})}return FortiCloudWidget.prototype.STATUS_BASE_LANG_KEY="License::status.",FortiCloudWidget.prototype.STATUSES=BUILD.SYMBOLS,FortiCloudWidget.prototype.$onInit=function(){this.modelData=this.widgetModel.getModelData(),this.dashboardCsf=this.dashboard.csfEnabled,this._init()},FortiCloudWidget.prototype._init=inject.mark(function($filter,license,state){return function(){this.loading=!0,this.numberFilter=$filter("number"),this.hasSystemWritePermission=state.adminHasWritePermission(state.ACCESS_GROUP.SYSTEM_CFG),this.fsbCloudFeatureEnabled=state.featureEnabled("gui-fortisandbox-cloud"),this._run()}}),FortiCloudWidget.prototype._deregisterListeners=function(){this._broadcastListeners&&this._broadcastListeners.forEach(listener=>listener())},FortiCloudWidget.prototype._run=inject.mark(function($scope,notificationRequests,csfTopology){const PAID_STATUSES=[this.STATUSES.LICENSE_STATUS_LICENSED,this.STATUSES.LICENSE_STATUS_EXPIRES_SOON],WATCH=["license","sandboxStatus"],callback=results=>{const license=results.license;this.forticloud=license.forticloud,this.forticloud_logging=license.forticloud_logging,this.forticloud_sandbox=license.forticloud_sandbox,this.sandboxConfig=results.sandboxStatus,this.isSupported=license.forticloud.status!==this.STATUSES.LICENSE_STATUS_NO_SUPPORT,this.isLoggedIn=this.forticloud.status===this.STATUSES.LICENSE_STATUS_CLOUD_LOGGED_IN,this.forticareRegistered=license.forticare.status===this.STATUSES.LICENSE_STATUS_REGISTERED,this.isPaidLoggingAccount=PAID_STATUSES.indexOf(this.forticloud_logging.status)>=0,this.isPaidSandboxAccount=PAID_STATUSES.indexOf(this.forticloud_sandbox.status)>=0,this.serverLocation=DOMAIN_NAMES[license.forticloud.domain]||license.forticloud.domain;const forticare=license.forticare,isFortiCareSupported=forticare.status!==this.STATUSES.LICENSE_STATUS_NO_SUPPORT;this.isStandaloneAccount=isFortiCareSupported&&this.forticloud.account!==forticare.account&&!this.forticloud.multitenancy,this.loading=!1},watchForFortigate=fortigate=>{this.loading=!0,this.fortigate=fortigate,this._deregisterListeners(),notificationRequests.watchMultiple({scope:$scope,requestTypes:WATCH,callback:callback,fortigate:fortigate,immediate:!0}).then(listeners=>{this._broadcastListeners=listeners})};return async function(){await csfTopology.buildIfNecessary(),watchForFortigate(this.dashboard.getChosenFortigate(this.modelData)),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,(newValue,oldValue)=>{newValue&&newValue!==oldValue&&watchForFortigate(newValue)})}}),FortiCloudWidget.prototype.watchVideo=inject.mark(function($window){return function(){$window.open(this.baseVideoUrl+"298/how-to-upgrade-and-renew-forticloud-subscription-6-0","_blank")}}),FortiCloudWidget.prototype.getStatusIcon=inject.mark(function(license){return function(){return license.getStatusIcon(this.forticloud.status)}}),FortiCloudWidget.prototype.getSeverityClass=inject.mark(function(license){return function(){var className=license.getSeverityLevel(this.forticloud.status)+" severity-message";return this.isSupported&&(className+=" clickable"),className}}),FortiCloudWidget.prototype.getLoggingStatusIcon=inject.mark(function(license){return function(){return license.getStatusIcon(this.forticloud_logging.status)}}),FortiCloudWidget.prototype.getLoggingExpiresLabel=inject.mark(function(license){return function(){return license.getExpiresLabelForStatus(this.forticloud_logging.status)}}),FortiCloudWidget.prototype.formatExpiryDate=inject.mark(function(license){return function(expires,{skipDateModification:skipDateModification=!1}={}){return license.formatExpiryDate(expires,{skipDateModification:skipDateModification})}}),FortiCloudWidget.prototype.getLoggingSeverityClass=inject.mark(function(license){return function(){return license.getSeverityLevel(this.forticloud_logging.status)+" severity-message clickable"}}),FortiCloudWidget.prototype.usingFortiSandboxCloud=function(){return!!this.sandboxConfig.cloud_region},FortiCloudWidget.prototype.getSandboxStatusString=function(){return this.usingFortiSandboxCloud()?this.STATUS_BASE_LANG_KEY+this.forticloud_sandbox.status:"disabled"},FortiCloudWidget.prototype.getSandboxStatusIcon=inject.mark(function(license){return function(ignoreSandboxType){return ignoreSandboxType||this.usingFortiSandboxCloud()?license.getStatusIcon(this.forticloud_sandbox.status):"fa-disabled"}}),FortiCloudWidget.prototype.getSandboxSeverityClass=inject.mark(function(license){return function(){var className="severity-message clickable";return this.usingFortiSandboxCloud()&&(className+=" "+license.getSeverityLevel(this.forticloud_sandbox.status)),className}}),FortiCloudWidget.prototype.getSandboxExpiresLabel=inject.mark(function(license){return function(){return license.getExpiresLabelForStatus(this.forticloud_sandbox.status)}}),FortiCloudWidget.prototype.toggleMenu=function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})},FortiCloudWidget.prototype.openFortiCloud=inject.mark(function(registration){return function(){registration.openFortiCloud(this.fortigate)}}),FortiCloudWidget.prototype.enterLicense=inject.mark(function(registration){return function(){registration.openFortiCareLicense(this.fortigate)}}),FortiCloudWidget.prototype.configureLogSettings=inject.mark(function($location){return function(){$location.url("/log/settings")}}),FortiCloudWidget.prototype.configureSandboxSettings=inject.mark(function($location){return function(){$location.url("/fabric-connector/edit/fortisandbox-cloud")}}),FortiCloudWidget.prototype.statusIsNoLicense=function(status){return[this.STATUSES.LICENSE_STATUS_NO_LICENSE,this.STATUSES.LICENSE_STATUS_FREE_LICENSE].indexOf(status)>=0},FortiCloudWidget.prototype.statusIsExpiringLicense=function(status){return[this.STATUSES.LICENSE_STATUS_EXPIRED,this.STATUSES.LICENSE_STATUS_EXPIRES_SOON].indexOf(status)>=0},FortiCloudWidget.prototype.statusCanRenew=function(status){return this.statusIsNoLicense(status)||this.statusIsExpiringLicense(status)},FortiCloudWidget.prototype.showLogSettings=function(){var PLATFORM=BUILD.PLATFORM;return this.isLoggedIn&&(PLATFORM.GUI_SHOW_FORTICLOUD_ACTIVATE_LOG_OPTION||!PLATFORM.GUI_FORTICLOUD_ACTIVATE_LOG_OPTION_DISABLED)},FortiCloudWidget.prototype.launchPortal=inject.mark(function($http,$window){return async function(){const FORTICLOUD_URL=(await $http.get("/api/v2/monitor/log/forticloud-update-url")).data.results.url;$window.open(FORTICLOUD_URL)}}),FortiCloudWidget.prototype.showRenewVideo=inject.mark(function($window,help){return function(){return help.getVideoUrlByKey("ftgd_update","license_purchase_renew").then(function(url){url?$window.open(url):fLog.error("Failed to get FortiGuard renew video URL")})}}),FortiCloudWidget.prototype.showSystemFortiGuard=inject.mark(function($location){return function(){$location.path("/system/fortiguard")}}),FortiCloudWidget.prototype.migrateToFortiCloud=inject.mark(function(registration){return function(){registration.openFortiCloudMigrate(this.fortigate)}}),FortiCloudWidget.prototype.isCurrentFortigate=function(){return!this.fortigate||this.fortigate.isCurrent},function(providers,loaderProvider){return providers.$compile.component("fForticloudWidget",{templateUrl:__webpack_require__(1734),controller:FortiCloudWidget,bindings:{widgetModel:"<"},require:{dashboard:"^fSystemDashboard"}}),loaderProvider.initModules([__webpack_require__(531)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1734:function(module,exports){var path="/migadmin/ng/system/dashboard/f-forticloud-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget\n    widget-model="::$ctrl.widgetModel"\n    loading="$ctrl.loading"\n    has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)">\n    <widget-title>\n        {{:: \'dashboard_widget_type::forticloud\' | lang }}\n    </widget-title>\n    <extra-controls>\n        <f-widget-fortigate-chooser\n            fortigate="$ctrl.fortigate"\n            widget-model="::$ctrl.widgetModel">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content>\n        <div ng-if="!$ctrl.loading">\n            <table class="table key-value">\n                <tbody>\n                    <tr>\n                        <td>{{::\'Status\' | lang}}</td>\n                        <td>\n                            <div ng-class="$ctrl.getSeverityClass()" f-tip-target\n                                ng-click="$ctrl.isSupported && $ctrl.toggleMenu($ctrl.statusMenu, $event)">\n                                <f-icon ng-class="$ctrl.getStatusIcon()"></f-icon>\n                                <span ng-class="{\'tooltip-hint\': $ctrl.isLoggedIn}">\n                                    {{$ctrl.STATUS_BASE_LANG_KEY + $ctrl.forticloud.status | lang}}\n                                </span>\n                                <div f-tip enabled="$ctrl.isLoggedIn">\n                                    <table class="table key-value">\n                                        <tbody>\n                                            <tr>\n                                                <td>{{::\'Account\' | lang}}</td>\n                                                <td>{{$ctrl.forticloud.account}}</td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.isLoggedIn && $ctrl.serverLocation">\n                        <td>\n                            {{::\'Server Location\' | lang}}\n                        </td>\n                        <td>\n                            <span class="severity-message">\n                                {{ $ctrl.serverLocation | lang }}\n                            </span>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.isLoggedIn">\n                        <td>{{::\'Log Retention\' | lang}}</td>\n                        <td>\n                            <div ng-class="$ctrl.getLoggingSeverityClass()" f-tip-target\n                                ng-click="$ctrl.toggleMenu($ctrl.loggingStatusMenu, $event)">\n                                <f-icon ng-class="$ctrl.getLoggingStatusIcon()"></f-icon>\n                                <span class="tooltip-hint">\n                                    {{$ctrl.STATUS_BASE_LANG_KEY + $ctrl.forticloud_logging.status | lang}}\n                                </span>\n                                <div f-tip>\n                                    <table class="table key-value">\n                                        <tbody>\n                                            <tr>\n                                                <td>{{::\'Status\' | lang}}</td>\n                                                <td>\n                                                    <f-icon ng-class="$ctrl.getLoggingStatusIcon()"></f-icon>\n                                                    <span>{{$ctrl.STATUS_BASE_LANG_KEY + $ctrl.forticloud_logging.status | lang}}</span>\n                                                </td>\n                                            </tr>\n                                            <tr ng-if="$ctrl.forticloud_logging.expires">\n                                                <td>{{$ctrl.getLoggingExpiresLabel()}}</td>\n                                                <td>{{$ctrl.formatExpiryDate($ctrl.forticloud_logging.expires, {skipDateModification: true})}}</td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.isLoggedIn">\n                        <td>{{::\'Storage Used\' | lang}}</td>\n                        <td>\n                            <span class="severity-message" f-tip-target\n                                ng-class="{\'clickable\': $ctrl.showLogSettings()}"\n                                ng-click="$ctrl.showLogSettings() && $ctrl.toggleMenu($ctrl.loggingUsedMenu, $event)">\n                                <span class="tooltip-hint">\n                                    {{$ctrl.forticloud_logging.used_bytes | binaryBytes}}\n                                </span>\n                                <div f-tip>\n                                    <table class="table key-value">\n                                        <tbody>\n                                            <tr>\n                                                <td>{{::\'Log Storage Duration\' | lang}}</td>\n                                                <td>\n                                                    <span ng-show="$ctrl.isPaidLoggingAccount">\n                                                        {{::\'Logs will be kept for 1 year.\' | lang}}\n                                                    </span>\n                                                    <span ng-hide="$ctrl.isPaidLoggingAccount">\n                                                        {{::\'Logs will be kept for 7 days...\' | lang}}\n                                                    </span>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </span>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.fsbCloudFeatureEnabled">\n                        <td colspan="2">\n                            <div class="separator-line"></div>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.fsbCloudFeatureEnabled">\n                        <td>{{::\'sandbox_type::cloud\' | lang}}</td>\n                        <td>\n                            <div ng-class="$ctrl.getSandboxSeverityClass()" f-tip-target\n                                ng-click="$ctrl.toggleMenu($ctrl.sandboxStatusMenu, $event)">\n                                <f-icon ng-class="$ctrl.getSandboxStatusIcon()"></f-icon>\n                                <span class="tooltip-hint">\n                                    {{$ctrl.getSandboxStatusString() | lang}}\n                                </span>\n                                <div f-tip>\n                                    <table class="table key-value">\n                                        <tbody>\n                                            <tr>\n                                                <td>{{::\'Status\' | lang}}</td>\n                                                <td>\n                                                    <f-icon ng-class="$ctrl.getSandboxStatusIcon(true)"></f-icon>\n                                                    <span>{{$ctrl.STATUS_BASE_LANG_KEY + $ctrl.forticloud_sandbox.status | lang}}</span>\n                                                </td>\n                                            </tr>\n                                            <tr ng-if="$ctrl.usingFortiSandboxCloud()">\n                                                <td>{{ ::\'Region\' | lang }}</td>\n                                                <td>{{ ::$ctrl.sandboxConfig.cloud_region | lang}}</td>\n                                            </tr>\n                                            <tr ng-if="$ctrl.forticloud_sandbox.expires">\n                                                <td>{{$ctrl.getSandboxExpiresLabel()}}</td>\n                                                <td>{{$ctrl.formatExpiryDate($ctrl.forticloud_sandbox.expires)}}</td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr ng-if="$ctrl.fsbCloudFeatureEnabled && $ctrl.usingFortiSandboxCloud()">\n                        <td>{{::\'Files Uploaded Today\' | lang}}</td>\n                        <td>\n                            <div f-tip-target>\n                                <div f-resource-bar="($ctrl.forticloud_sandbox.files_uploaded_daily /\n                                     $ctrl.forticloud_sandbox.max_files_daily) * 100"\n                                    show-percentage="::true"></div>\n                                <div f-tip>\n                                    {{\'{0} files\' | lang: [\n                                        $ctrl.numberFilter($ctrl.forticloud_sandbox.files_uploaded_daily) + \' / \' +\n                                        $ctrl.numberFilter($ctrl.forticloud_sandbox.max_files_daily)]}}\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </widget-content>\n    <widget-absolute>\n        <div ng-if="$ctrl.isLoggedIn && $ctrl.forticareRegistered && $ctrl.isStandaloneAccount" f-tip-target>\n            <span class="severity-message severity-high large clickable pinned-message"\n                ng-click="$ctrl.migrateToFortiCloud()">\n                <f-icon class="fa-severity-high"></f-icon>\n                <span f-lang="Migrate to FortiCloud"></span>\n            </span>\n            <span f-tip>\n                {{:: \'You are currently using a Standalone FortiGate Cloud account. It is highly recommended that you migrate to FortiCloud.\' | lang }}\n            </span>\n        </div>\n    </widget-absolute>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.statusMenu">\n    <div f-menu-item-button click="$ctrl.openFortiCloud()" ng-if="!$ctrl.isLoggedIn"\n         enabled="$ctrl.hasSystemWritePermission">\n        <f-icon class="fa-sign-in"></f-icon>\n        <span>{{::\'Activate\' | lang}}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.launchPortal()" ng-if="$ctrl.isLoggedIn">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Launch Portal\' | lang}}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.openFortiCloud()"\n         ng-if="$ctrl.isLoggedIn" enabled="$ctrl.hasSystemWritePermission">\n        <f-icon class="fa-sign-out"></f-icon>\n        <span>{{::\'Logout\' | lang}}</span>\n    </div>\n</div>\n\n<div f-pop-up-menu="$ctrl.loggingStatusMenu">\n    <f-license-renew-options license="$ctrl.forticloud_logging" fortigate="$ctrl.fortigate">\n    </f-license-renew-options>\n    <div f-menu-item-button click="$ctrl.showSystemFortiGuard()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'View details in System > FortiGuard\' | lang}}</span>\n    </div>\n</div>\n\n<div f-pop-up-menu="$ctrl.loggingUsedMenu" ng-if="$ctrl.isCurrentFortigate()">\n    <div f-menu-item-button click="$ctrl.configureLogSettings()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Configure settings in Log & Report > Log Settings\' | lang}}</span>\n    </div>\n</div>\n\n<div f-pop-up-menu="$ctrl.sandboxStatusMenu">\n    <f-license-renew-options license="$ctrl.forticloud_sandbox" fortigate="$ctrl.fortigate">\n    </f-license-renew-options>\n    <div f-menu-item-button  ng-if="$ctrl.isCurrentFortigate()" click="$ctrl.configureSandboxSettings()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{::\'Configure settings in Security Fabric > Fabric Connectors > {CONNECTOR}\' | lang:[(\'FortiSandbox Cloud\' | lang)]}}</span>\n    </div>\n</div>\n')}]),module.exports=path},1736:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(113)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,{FortiGate:FortiGate}){const WIDGET_LOADING_BUFFER=250,SEARCH_PARAMS=new Set(["returnPath","tab","drilldown","start-timestamp","end-timestamp"]),isFortigate=obj=>obj instanceof FortiGate;class FortiviewWidget extends inject.Collectable{constructor(){super(),this.viewSettings={},this.initialLoading=!0}$onInit($INJECTABLE$,fortiviewConfig,csfTopology,fortiviewCommonFilters){return async()=>{this.isFullScreen=this.dashboard.isStandaloneLayout(),this.dashboardCsf=this.dashboard.csfEnabled,await csfTopology.buildIfNecessary(),this.modelData=this.widgetModel.getModelData(),this.isFullScreen=this.dashboard.isStandaloneLayout(),this.valid=!1,this.csfTopology=csfTopology;const type=this.modelData["fortiview-type"],compareBy=this.modelData["fortiview-sort-by"],compareByColumn=fortiviewConfig.FORTIVIEW_COLUMNS[compareBy],filterConfig=await fortiviewCommonFilters.getFilterConfig();this.dashboard.csfEnabled||(this.modelData.fortigate=this.modelData.fortigate||"all"),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.filters={},Object.entries(this.modelData).forEach(([key,value])=>{SEARCH_PARAMS.has(key)?this[key]=this.modelData[key]:filterConfig[key]&&(this.filters[key]=[value])}),"all"!==!this.viewSettings.fortigate.q_origin_key&&(this.filters.fortigate=this.viewSettings.fortigate.serial),this.config=fortiviewConfig.getFortiviewConfig(type),this.valid=this.config&&compareByColumn&&compareByColumn.sorting,this.compareBy=compareByColumn&&(compareByColumn.compareByID||compareByColumn.id),this.title=this.modelData.title||fortiviewConfig.createDefaultWidgetTitle(type,compareBy),this.standaloneWidgetDefaultName=fortiviewConfig.createDefaultWidgetTitle(type),this.startTimestamp=parseInt(this.modelData["start-timestamp"]),this.endTimestamp=parseInt(this.modelData["end-timestamp"]),this.viewSettings["fortiview-timeframe"]=this.modelData["fortiview-timeframe"],"custom"===this.viewSettings["fortiview-timeframe"]&&["start-timestamp","end-timestamp"].forEach(key=>{this.viewSettings[key]=this.modelData[key]}),this.setupWatcher(),this.initialLoading=!1}}setupWatcher($INJECTABLE$,$scope,fortiviewConfig,fortiviewData,lang,csfTopology,$timeout){return()=>{$scope.$watchGroup(["$ctrl.fortiviewController.device","$ctrl.fortiviewController.timeframeOption"],([device,timeframeOption],[,oldTimeframeOption])=>{if(this.config&&device&&timeframeOption&&timeframeOption!==oldTimeframeOption){const TIMEFRAME_TYPE=fortiviewConfig.TIMEFRAME_TYPE,userSelectedTimeframe=this.config.timeframeType===TIMEFRAME_TYPE.USER_SELECTED;userSelectedTimeframe&&!timeframeOption||(userSelectedTimeframe&&timeframeOption===fortiviewData.TIME_PERIODS.REALTIME&&(device=fortiviewConfig.DEVICE.DISK),this.viewSettings["fortiview-timeframe"]=timeframeOption,"custom"===this.viewSettings["fortiview-timeframe"]&&["start-timestamp","end-timestamp"].forEach(key=>{this.viewSettings[key]=this.fortiviewController[key]}),this.deviceLabel=lang(fortiviewConfig.DEVICE_LABELS[device]),this.deviceIcon=fortiviewConfig.getDeviceIcon(device),this.showLabels=!0,this.saveWidget())}}),$scope.$watchGroup([()=>this.dashboardWidget&&this.dashboardWidget.isZoomed,()=>this.dashboardWidget&&this.dashboardWidget.inTransition],([isZoomed,inTransition])=>{inTransition?this.loading=inTransition:$timeout(()=>{this.loading=inTransition},WIDGET_LOADING_BUFFER);const enabled=!isZoomed&&!inTransition;this.dashboard.setAddWidgetEnableStatus(enabled)}),$scope.$watch(()=>this.dashboardCsf&&csfTopology.selectedFortigate,(newVal,oldVal)=>{newVal&&newVal!==oldVal&&(this.viewSettings.fortigate=newVal)}),$scope.$watch(()=>this.viewSettings.fortigate,(newVal,oldVal)=>{if(newVal&&newVal!==oldVal){let newFortigateValue="all"===newVal.q_origin_key?null:newVal.serial;this.fortiviewController.updateFilter("fortigate",newFortigateValue),this.fortiviewController.refreshFromAction(),this.saveWidget()}})}}detachToStandalone($INJECTABLE$,dashboardConfig){return()=>{dashboardConfig.editDashboard(null,null,{"layout-type":"standalone",csf:"disable",widget:[this.modelData],name:this.standaloneWidgetDefaultName},null,!0)}}onBackward($INJECTABLE$,$location){return()=>{this.returnPath&&$location.url(this.returnPath),this.fortiviewController&&this.fortiviewController.isDrilldown()?this.fortiviewController.returnToTopLevel():(this.viewSettings["fortiview-timeframe"]!==this.modelData["fortiview-timeframe"]&&this.fortiviewController.timeframeUpdated(this.modelData["fortiview-timeframe"],this.startTimestamp,this.endTimestamp),this.dashboardWidget.toggleZoom())}}showBackward(){return this.dashboardWidget.isZoomed&&(!this.isFullScreen||this.fortiviewController&&this.fortiviewController.isDrilldown())}async saveWidget(){const update=Object.keys(this.viewSettings).reduce((map,key)=>(isFortigate(this.viewSettings[key])?map[key]=this.viewSettings[key].serial:map[key]=this.viewSettings[key],map),{});this.modelData.fortigate||delete update.fortigate,Object.assign(this.modelData,update),await this.dashboard.widgetUpdate(this.widgetModel,this.modelData.id,this.modelData)}}return function(providers,loaderProvider){return providers.$compile.component("fFortiviewWidget",{bindings:{widgetModel:"<"},controller:FortiviewWidget,templateUrl:__webpack_require__(1737),require:{dashboard:"^fSystemDashboard"}}),loaderProvider.initModules([__webpack_require__(186)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1737:function(module,exports){var path="/migadmin/ng/system/dashboard/f-fortiview-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-preview-widget dashboard-widget="::$ctrl.dashboardWidget" loading="$ctrl.loading"\n    full-screen="$ctrl.isFullScreen" widget-model="::$ctrl.widgetModel"\n    zoom-locked="$ctrl.fortiviewController.isDrilldown()" has-settings="::true"\n    on-settings="$ctrl.dashboard.editWidget($ctrl.widgetModel)"\n    show-backward="$ctrl.showBackward()" on-backward="$ctrl.onBackward()"\n    ng-class="{high: !$ctrl.initialLoading && (!$ctrl.valid || !$ctrl.fortiviewController.supported)}"\n    no-content-margin="::true">\n    <widget-title>\n        {{::$ctrl.title}}\n    </widget-title>\n    <extra-controls class="flex-row-centered" ng-if="$ctrl.fortiviewController && $ctrl.fortiviewController.showExtraTimingControls()">\n        <div class="flex-row-centered" ng-if="!$ctrl.fortiviewController.loading" f-tip-target>\n            <f-icon ng-class="$ctrl.deviceIcon"></f-icon>\n            <div f-menu-item-submenu="$ctrl.timeframeMenu"\n                ng-if="$ctrl.fortiviewController.availableTimeframeOptions.length"\n                enabled="$ctrl.dashboardWidget.isZoomed"\n                extra-class="{{$ctrl.highlightTimeframe ? \'button-selected-highlight-twice very-slow bare\' : \'bare\'}}">\n                <span class="tooltip-hint" f-tip-target\n                    ng-if="$ctrl.showLabels">\n                    <span ng-if="$ctrl.viewSettings[\'fortiview-timeframe\']">\n                        {{\'fv_\' + $ctrl.viewSettings[\'fortiview-timeframe\'] | lang}}\n                    </span>\n                </span>\n            </div>\n            <div f-tip>\n                <table class="table key-value">\n                    <tbody>\n                        <tr>\n                            <td>{{::\'FortiView data from\' | lang}}</td>\n                            <td>\n                                <f-icon ng-class="$ctrl.deviceIcon"></f-icon>\n                                <span>{{$ctrl.deviceLabel}}</span>\n                            </td>\n                        </tr>\n                        <tr ng-if="$ctrl.viewSettings[\'fortiview-timeframe\']" f-tip-target>\n                            <td>{{::\'Time period\' | lang}}</td>\n                            <td>\n                                <f-icon class="fa-clock-o"></f-icon>\n                                <span>{{\'fv_\' + $ctrl.viewSettings[\'fortiview-timeframe\'] | lang}}</span>\n                            </td>\n                        </tr>\n                        <tr ng-if="$ctrl.viewSettings[\'fortiview-timeframe\'] === \'custom\' &&\n                            $ctrl.fortiviewController.startTimestamp">\n                            <td>{{:: \'Start\' | lang}}</td>\n                            <td>{{$ctrl.fortiviewController.startTimestamp * 1000 | fDateTime}}</td>\n                        </tr>\n                        <tr ng-if="$ctrl.viewSettings[\'fortiview-timeframe\'] === \'custom\' &&\n                            $ctrl.fortiviewController.endTimestamp">\n                            <td>{{:: \'End\' | lang}}</td>\n                            <td>{{$ctrl.fortiviewController.endTimestamp * 1000 | fDateTime}}</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <hr>\n                <f-csf-truncated-tree device="$ctrl.csfTopology.thisFortigate">\n                </f-csf-truncated-tree>\n            </div>\n        </div>\n        <div f-pop-up-menu="$ctrl.timeframeMenu">\n            <div ng-repeat="option in $ctrl.fortiviewController.availableTimeframeOptions" f-tip-target\n                f-menu-item-button click="$ctrl.fortiviewController.timeframeUpdated(option, end, start)"\n                selected="$ctrl.viewSettings.timeframeOption == option">\n                <span>\n                    {{::\'fv_\' + option | lang}}\n                </span>\n            </div>\n            <div f-menu-item-button ng-if="$ctrl.viewSettings.timeframeOption === \'custom\'" selected="::true">\n                {{::\'fv_custom\' | lang}}\n            </div>\n        </div>\n\n        <button type="button" ng-class="{bare: !$ctrl.dashboardWidget.isZoomed}"\n            ng-click="$ctrl.fortiviewController.updateTimestampAndRefresh()"\n            f-tip-target>\n            <f-icon class="fa-refresh"></f-icon>\n            <div f-tip>\n                {{::\'Refresh\' | lang}}\n            </div>\n        </button>\n        <button type="button" ng-class="{primary: $ctrl.dashboard.isTemp}" f-tip-target\n            ng-if="$ctrl.dashboardWidget.isZoomed && (!$ctrl.isFullScreen || $ctrl.dashboard.isTemp)"\n            ng-click="$ctrl.detachToStandalone()">\n            <f-icon class="fa-external-link"></f-icon>\n            <div f-tip>\n                {{::\'Save as Monitor\' | lang}}\n            </div>\n        </button>\n        <f-widget-fortigate-chooser\n            ng-if="!$ctrl.initialLoading && !$ctrl.dashboardWidget.inTransition && !$ctrl.dashboardWidget.loading"\n            fortigate="$ctrl.viewSettings.fortigate"\n            all-fortigates="::true"\n            widget-model="::$ctrl.widgetModel"\n            full-widget="$ctrl.dashboardWidget.isZoomed || $ctrl.isFullScreen"\n            selection-disabled="::$ctrl.dashboard.isTemp">\n        </f-widget-fortigate-chooser>\n    </extra-controls>\n    <widget-content ng-if="!$ctrl.initialLoading">\n        <f-fortiview ng-if="::$ctrl.valid" controller="$ctrl.fortiviewController"\n            dashboard-widget="::$ctrl.dashboardWidget"\n            full-screen-widget="::$ctrl.isFullScreen"\n            widget-id="::$ctrl.modelData.id"\n            type="::$ctrl.modelData[\'fortiview-type\']"\n            device="::$ctrl.modelData[\'fortiview-device\']"\n            timeframe="::$ctrl.modelData[\'fortiview-timeframe\']"\n            visualization="::$ctrl.modelData[\'fortiview-visualization\']"\n            compare-by="::$ctrl.compareBy"\n            drilldown-value="::$ctrl.drilldown"\n            filters="::$ctrl.filters"\n            start-timestamp="::$ctrl.startTimestamp"\n            end-timestamp="::$ctrl.endTimestamp"\n            tab="::$ctrl.tab">\n        </f-fortiview>\n        <div class="full-dimension-widget flex-centered configuration-warning"\n            ng-if="::!$ctrl.valid">\n            <div class="flex-centered absolute-fill">\n                <div class="message">\n                    <f-icon class="fa-warning"></f-icon>\n                    <div class="message-content">\n                        {{::\'Widget has configuration issues. Please update widget settings.\' | lang}}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-preview-widget>\n')}]),module.exports=path},1775:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(2),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,fweb,Notify){function BotnetActivityWidget($scope,injector){injector.injectMarked(this,{$scope:$scope}),this.totalHits=0}return BotnetActivityWidget.prototype.$onInit=inject.mark(function($http,$q,$filter,lang,state){return function(){this.loading=!0;var botnetStatPromise=$http.get("/api/v2/monitor/system/botnet/stat"),domainStatPromise=$http.get("/api/v2/monitor/system/botnet-domains/stat");$q.all([botnetStatPromise,domainStatPromise]).then(function(response){var botnetStatResponse=response[0].data.results,domainStatResponse=response[1].data.results;this.totalIPs=botnetStatResponse.total_entries,this.botnetVersion=`v${botnetStatResponse.version}`,this.totalDomains=domainStatResponse.total_entries,this.domainVersion=`v${domainStatResponse.version}`;var dateFilter=$filter("fDateTime");this.activitySince=dateFilter(state.utc_last_reboot),this.totalBlockedIPs=0,this.totalBlockedDomains=0,this.totalBlockedConnections=0,this.updateCSFBlockedData().then(function(){this.loading=!1}.bind(this)),this.isVdomMode=state.vdom_mode}.bind(this),function(){Notify.post(lang("Failed loading Botnet definitions"),Notify.LEVEL.ERROR),this.loading=!1})}}),BotnetActivityWidget.prototype.updateCSFBlockedData=inject.mark(function($http,$q,csfTopology){return function(){return csfTopology.buildIfNecessary().then(function(){var promises={};return csfTopology.fortigates.forEach(function(fgt){var botnetURL=fgt.createCSFURI("/api/v2/monitor/system/botnet?include_hit_only=1"),domainURL=fgt.createCSFURI("/api/v2/monitor/system/botnet-domains/hits");promises[`${fgt.path}_IP`]=$http.get(botnetURL).catch(catchError),promises[`${fgt.path}_domain`]=$http.get(domainURL).catch(catchError)}),$q.all(promises);function catchError(){return null}}).then(function(response){Object.keys(response).forEach(function(key){const tokens=key.split("_"),path=tokens[0],type=tokens[1];if(response[key]){var results=response[key].data.results;if(results.length)if("IP"===type){const hitIPs=results.filter(item=>item.hit_count);this.totalBlockedIPs+=hitIPs.length,this.totalBlockedConnections+=hitIPs.reduce(function(acc,item){return acc+(item.hit_count||0)},0)}else this.totalBlockedDomains+=results.length,this.totalBlockedConnections+=results.reduce(function(acc,domain){return acc+(domain.count||0)},0)}else fweb.log.error(`Could not resolve botnet ${type} request from ${path}`)}.bind(this))}.bind(this))}}),BotnetActivityWidget.prototype.toggleMenu=function(menu,event){menu.toggle({top:event.clientY,left:event.clientX})},BotnetActivityWidget.prototype.showMonitorSlide=inject.mark(function(slide,lang){return function(){slide.open("botnetActivityList",{template:"<f-botnet-hit-monitor></f-botnet-hit-monitor>",options:{title:lang("Botnet Activity").toString(),fullHeight:!0}})}}),BotnetActivityWidget.prototype.showFortiGuardPage=inject.mark(function($location){return function(){$location.path("/system/fortiguard")}}),BotnetActivityWidget.prototype.showIPSLogPage=inject.mark(function($location){return function(){var filterQuery=encodeURIComponent(JSON.stringify([{id:"eventtype",logic:{is:{enum:!0},search:"string"},value:["botnet"]}]));$location.url(`/log/view/ips?filter=${filterQuery}`)}}),BotnetActivityWidget.prototype.showDNSQueryPage=inject.mark(function($location){return function(){var filterQuery=encodeURIComponent(JSON.stringify([{id:"botnetdomain",logic:{NOT:1,is:{string:!0},modifiers:["!"],search:"string"},value:['""']}]));$location.url(`/log/view/dns?filter=${filterQuery}`)}}),function(providers,loader){return providers.$compile.component("fBotnetActivityWidget",{templateUrl:__webpack_require__(1776),controller:BotnetActivityWidget,bindings:{widgetModel:"<"}}),loader.initModules([__webpack_require__(325)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1776:function(module,exports){var path="/migadmin/ng/system/dashboard/f-botnet-activity-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel" loading="$ctrl.loading">\n    <widget-title>\n        {{ :: \'dashboard_widget_type::botnet-activity\' | lang }}\n    </widget-title>\n    <widget-content class="menu-toggle-area clickable" ng-click="$ctrl.toggleMenu($ctrl.popUpMenu, $event)">\n        <table class="table full-width key-value">\n            <tbody class="detailed-stats">\n                <tr>\n                    <td>{{ ::\'Known IPs\' | lang }}</td>\n                    <td>\n                        <span>\n                            {{ $ctrl.totalIPs }}\n                        </span>\n                    </td>\n                </tr>\n                <tr>\n                    <td>{{ ::\'Known Domains\' | lang}}</td>\n                    <td>\n                        <span>\n                            {{ $ctrl.totalDomains }}\n                        </span>\n                    </td>\n                </tr>\n                <tr>\n                    <td>{{ ::\'Activity Since\' | lang }}</td>\n                    <td>\n                        <span>\n                            {{ $ctrl.activitySince }}\n                        </span>\n                    </td>\n                </tr>\n                <tr>\n                    <td>{{ ::\'Blocked IPs\' | lang }}</td>\n                    <td>\n                        <span class="number-bubble severity-critical">\n                            {{ $ctrl.totalBlockedIPs }}\n                        </span>\n                    </td>\n                </tr>\n                <tr>\n                    <td>{{ ::\'Blocked Domains\' | lang }}</td>\n                    <td>\n                        <span class="number-bubble severity-critical">\n                            {{ $ctrl.totalBlockedDomains }}\n                        </span>\n                    </td>\n                </tr>\n                <tr>\n                    <td>{{ ::\'Blocked Connections\' | lang }}</td>\n                    <td>\n                        <span class="number-bubble severity-critical">\n                            {{ $ctrl.totalBlockedConnections }}\n                        </span>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </widget-content>\n</f-dashboard-widget>\n\n<div f-pop-up-menu="$ctrl.popUpMenu">\n    <div f-menu-item-button click="$ctrl.showMonitorSlide()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{ ::\'Check Botnet Activity\' | lang }}</span>\n    </div>\n    <div f-menu-item-button click="$ctrl.showFortiGuardPage()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{ ::\'View package information in System > FortiGuard\' | lang }}</span>\n    </div>\n    <div f-menu-item-button ng-if="!$ctrl.isVdomMode" click="$ctrl.showIPSLogPage()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{ ::\'View IPs in Log & Reports > Intrusion Prevention\' | lang }}</span>\n    </div>\n    <div f-menu-item-button ng-if="!$ctrl.isVdomMode" click="$ctrl.showDNSQueryPage()">\n        <f-icon class="fa-external-link"></f-icon>\n        <span>{{ ::\'View domains in Log & Reports > DNS Query\' | lang }}</span>\n    </div>\n</div>')}]),module.exports=path},1777:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){function DisabledWidget(){this.data=this.widgetModel.getModelData(),this.type=this.data.type}return function(providers){providers.$compile.component("fDisabledDashboardWidget",{templateUrl:__webpack_require__(1778),controller:DisabledWidget,bindings:{widgetModel:"<"}})}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1778:function(module,exports){var path="/migadmin/ng/system/dashboard/f-disabled-dashboard-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-dashboard-widget widget-model="::$ctrl.widgetModel" disabled-widget="::true">\n    <widget-title>\n        {{::\'dashboard_widget_type::\' + $ctrl.type | lang}}\n    </widget-title>\n    <widget-content>\n        <div class="full-dimension-widget flex-centered">\n            <div class="disabled-label" ng-if="::!$ctrl.data.disabledPlaceholder">\n                {{::\'disabled\' | lang}}\n            </div>\n            <div class="disabled-label" ng-if="::$ctrl.data.disabledPlaceholder"\n                ng-bind-html="::$ctrl.data.disabledPlaceholder | toTrustedHtml">\n            </div>\n        </div>\n    </widget-content>\n</f-dashboard-widget>\n')}]),module.exports=path},1790:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){function HaHistory(injector,slide){injector.injectMarked(this),this.history=slide.get("ha-history-list").data.history}return function(providers){providers.$compile.component("fHaHistory",{controller:HaHistory,templateUrl:__webpack_require__(1791)})}}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1791:function(module,exports){var path="/migadmin/ng/system/dashboard/f-ha-history.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,"<table class=\"table full-width bordered striped\">\n    <thead>\n        <th>#</th><th>{{:: 'datetime' | lang }}</th><th>{{:: 'Log::column.event' | lang }}</th>\n    </thead>\n    <tbody>\n        <tr ng-repeat=\"log in ::$ctrl.history\">\n            <td>{{:: $index + 1 }}</td>\n            <td>{{:: log.time * 1000 | fDateTime }}</td>\n            <td>{{:: log.event }}</td>\n        </tr>\n    </tbody>\n</table>\n")}]),module.exports=path},1797:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(8),__webpack_require__(182)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,ftnt_shared){const Omniselect=ftnt_shared.Omniselect,DEVICE_LIST_VIEW_OPTION="device-list-view-type",DEVICE_LIST_ONLINE_OPTION="device-list-online",DEVICE_LIST_TELEMETRY_OPTION="device-list-telemetry";class ForticlientMonitor extends inject.Collectable{constructor(lang,deviceListOptions,$q){super(),this.title=lang("dashboard_widget_type::forticlient").toString(),this.deviceListType="fortiClientMonitor",this.hasViewOptions=deviceListOptions.hasViewOptions(this.deviceListType),this.hasDisplaySettings=deviceListOptions.hasDisplaySettings(this.deviceListType),this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology,deviceData,$scope){return async()=>{if(this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.hasViewOptions&&(this.viewSettings[DEVICE_LIST_VIEW_OPTION]=this.modelData[DEVICE_LIST_VIEW_OPTION],!this.isDeviceViewValid()))throw new Error("Invalid view type option is being used");this.hasDisplaySettings&&(this.viewSettings[DEVICE_LIST_TELEMETRY_OPTION]=this.modelData[DEVICE_LIST_TELEMETRY_OPTION],this.viewSettings[DEVICE_LIST_ONLINE_OPTION]=this.modelData[DEVICE_LIST_ONLINE_OPTION]),deviceData.subscribeStatistics($scope,(event,statistics)=>{this.statistics=statistics}),this.setupSettings(),await this.loadSource({invalidateDeviceCache:!0,invalidateAddressCache:!0}),this.setupWatch(),this.loadingPromise.resolve()}}isDeviceViewValid($INJECTABLE$,deviceViewTypes){return()=>deviceViewTypes.validOptionForConfig(this.deviceListType,this.viewSettings[DEVICE_LIST_VIEW_OPTION],this.viewSettings.fortigate)}getValidDeviceViewType($INJECTABLE$,deviceViewTypes){return()=>deviceViewTypes.getValidViewOption(this.deviceListType,this.viewSettings.fortigate)}verifyDeviceViewType(){if(this.hasViewOptions&&!this.isDeviceViewValid()){const option=this.getValidDeviceViewType();this.viewSettings[DEVICE_LIST_VIEW_OPTION]=option.value}}get noCharts(){return this.modelData&&"table"===this.modelData["table-visualization"]&&(!this.dashboardWidget||!this.dashboardWidget.isZoomed)}get chartsOnly(){return this.modelData&&"charts"===this.modelData["table-visualization"]}async loadSource(params={}){this.verifyDeviceViewType();const options=Object.assign(params,{deviceListType:this.deviceListType,viewType:this.viewSettings[DEVICE_LIST_VIEW_OPTION],displaySetting:{online:this.viewSettings[DEVICE_LIST_ONLINE_OPTION],telemetry:this.viewSettings[DEVICE_LIST_TELEMETRY_OPTION]}});this.viewSettings.fortigate&&(options.fortigate=this.viewSettings.fortigate),await this.setupSource(options),params.highlightParams&&this.muTable.locateNextRender(params.highlightParams)}setupSettings($INJECTABLE$,deviceListOptions,lang){return()=>{this.settings=deviceListOptions.getOptions(this.deviceListType,this.viewSettings[DEVICE_LIST_VIEW_OPTION],this.viewSettings.fortigate),this.chartTotalLabels=this.settings.columns.map(()=>lang("Devices").toString())}}setupSource($INJECTABLE$,DeviceListSource){return async options=>{const key=`FortiClientMonitor::${this.viewSettings.fortigate.serial}`,invalidateCache=options.invalidateAddressCache||options.invalidateAddressDeviceCache,source=await this.dashboard.getData(key,()=>new DeviceListSource,{invalidateCache:invalidateCache});source.setupOptions(options),this.source=source}}setupWatch($INJECTABLE$,$scope){return()=>{$scope.$on(Omniselect.NOTIFY_SOURCE_CHANGED_MESSAGE,async(event,sourceID)=>{sourceID.includes("firewall.address")&&await this.loadSource({invalidateDeviceCache:!0,invalidateAddressCache:!0})}),$scope.$on("QUARANTINE_EVENTS",async()=>{await this.loadSource({invalidateDeviceCache:!0,invalidateAddressCache:!0})}),$scope.$watchGroup([()=>this.viewSettings.fortigate,()=>this.viewSettings[DEVICE_LIST_VIEW_OPTION]],([newFgt,newVal],[oldFgt])=>{(!!newVal||newFgt&&"all"!==newFgt.q_origin_key!==oldFgt.q_origin_key!=="all")&&this.setupSettings()})}}}return function(providers,loader){return providers.$compile.component("fForticlientMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1798),controller:ForticlientMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(329)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1798:function(module,exports){var path="/migadmin/ng/system/dashboard/f-forticlient-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.source"\n    settings="$ctrl.settings"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="$ctrl.settings.chartColumns"\n    no-charts="$ctrl.noCharts"\n    chart-total-labels="::$ctrl.chartTotalLabels"\n    dashboard-widget="::$ctrl.dashboardWidget"\n    widget-model="::$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.loadSource({invalidateDeviceCache: true, invalidateAddressCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise"\n    all-fortigates="::true">\n    <mutable-widget-controls>\n        <f-device-display-setting-item\n            ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.loading && $ctrl.hasDisplaySettings"\n            widget-controller="$ctrl"\n            option-key="::\'online\'">\n        </f-device-display-setting-item>\n        <f-device-display-setting-item\n            ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.loading && $ctrl.hasDisplaySettings"\n            widget-controller="$ctrl"\n            option-key="::\'telemetry\'">\n        </f-device-display-setting-item>\n        <f-device-view-type-item\n            ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.loading && $ctrl.hasViewOptions"\n            widget-controller="$ctrl"\n            fortigate="$ctrl.viewSettings.fortigate"\n            list-type="$ctrl.deviceListType">\n        </f-device-view-type-item>\n    </mutable-widget-controls>\n    <f-device-list-menu class="menu-bar-component"\n        menu="::menu"\n        list="$ctrl"\n        list-type="$ctrl.deviceListType"\n        address-map="$ctrl.source.map"\n        statistics="$ctrl.statistics">\n    </f-device-list-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1799:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(8),__webpack_require__(182)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject,ftnt_shared){const Omniselect=ftnt_shared.Omniselect,DEVICE_LIST_ONLINE_OPTION="device-list-online",DEVICE_LIST_TELEMETRY_OPTION="device-list-telemetry",DEVICE_LIST_VIEW_OPTION="device-list-view-type";class DeviceInventoryMonitor extends inject.Collectable{constructor(lang,deviceListOptions,$q){super(),this.title=lang("dashboard_widget_type::device-inventory").toString(),this.deviceListType="deviceInventory",this.hasViewOptions=deviceListOptions.hasViewOptions(this.deviceListType),this.hasDisplaySettings=deviceListOptions.hasDisplaySettings(this.deviceListType),this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology,deviceViewTypes,deviceData,$scope){return async()=>{if(this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.hasViewOptions&&(this.viewSettings[DEVICE_LIST_VIEW_OPTION]=this.modelData[DEVICE_LIST_VIEW_OPTION],!this.isDeviceViewValid()))throw new Error("Invalid view type option is being used");this.hasDisplaySettings&&(this.viewSettings[DEVICE_LIST_TELEMETRY_OPTION]=this.modelData[DEVICE_LIST_TELEMETRY_OPTION],this.viewSettings[DEVICE_LIST_ONLINE_OPTION]=this.modelData[DEVICE_LIST_ONLINE_OPTION]),this.loadingPromise.resolve(),this.setupWatch(),deviceData.subscribeStatistics($scope,(event,statistics)=>{this.statistics=statistics}),this.setupSettings(),await this.loadSource({invalidateDeviceCache:!0,invalidateAddressCache:!0})}}isDeviceViewValid($INJECTABLE$,deviceViewTypes){return()=>deviceViewTypes.validOptionForConfig(this.deviceListType,this.viewSettings[DEVICE_LIST_VIEW_OPTION],this.viewSettings.fortigate)}getValidDeviceViewType($INJECTABLE$,deviceViewTypes){return()=>deviceViewTypes.getValidViewOption(this.deviceListType,this.viewSettings.fortigate)}verifyDeviceViewType(){if(this.hasViewOptions&&!this.isDeviceViewValid()){const option=this.getValidDeviceViewType();this.viewSettings[DEVICE_LIST_VIEW_OPTION]=option.value}}get noCharts(){return this.modelData&&"table"===this.modelData["table-visualization"]&&(!this.dashboardWidget||!this.dashboardWidget.isZoomed)}get chartsOnly(){return this.modelData&&"charts"===this.modelData["table-visualization"]}async loadSource(params={}){this.verifyDeviceViewType();const options=Object.assign(params,{deviceListType:this.deviceListType,viewType:this.viewSettings[DEVICE_LIST_VIEW_OPTION],displaySetting:{online:this.viewSettings[DEVICE_LIST_ONLINE_OPTION],telemetry:this.viewSettings[DEVICE_LIST_TELEMETRY_OPTION]}});this.viewSettings.fortigate&&(options.fortigate=this.viewSettings.fortigate),await this.setupSource(options),params.highlightParams&&this.muTable.locateNextRender(params.highlightParams)}setupSettings($INJECTABLE$,deviceListOptions,lang){return()=>{this.settings=deviceListOptions.getOptions(this.deviceListType,this.viewSettings[DEVICE_LIST_VIEW_OPTION],this.viewSettings.fortigate),this.chartTotalLabels=this.settings.columns.map(()=>lang("Devices").toString())}}setupSource($INJECTABLE$,DeviceListSource,csfTopology){return async options=>{"all"===this.viewSettings.fortigate.q_origin_key?csfTopology.getFgts().forEach(async fgt=>{await Omniselect.getSourceData(fgt.getOmniselectProxySourceID("devices"))}):await Omniselect.getSourceData(this.viewSettings.fortigate.getOmniselectProxySourceID("devices"));const key=`DeviceInventory::${this.viewSettings.fortigate.serial}`,invalidateCache=options.invalidateDeviceCache||options.invalidateAddressCache,source=await this.dashboard.getData(key,()=>new DeviceListSource,{invalidateCache:invalidateCache});source.setupOptions(options),this.source=source}}setupWatch($INJECTABLE$,$scope){return()=>{$scope.$on(Omniselect.NOTIFY_SOURCE_CHANGED_MESSAGE,async(event,sourceID)=>{sourceID.includes("firewall.address")&&await this.loadSource({invalidateDeviceCache:!0,invalidateAddressCache:!0})}),$scope.$on("QUARANTINE_EVENTS",async()=>{await this.loadSource({invalidateDeviceCache:!0,invalidateAddressCache:!0})}),$scope.$watchGroup([()=>this.viewSettings.fortigate,()=>this.viewSettings[DEVICE_LIST_VIEW_OPTION]],([newFgt,newVal],[oldFgt])=>{(!!newVal||newFgt&&"all"!==newFgt.q_origin_key!==oldFgt.q_origin_key!=="all")&&this.setupSettings()})}}}return function(providers,loader){return providers.$compile.component("fDeviceInventoryMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1800),controller:DeviceInventoryMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(1801),__webpack_require__(329),__webpack_require__(538),__webpack_require__(1807)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1800:function(module,exports){var path="/migadmin/ng/system/dashboard/f-device-inventory-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.source"\n    settings="$ctrl.settings"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="$ctrl.settings.chartColumns"\n    no-charts="$ctrl.noCharts"\n    chart-total-labels="::$ctrl.chartTotalLabels"\n    dashboard-widget="::$ctrl.dashboardWidget"\n    widget-model="::$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.loadSource({invalidateDeviceCache: true, invalidateAddressCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise"\n    all-fortigates="::true">\n    <mutable-widget-controls>\n        <f-device-display-setting-item\n            ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.loading && $ctrl.hasDisplaySettings"\n            widget-controller="$ctrl"\n            option-key="::\'online\'">\n        </f-device-display-setting-item>\n        <f-device-display-setting-item\n            ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.loading && $ctrl.hasDisplaySettings"\n            widget-controller="$ctrl"\n            option-key="::\'telemetry\'">\n        </f-device-display-setting-item>\n        <f-device-view-type-item\n            ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.loading && $ctrl.hasViewOptions"\n            widget-controller="$ctrl"\n            fortigate="$ctrl.viewSettings.fortigate"\n            list-type="$ctrl.deviceListType">\n        </f-device-view-type-item>\n    </mutable-widget-controls>\n    <f-device-list-menu class="menu-bar-component"\n        menu="::menu"\n        list="$ctrl"\n        list-type="$ctrl.deviceListType"\n        address-map="$ctrl.source.map"\n        fortigate="$ctrl.viewSettings.fortigate"\n        statistics="$ctrl.statistics">\n    </f-device-list-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1812:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(32),__webpack_require__(34)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,fFormatters,fDatetime)=>{class FortiguardQuotaMonitor extends inject.Collectable{constructor(lang,state,$q){super(),this.title=lang("dashboard_widget_type::fortiguard-quota").toString(),this.muTable={},this.readOnly=state.readOnlyForPage,this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.setupSettings(),this.setupSource()}}reset($INJECTABLE$,slide,$http,lang){return menu=>{slide.confirm(lang("Are you sure you want to reset this quota usage?"),slide.WARNING).then(()=>{const entry=menu.lastSelectedEntry,url=this.viewSettings.fortigate.createCSFURI("/api/v2/monitor/webfilter/category-quota/reset");$http.post(url,{profile:entry.profile,user:entry.user||entry.ip||entry.ip6}).then(async()=>{await this.setupSource({invalidateCache:!0})})})}}view($INJECTABLE$,slide,lang,$rootScope){return menu=>{const entry=menu.lastSelectedEntry,scope=$rootScope.$new();scope.entry=entry,scope.fortigate=this.viewSettings.fortigate,slide.open("category-quota-usage",{template:'<f-category-quota-usage entry="::entry"\n                        fortigate="::fortigate"></f-category-quota-usage>',parentScope:scope,options:{title:lang("enb_quota").toString()}}).finally(()=>{scope.$destory()})}}setupSource($INJECTABLE$,$http){return async({invalidateCache:invalidateCache}={})=>{const key=`WebfilterQutoa::${this.viewSettings.fortigate.serial}`,fetchData=()=>$http.get("/api/v2/monitor/webfilter/category-quota/",{csfProxy:this.viewSettings.fortigate}).then(res=>res.data.results),source=await this.dashboard.getData(key,()=>fetchData(),{invalidateCache:invalidateCache});this.muTable.source=source}}setupSettings(){this.muTable.settings={columns:[{id:"user",cellFormatter:function(entry,column){return entry[column.id]||entry.ip||entry.ip6}},{id:"profile",langKey:"wfprofile"},{id:"quota",langKey:"usedquota",cellFormatter:function(entry){const values=[];return entry.traffic&&values.push(fFormatters.metric_bytes(entry.traffic)),entry.time&&values.push(fDatetime.elapsedTime(entry.time*fDatetime.S_TO_MS)),values.join(" / ")}}],defaultColumns:["user","quota","profile"]}}}return function(providers,loader){return providers.$compile.component("fFortiguardQuotaMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1813),controller:FortiguardQuotaMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(1814)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1813:function(module,exports){var path="/migadmin/ng/system/dashboard/f-fortiguard-quota-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    dashboard="$ctrl.dashboard"\n    dashboard-widget="$ctrl.dashboardWidget"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.setupSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <div class="left-menu-items">\n        <div f-menu-item-edit view-only="true" action="$ctrl.view(menu)"></div>\n        <div f-menu-item-button click="$ctrl.reset(menu)" ng-if="!$ctrl.readOnly"\n            enabled="menu.entries.length == 1">\n            <f-icon class="fa-reset"></f-icon>\n            <span>{{:: \'Reset Quota\' | lang }}</span>\n        </div>\n    </div>\n</f-mutable-widget>\n')}]),module.exports=path},1827:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(8),__webpack_require__(34),__webpack_require__(38),__webpack_require__(31),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,ftnt_shared,datetime,icon,dom,notify)=>{const Omniselect=ftnt_shared.Omniselect,MONITOR_USER_FIREWALL_DEAUTHENTICATE_URL="/api/v2/monitor/user/firewall/deauth",FSSO_OPTION="fsso-user-visibility";class FirewallUserMonitor extends inject.Collectable{constructor(lang,$q){super(),this.muTable={},this.title=lang("dashboard_widget_type::firewall-user").toString(),this.chartColumns=["method","usergroup"],this.chartTotalLabels=this.chartColumns.map(()=>lang("users").toString()),this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.viewSettings[FSSO_OPTION]=this.modelData[FSSO_OPTION],this.loadingPromise.resolve(),this.muTable.settings=this.getSettings(),await this.loadSource()}}get showFssoUsers(){return"enable"===this.viewSettings[FSSO_OPTION]}set showFssoUsers(show){this.viewSettings[FSSO_OPTION]=show?"enable":"disable",this.loadSource()}toggleShowFssoUsers(){this.showFssoUsers=!this.showFssoUsers}async loadSource({invalidateCache:invalidateCache}={invalidateCache:!1}){invalidateCache&&Omniselect.invalidateCacheForSource("user.info"),this.muTable.source=await this.getSource(invalidateCache)}getSettings($INJECTABLE$,lang,csfTopology){return()=>({columns:[{id:"username",type:"omniselect",langKey:"User Name",cellValueFunction:entry=>Object.assign({},entry,{datasource:entry.datasource}),cellIsValidCollectionFunction:function(entry){return entry.datasource&&entry.q_origin_key},collectionFallbackValueFunction:function(entry,column){return entry[column.id]},collectionFallbackFormatter:function(entry,column,value){const iconClass=icon.iconClass(icon.ICON_TYPE.USER,"authenticated");return dom.elem("span",{},{children:[dom.elem("f-icon",{className:iconClass}),dom.elem("span",{textContent:value})]})}},{id:"usergroup",type:"omniselect",langKey:"authusrgrp",cellValueFunction:(entry,column)=>{let usergroups;const fortigate=csfTopology.fortigateMapping[entry.fortigate];usergroups=Array.isArray(entry[column.id])?entry[column.id]:"string"==typeof entry[column.id]?[{name:entry[column.id],type:"group"}]:entry[column.id]?[entry[column.id]]:[];let value=[];return usergroups.forEach(usergroup=>{const type=usergroup.type;if("gruop"===type||"adgrp"===type){const datasource=fortigate.getOmniselectProxySourceID(`user.${type}`);value.push({q_origin_key:usergroup.name,datasource:datasource})}}),value}},{id:"duration_secs",type:"standard",langKey:"Duration",cellFormatter:function(entry,column){return datetime.elapsedTime(entry[column.id]*datetime.S_TO_MS)}},{id:"ipaddr",type:"standard",langKey:"IP Address"},{id:"traffic_vol_bytes",type:"number",numberType:"metricBytes",numberCompareBar:"dualGood",getCompareBarMax:()=>this.muTable.source.totalTrafficVolume,cellValueFunction:function(entry,column){return entry[column.id]||0},langKey:"traffic_vol"},{id:"method",type:"standard",langKey:"method",trustCellFormatterForHTML:!0,cellValueFunction:(entry,column)=>{const method=entry[column.id]&&entry[column.id].toLowerCase()||"firewall";return lang(`AuthenticationType::${method}`).toString()},cellFormatter:function(entry,column,value){const method=entry[column.id]&&entry[column.id].toLowerCase()||"firewall";let methodIcon=icon.formatIcon(icon.ICON_TYPE.LOGON,method,{label:value});if("wad"===(entry.type||"")){methodIcon=`${icon.genIcon("ftnt-web-proxy",lang("explicit_proxy").toString())} ${methodIcon}`}return methodIcon}},{id:"expiry_secs",type:"standard",langKey:"Time Left",cellFormatter:function(entry,column){return datetime.elapsedTime(entry[column.id]*datetime.S_TO_MS)}}],defaultColumns:["username","ipaddr","usergroup","duration_secs","traffic_vol_bytes","method"]})}getSource($INJECTABLE$,UserMonitorSource){return async invalidateCache=>{const fortigate=this.viewSettings.fortigate,key=`FirewallUser::${this.showFssoUsers}::${fortigate.serial}`;return await this.dashboard.getData(key,()=>new UserMonitorSource({showFssoUsers:this.showFssoUsers,fortigate:fortigate}),{invalidateCache:invalidateCache})}}onDeauthenticateUsers($INJECTABLE$,$http,lang,slide){function proccessDeauthedUser(result,entry){return entry.hasOwnProperty("uid")&&result.push({user_type:"proxy",id:+entry.uid,ip:entry.ipaddr}),entry.hasOwnProperty("id")&&entry.hasOwnProperty("src_type")&&result.push({user_type:"firewall",id:+entry.id,ip:entry.ipaddr,ip_version:entry.src_type,method:entry.method&&entry.method.toLowerCase()}),result}return users=>{slide.confirm(lang("deauth_users_q").toString()).then(()=>{const url=this.viewSettings.fortigate.createCSFURI(MONITOR_USER_FIREWALL_DEAUTHENTICATE_URL);return $http.post(url,{users:users.reduce(proccessDeauthedUser,[])}).catch(function(){notify.post(lang("Failed to save changes").toString(),"error")})}).then(()=>{this.loadSource({invalidateCache:!0})})}}get chartsOnly(){return this.dashboardWidget&&!this.dashboardWidget.isZoomed}}return function(providers,loader){return providers.$compile.component("fFirewallUserMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1828),controller:FirewallUserMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(1829),__webpack_require__(1830)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1828:function(module,exports){var path="/migadmin/ng/system/dashboard/f-firewall-user-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="$ctrl.chartColumns"\n    chart-total-labels="$ctrl.chartTotalLabels"\n    dashboard-widget="$ctrl.dashboardWidget"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.loadSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <mutable-widget-controls>\n        <div ng-if="$ctrl.dashboardWidget.isZoomed && !$ctrl.loading"\n            f-menu-item-toggle="$ctrl.showFssoUsers" click="$ctrl.toggleShowFssoUsers()">\n            <span>{{:: \'show_fsso_logons\' | lang}}</span>\n        </div>\n    </mutable-widget-controls>\n    <f-user-auth-menu\n        menu="menu"\n        class="menu-bar-component"\n        on-deauthenticate-users="$ctrl.onDeauthenticateUsers(users)">\n    </f-user-auth-menu>\n</f-mutable-widget>\n')}]),module.exports=path},1837:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26),__webpack_require__(8),__webpack_require__(34)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=((inject,ftnt_shared,datetime)=>{class CollectedEmailMonitor extends inject.Collectable{constructor(lang,$q){super(),this.muTable={},this.title=lang("dashboard_widget_type::collected-email").toString(),this.viewSettings={},this.loadingPromise=$q.defer()}$onInit($INJECTABLE$,csfTopology){return async()=>{this.modelData=this.widgetModel.getModelData(),await csfTopology.buildIfNecessary(),this.viewSettings.fortigate=this.dashboard.getChosenFortigate(this.modelData),this.loadingPromise.resolve(),this.settings=this.getSettings(),await this.loadSource()}}async loadSource({invalidateCache:invalidateCache}={}){const source=await this.getSource({invalidateCache:invalidateCache}),settings=this.getSettings();Object.assign(this.muTable,{source:source,settings:settings})}getSource($INJECTABLE$,UserCollectedEmailSource){return async({invalidateCache:invalidateCache}={})=>{const key=`CollectedEmail::${this.viewSettings.fortigate.serial}`;return await this.dashboard.getData(key,()=>new UserCollectedEmailSource(this.viewSettings.fortigate),{invalidateCache:invalidateCache})}}getSettings(){return{defaultColumns:["collected_email","duration_secs","ipaddr","traffic_vol_bytes","expiry_secs"],columns:[{id:"collected_email",langKey:"Collected Email"},{id:"duration_secs",langKey:"Duration",type:"number",numberType:"timeDuration"},{id:"ipaddr",langKey:"IP Address"},{id:"traffic_vol_bytes",langKey:"traffic_vol",type:"number",numberType:"metricBytes",numberCompareBar:"dualGood",getCompareBarMax:()=>this.muTable.source.totalTrafficVolume,cellValueFunction:(entry,column)=>entry[column.id]||0},{id:"expiry_secs",langKey:"Time Left",type:"number",numberType:"timeDuration"}]}}get exportFileName(){const dateObject=Date.now();return`collected_email_${datetime.formatDate(dateObject).replace(/\//g,"")}_${datetime.formatTime(dateObject).split(":").slice(0,2).join("")}`}}return function(providers,loader){return providers.$compile.component("fCollectedEmailMonitorWidget",{bindings:{widgetModel:"<"},templateUrl:__webpack_require__(1838),controller:CollectedEmailMonitor,require:{dashboard:"^fSystemDashboard"}}),loader.initModules([__webpack_require__(33),__webpack_require__(1839)])}}).apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},1838:function(module,exports){var path="/migadmin/ng/system/dashboard/f-collected-email-monitor-widget.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable-widget\n    widget-title="::$ctrl.title"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings"\n    charts-only="$ctrl.chartsOnly"\n    chart-columns="$ctrl.chartColumns"\n    dashboard-widget="$ctrl.dashboardWidget"\n    widget-model="$ctrl.widgetModel"\n    context-menu="::true"\n    on-refresh="$ctrl.loadSource({invalidateCache: true})"\n    view-settings="$ctrl.viewSettings"\n    dashboard="$ctrl.dashboard"\n    model-data="$ctrl.modelData"\n    loading-promise="::$ctrl.loadingPromise">\n    <div class="left-menu-items">\n        <f-mutable-export file-name="$ctrl.exportFileName"></f-mutable-export>\n    </div>\n    <div class="center-menu-items" ng-if="::menu.menuBar">\n        <f-mutable-search></f-mutable-search>\n    </div>\n</f-mutable-widget>\n')}]),module.exports=path},1862:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_RESULT__;void 0===(__WEBPACK_AMD_DEFINE_RESULT__=(()=>{const CACHE_EXPIRY=18e4;function DashboardCacheFactory(){return class{constructor(){this._cache={}}get(key){return this._cache[key]}set(key,data){this._cache[key]={data:data,created:Date.now()}}isValid(key){return this._cache[key]&&Date.now()-this._cache[key].created<CACHE_EXPIRY}}}return function(providers){providers.$provide.factory("DashboardCache",DashboardCacheFactory)}}).apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},325:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(9),__webpack_require__(26),__webpack_require__(27)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(angular,inject,Notify){var BOTNET_URL="/api/v2/monitor/system/botnet?include_hit_only=1";function BotnetHitMonitor($scope,injector,csfTopology){injector.injectMarked(this,{$scope:$scope}),$scope.$watch(function(){return csfTopology.selectedFortigate},function(newValue,oldValue){newValue&&newValue!==oldValue&&this.setupMuTable()}.bind(this))}BotnetHitMonitor.prototype.$onInit=inject.mark(function($http){return function(){this.domainMap=$http.get("/api/v2/monitor/system/botnet-domains").then(function(results){results.data.results.forEach(function(item){this.domainMap[item.domain]=item.app_name}.bind(this))}.bind(this)),this.setupMuTable()}}),BotnetHitMonitor.prototype.setupMuTable=function(){this.muTable={settings:this.getMutableSettings(),source:this.getMutableSource()}},BotnetHitMonitor.prototype.getMutableSource=inject.mark(function($http,$q,lang,csfTopology){return function(){var botnetHitsPromise=csfTopology.buildIfNecessary().then(function(){var promises;if(csfTopology.selectedFortigate&&"all"===csfTopology.selectedFortigate.q_origin_key)promises={},csfTopology.fortigates.forEach(function(fgt){var ipKey=fgt.serial+"::ipHits",domainKey=fgt.serial+"::domainHits";promises[ipKey]=$http.get(fgt.createCSFURI(BOTNET_URL)),promises[domainKey]=$http.get(fgt.createCSFURI("/api/v2/monitor/system/botnet-domains/hits"))});else{var fgt=csfTopology.selectedFortigate||csfTopology.thisFortigate;promises={ipHits:$http.get(fgt.createCSFURI(BOTNET_URL)),domainHits:$http.get(fgt.createCSFURI("/api/v2/monitor/system/botnet-domains/hits"))}}return $q.all(promises)});return $q.all([botnetHitsPromise,this.domainMap]).then(function(response){var hitsResponse=response[0];return Object.keys(hitsResponse).reduce(function(list,key){var entries,keyTokens=key.split("::"),type=keyTokens[1]||keyTokens[0],fortigate=csfTopology.selectedFortigate||csfTopology.thisFortigate,serial=keyTokens[1]?keyTokens[0]:fortigate.serial;return(entries="domainHits"===type?hitsResponse[key].data.results.map(function(entry){return{domain:entry.domain,hit_count:entry.count,app_name:this.domainMap[entry.domain]}}.bind(this)):hitsResponse[key].data.results).forEach(function(entry){entry.fortigate=serial}),list.concat(entries)}.bind(this),[])}.bind(this),function(){Notify.post(lang("Failed loading Botnet definitions"),Notify.LEVEL.ERROR)})}}),BotnetHitMonitor.prototype.getMutableSettings=inject.mark(function(csfTopology){return function(){return{defaultColumns:["ip_domain","name","hit_count"],columns:[{id:"ip_domain",langKey:"Botnet IP/Domain Name",cellValueFunction:function(entry){return entry.domain?entry.domain:entry.ip+":"+entry.port}},{id:"protocol",langKey:"Protocol",cellValueFunction:function(entry){if(entry.protocol)return entry.protocol.toUpperCase()}},{id:"name",langKey:"Botnet Name",cellValueFunction:function(entry){return entry.bot_name||entry.app_name}},{id:"hit_count",type:"number"},{id:"fortigate",langKey:"FortiGate",type:"omniselect",cellValueFunction:function(entry){return{datasource:"csfFortiGates",q_origin_key:entry.fortigate}},hidden:!csfTopology.csfEnabled}]}}}),BotnetHitMonitor.prototype.refreshData=inject.mark(function(){return function(){}});var fBotnetHitMonitor={controller:BotnetHitMonitor,templateUrl:__webpack_require__(326)};return function(providers,loader){return providers.$compile.component("fBotnetHitMonitor",fBotnetHitMonitor),loader.initModules([__webpack_require__(327)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},326:function(module,exports){var path="/migadmin/ng/system/botnet/f-botnet-hit-monitor.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<f-mutable context-menu="::true"\n    source="$ctrl.muTable.source"\n    settings="$ctrl.muTable.settings">\n    <f-botnet-hit-monitor-menu\n        refresh-fn="$ctrl.setupMuTable()"\n        menu="menu"\n        class="menu-bar-component">\n    </f-botnet-hit-monitor-menu>\n</f-mutable>\n')}]),module.exports=path},327:function(module,exports,__webpack_require__){"use strict";var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(26)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(inject){function BotnetHitMonitorMenu($scope,injector,state){injector.injectMarked(this,{$scope:$scope}),this.isVdomMode=state.vdom_mode}BotnetHitMonitorMenu.prototype.refresh=function(){return this.refreshFn()},BotnetHitMonitorMenu.prototype.viewDetails=inject.mark(function($location){return function(){var filter,entry=this.menu.lastSelectedEntry,url=entry.domain?"/log/view/dns?filter=":"/log/view/ips?filter=";filter=entry.domain?[{id:"botnetdomain",logic:{is:{string:!0},search:"string"},value:[entry.domain]}]:[{id:"dstip",logic:{is:{ip:!0},search:"string"},value:[entry.ip]}],$location.url(url+encodeURIComponent(JSON.stringify(filter)))}.bind(this)});var fBotnetHitMonitorMenu={controller:BotnetHitMonitorMenu,templateUrl:__webpack_require__(328),bindings:{menu:"<",refreshFn:"&"}};return function(providers,loader){return providers.$compile.component("fBotnetHitMonitorMenu",fBotnetHitMonitorMenu),loader.initModules([__webpack_require__(33)])}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},328:function(module,exports){var path="/migadmin/ng/system/botnet/f-botnet-hit-monitor-menu.html";window.angular.module("ng").run(["$templateCache",function(c){c.put(path,'<div class="left-menu-items" ng-if="$ctrl.menu.menuBar">\n    <div f-menu-item-button ng-click="$ctrl.refresh()">\n        <f-icon class="fa-refresh"></f-icon>\n        <span>{{::\'refresh\' | lang}}</span>\n    </div>\n</div>\n<div class="center-menu-items" ng-if="$ctrl.menu.menuBar"></div>\n<div class="right-menu-items" ng-if="$ctrl.menu.menuBar">\n    <f-csf-fortigate-chooser all-fortigates="::true"></f-csf-fortigate-chooser>\n</div>\n\n<div f-menu-item-button click="$ctrl.viewDetails()" ng-if="!$ctrl.isVdomMode && !$ctrl.menu.menuBar && $ctrl.menu.entries.length > 0">\n    <f-icon class="fa-external-link"></f-icon>\n    <span>{{ ::\'View in Log & Reports\' | lang }}</span>\n</div>')}]),module.exports=path}}]);